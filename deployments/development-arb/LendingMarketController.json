{
  "address": "0xB4365554D463E24C38144Fa96A78381808DE8bbf",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOperator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ContractLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMaturity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketTerminated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotAllowedAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTerminated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OnlyAcceptedContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAlreadyRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        }
      ],
      "name": "calculateFunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unallocatedCollateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.CalculatedFunds",
          "name": "funds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.AdditionalFunds",
          "name": "_additionalFunds",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        }
      ],
      "name": "calculateTotalFundsInBaseCurrency",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "plusDepositAmountInAdditionalFundsCcy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minusDepositAmountInAdditionalFundsCcy",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.CalculatedTotalFunds",
          "name": "funds",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_orderId",
          "type": "uint48"
        }
      ],
      "name": "cancelOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanUpAllFunds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "cleanUpFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalActiveOrderCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_openingDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_preOpeningDate",
          "type": "uint256"
        }
      ],
      "name": "createOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "depositAndExecuteOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "depositAndExecutesPreOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_permitV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_permitR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_permitS",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermitAndExecuteOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_permitV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_permitR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_permitS",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermitAndExecutePreOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositZCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeEmergencySettlement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeEmergencyTermination",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "executeForcedRepayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "executeItayoseCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_collateralCcy",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_debtCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_debtMaturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "executeLiquidationCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "enum ProtocolTypes.Side",
          "name": "_side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unitPrice",
          "type": "uint256"
        }
      ],
      "name": "executePreOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "executeRedemption",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "executeRepayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCircuitBreakerLimitRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getCurrentMinDebtUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getFutureValueVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getGenesisDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getGenesisValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amountInPV",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amountInFV",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLendingMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketBasePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMaturities",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMinDebtUnitPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getOrderBookId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getOrderBookIds",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "enum ProtocolTypes.Side",
              "name": "side",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "additionalDepositAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ignoreBorrowedAmount",
              "type": "bool"
            }
          ],
          "internalType": "struct ILendingMarketController.GetOrderEstimationParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "getOrderEstimation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastUnitPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "filledAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "filledAmountInFV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderFeeInFV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "placedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInsufficientDepositAmount",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getOrderFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getPendingOrderAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "presentValue",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "futureValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTerminationCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTerminationCurrencyCache",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct TerminationCurrencyCache",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTerminationDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalPresentValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalPresentValueInBaseCurrency",
      "outputs": [
        {
          "internalType": "int256",
          "name": "totalPresentValue",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableZCTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getZCToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zcToken",
          "type": "address"
        }
      ],
      "name": "getZCTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZCTokenInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketBasePeriod",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_genesisDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_orderFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_circuitBreakerLimitRange",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDebtUnitPrice",
          "type": "uint256"
        }
      ],
      "name": "initializeLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isInitializedLendingMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isRedemptionRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTerminated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "isValidMaturity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "migrateLendingMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "pauseLendingMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "rotateOrderBooks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "unpauseLendingMarket",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "unwindPosition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_cbLimitRange",
          "type": "uint256"
        }
      ],
      "name": "updateCircuitBreakerLimitRange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_minDebtUnitPrice",
          "type": "uint256"
        }
      ],
      "name": "updateMinDebtUnitPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_orderFeeRate",
          "type": "uint256"
        }
      ],
      "name": "updateOrderFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawZCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x928349de1d0a2995dd3def811a9f0d42af8fa7e08f47bccc54b09ef02fca912f",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x5ec189EaFe5C2F0B755687AE8FeE791c9267b465",
    "transactionIndex": 4,
    "gasUsed": "10673922",
    "logsBloom": "0x
    "blockHash": "0x2819aab6b64969031c722aeec5c4957f7ed6145cf3a705b18d97a9b088fa6bc7",
    "transactionHash": "0x928349de1d0a2995dd3def811a9f0d42af8fa7e08f47bccc54b09ef02fca912f",
    "logs": [],
    "blockNumber": 27101015,
    "cumulativeGasUsed": "12411534",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6cc4ddb223a3b82cf51c267738efb702",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ContractLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMaturity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketTerminated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotAllowedAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTerminated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OnlyAcceptedContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"}],\"name\":\"calculateFunds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unallocatedCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.CalculatedFunds\",\"name\":\"funds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.AdditionalFunds\",\"name\":\"_additionalFunds\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"}],\"name\":\"calculateTotalFundsInBaseCurrency\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"plusDepositAmountInAdditionalFundsCcy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minusDepositAmountInAdditionalFundsCcy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.CalculatedTotalFunds\",\"name\":\"funds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_orderId\",\"type\":\"uint48\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanUpAllFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"cleanUpFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalActiveOrderCount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_openingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_preOpeningDate\",\"type\":\"uint256\"}],\"name\":\"createOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"depositAndExecuteOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"depositAndExecutesPreOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_permitS\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitAndExecuteOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_permitS\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitAndExecutePreOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositZCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeEmergencySettlement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeEmergencyTermination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"executeForcedRepayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"executeItayoseCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_collateralCcy\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_debtCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_debtMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"executeLiquidationCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"_side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unitPrice\",\"type\":\"uint256\"}],\"name\":\"executePreOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"executeRedemption\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"executeRepayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCircuitBreakerLimitRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getCurrentMinDebtUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getFutureValueVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getGenesisDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getGenesisValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amountInPV\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amountInFV\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLendingMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketBasePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMaturities\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMinDebtUnitPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getOrderBookId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getOrderBookIds\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum ProtocolTypes.Side\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ignoreBorrowedAmount\",\"type\":\"bool\"}],\"internalType\":\"struct ILendingMarketController.GetOrderEstimationParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"getOrderEstimation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastUnitPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filledAmountInFV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderFeeInFV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"placedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInsufficientDepositAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getOrderFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getPendingOrderAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"presentValue\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"futureValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTerminationCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTerminationCurrencyCache\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct TerminationCurrencyCache\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTerminationDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPresentValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPresentValueInBaseCurrency\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"totalPresentValue\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableZCTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getZCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zcToken\",\"type\":\"address\"}],\"name\":\"getZCTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"internalType\":\"struct ZCTokenInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketBasePeriod\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_genesisDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_circuitBreakerLimitRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDebtUnitPrice\",\"type\":\"uint256\"}],\"name\":\"initializeLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isInitializedLendingMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isRedemptionRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTerminated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"isValidMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"migrateLendingMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"pauseLendingMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"rotateOrderBooks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"unpauseLendingMarket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"unwindPosition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_cbLimitRange\",\"type\":\"uint256\"}],\"name\":\"updateCircuitBreakerLimitRange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minDebtUnitPrice\",\"type\":\"uint256\"}],\"name\":\"updateMinDebtUnitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_orderFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateOrderFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawZCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addOperator(address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"calculateFunds(bytes32,address,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_user\":\"User's address\"},\"returns\":{\"funds\":\"The funds calculated from the user's lending and borrowing order list\"}},\"calculateTotalFundsInBaseCurrency(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256),uint256)\":{\"params\":{\"_additionalFunds\":\"The funds to be added for calculating the total funds\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_user\":\"User's address\"},\"returns\":{\"funds\":\"The total funds calculated from the user's lending and borrowing order list\"}},\"cancelOrder(bytes32,uint256,uint48)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\",\"_orderId\":\"Market order id\"}},\"cleanUpAllFunds(address)\":{\"params\":{\"_user\":\"User's address\"}},\"cleanUpFunds(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"createOrderBook(bytes32,uint256,uint256)\":{\"params\":{\"_ccy\":\"Main currency for new order book\",\"_openingDate\":\"The timestamp when the order book opens\",\"_preOpeningDate\":\"The timestamp when the order book pre-opens\"}},\"depositAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositAndExecutesPreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositWithPermitAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_deadline\":\"The deadline timestamp that the permit is valid\",\"_maturity\":\"The maturity of the selected order book\",\"_permitR\":\"The R parameter of ERC712 permit sig\",\"_permitS\":\"The S parameter of ERC712 permit sig\",\"_permitV\":\"The V parameter of ERC712 permit sig\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositWithPermitAndExecutePreOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_deadline\":\"The deadline timestamp that the permit is valid\",\"_maturity\":\"The maturity of the selected order book\",\"_permitR\":\"The R parameter of ERC712 permit sig\",\"_permitS\":\"The S parameter of ERC712 permit sig\",\"_permitV\":\"The V parameter of ERC712 permit sig\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"depositZCToken(bytes32,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of ZCToken to burn\",\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\"}},\"executeEmergencySettlement()\":{\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executeForcedRepayment(bytes32,bytes32,uint256,address)\":{\"params\":{\"_collateralCcy\":\"Currency name to be used as collateral\",\"_debtCcy\":\"Currency name to be used as debt\",\"_debtMaturity\":\"The order book maturity of the debt\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executeItayoseCall(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the selected order book\"}},\"executeLiquidationCall(bytes32,bytes32,uint256,address)\":{\"params\":{\"_collateralCcy\":\"Currency name to be used as collateral\",\"_debtCcy\":\"Currency name to be used as debt\",\"_debtMaturity\":\"The order book maturity of the debt\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executeOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executePreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds the maker wants to borrow/lend\",\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\",\"_side\":\"Order position type, Borrow or Lend\",\"_unitPrice\":\"Amount of unit price taker wish to borrow/lend\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"executeRedemption(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\"}},\"executeRepayment(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\"}},\"getCircuitBreakerLimitRange(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The auto-roll fee rate received by protocol\"}},\"getCurrentMinDebtUnitPrice(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\"},\"returns\":{\"_0\":\"The current min debt unit price\"}},\"getFutureValueVault(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The future value vault address\"}},\"getGenesisDate(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The genesis date\"}},\"getGenesisValue(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_user\":\"User's address\"},\"returns\":{\"amount\":\"The genesis value amount\",\"amountInFV\":\"The genesis value amount in future value\",\"amountInPV\":\"The genesis value amount in present value\"}},\"getLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending market address\"}},\"getMarketBasePeriod()\":{\"returns\":{\"_0\":\"The base period\"}},\"getMaturities(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"Array with the lending market maturity\"}},\"getMinDebtUnitPrice(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The genesis date\"}},\"getOrderBookId(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\"},\"returns\":{\"_0\":\"The order book id\"}},\"getOrderBookIds(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The array of order book id\"}},\"getOrderEstimation((bytes32,uint256,address,uint8,uint256,uint256,uint256,bool))\":{\"params\":{\"_params\":\"The parameters to calculate the order estimation <br> - ccy: Currency name in bytes32 of the selected market <br> - maturity: The maturity of the market <br> - side: Order position type, Borrow or Lend <br> - amount: Amount of funds the maker wants to borrow/lend <br> - unitPrice: Amount of unit price taker wish to borrow/lend <br> - additionalDepositAmount: Additional amount to be deposited with the lending order <br> - ignoreBorrowedAmount: The boolean if the borrowed amount is ignored and not used as collateral or not\"},\"returns\":{\"coverage\":\"The rate of collateral used\",\"filledAmount\":\"The amount that is filled on the order book\",\"filledAmountInFV\":\"The amount in the future value that is filled on the order book\",\"isInsufficientDepositAmount\":\"The boolean if the order amount for lending in the selected currency is insufficient for the deposit amount or not\",\"lastUnitPrice\":\"The last unit price that is filled on the order book\",\"orderFeeInFV\":\"The order fee amount in the future value\",\"placedAmount\":\"The amount that is placed to the order book\"}},\"getOrderFeeRate(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The order fee rate received by protocol\"}},\"getPendingOrderAmount(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\"},\"returns\":{\"_0\":\"The total amount\"}},\"getPosition(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the selected order book\",\"_user\":\"User's address\"},\"returns\":{\"futureValue\":\"The future value of the position\",\"presentValue\":\"The present value of the position\"}},\"getRevision()\":{\"returns\":{\"_0\":\"The revision number\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTerminationCollateralRatio(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The ratio\"}},\"getTerminationCurrencyCache(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The price cached\"}},\"getTerminationDate()\":{\"returns\":{\"_0\":\"The termination date\"}},\"getTotalPresentValue(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 for Lending Market\",\"_user\":\"User's address\"},\"returns\":{\"totalPresentValue\":\"The total present value\"}},\"getTotalPresentValueInBaseCurrency(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalPresentValue\":\"The total present value in base currency\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The array of the currency\"}},\"getWithdrawableZCTokenAmount(bytes32,uint256,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\",\"_user\":\"User's address\"},\"returns\":{\"amount\":\"The total amount of ZCToken that can be minted\"}},\"getZCToken(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the selected order book\"},\"returns\":{\"_0\":\"The zcToken address\"}},\"getZCTokenInfo(address)\":{\"params\":{\"_zcToken\":\"The zcToken address\"},\"returns\":{\"_0\":\"The zcToken data\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_marketBasePeriod\":\"The base period for market maturity\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_circuitBreakerLimitRange\":\"The circuit breaker limit range\",\"_compoundFactor\":\"The initial compound factor when the initial market is opened\",\"_genesisDate\":\"The genesis date when the initial market is opened\",\"_orderFeeRate\":\"The order fee rate received by protocol\"}},\"isInitializedLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the lending market is initialized or not\"}},\"isRedemptionRequired(address)\":{\"returns\":{\"_0\":\"The boolean if the user needs to redeem the funds\"}},\"isTerminated()\":{\"returns\":{\"_0\":\"The boolean if the protocol has not been terminated\"}},\"isValidMaturity(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\"},\"returns\":{\"_0\":\"The boolean if the maturity is valid\"}},\"migrateLendingMarket(bytes32,uint256)\":{\"details\":\"ZCTokens do not exist in markets that were deployed before the contract upgrade, so they must be configured individually. This function can be deleted after executing for all currencies and maturities.\",\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the ZCToken\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Currency for pausing all lending markets\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"removeOperator(address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.\",\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"rotateOrderBooks(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected order book\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpauseLendingMarket(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds\"}},\"unwindPosition(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32 of the selected order book\",\"_maturity\":\"The maturity of the selected order book\"}},\"updateCircuitBreakerLimitRange(bytes32,uint256)\":{\"params\":{\"_cbLimitRange\":\"The circuit breaker limit range\",\"_ccy\":\"Currency name in bytes32\"}},\"updateMinDebtUnitPrice(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_minDebtUnitPrice\":\"The min debt unit price\"}},\"updateOrderFeeRate(bytes32,uint256)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_orderFeeRate\":\"The order fee rate received by protocol\"}},\"withdrawZCToken(bytes32,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount of ZCToken to mint\",\"_ccy\":\"Currency name in bytes32\",\"_maturity\":\"The maturity of the order book\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(address)\":{\"notice\":\"Adds a new admin as Operator\"},\"calculateFunds(bytes32,address,uint256)\":{\"notice\":\"Gets the funds that are calculated from the user's lending and borrowing order list for the selected currency.\"},\"calculateTotalFundsInBaseCurrency(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256),uint256)\":{\"notice\":\"Gets the funds that are calculated from the user's lending and borrowing order list for all currencies in base currency.\"},\"cancelOrder(bytes32,uint256,uint48)\":{\"notice\":\"Cancels the own order.\"},\"cleanUpAllFunds(address)\":{\"notice\":\"Clean up all funds of the user\"},\"cleanUpFunds(bytes32,address)\":{\"notice\":\"Clean up user funds used for lazy evaluation by the following actions: - Removes order IDs that is already filled on the order book. - Convert Future values that have already been auto-rolled to Genesis values.\"},\"createOrderBook(bytes32,uint256,uint256)\":{\"notice\":\"Creates new order book.\"},\"depositAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Deposits funds and executes an order at the same time.\"},\"depositAndExecutesPreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Deposits funds and executes a pre-order at the same time.\"},\"depositWithPermitAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposits funds with transfer approval of asset via permit function and executes an order at the same time.\"},\"depositWithPermitAndExecutePreOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposits funds with transfer approval of asset via permit function and executes a pre-order at the same time.\"},\"depositZCToken(bytes32,uint256,uint256)\":{\"notice\":\"Deposits ZCToken for the selected currency and maturity. ZC perpetual token can be deposited only when the maturity is 0. This function is not inactivated after the emergency termination to allow users to redeem ZCToken.\"},\"executeEmergencySettlement()\":{\"notice\":\"Force settlement of all lending and borrowing positions. This function is executed under the present value as of the termination date.\"},\"executeEmergencyTermination()\":{\"notice\":\"Executes an emergency termination to stop the protocol. Once this function is executed, the protocol cannot be run again. Also, users will only be able to redeem and withdraw.\"},\"executeForcedRepayment(bytes32,bytes32,uint256,address)\":{\"notice\":\"Execute forced repayment for a borrowing position if repayment date is over.\"},\"executeItayoseCall(bytes32,uint256)\":{\"notice\":\"Executes the Itayose call per selected currency.\"},\"executeLiquidationCall(bytes32,bytes32,uint256,address)\":{\"notice\":\"Liquidates a lending or borrowing position if the user's coverage is hight.\"},\"executeOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Executes an order. Takes orders if the order is matched, and places new order if not match it. In addition, converts the future value to the genesis value if there is future value in past maturity before the execution of order creation.\"},\"executePreOrder(bytes32,uint256,uint8,uint256,uint256)\":{\"notice\":\"Executes a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the order book opens (Pre-order period). At the end of this period, Itayose will be executed.\"},\"executeRedemption(bytes32,uint256)\":{\"notice\":\"Redeem user's lending positions. Redemption can only be executed once the order book has matured after the currency has been delisted.\"},\"executeRepayment(bytes32,uint256)\":{\"notice\":\"Repay user's borrowing positions. Repayment can only be executed once the order book has matured after the currency has been delisted.\"},\"getCircuitBreakerLimitRange(bytes32)\":{\"notice\":\"Gets the limit range in unit price for the circuit breaker\"},\"getCurrentMinDebtUnitPrice(bytes32,uint256)\":{\"notice\":\"Gets the current min debt unit price. This price fluctuates depending on the current maturity.\"},\"getFutureValueVault(bytes32)\":{\"notice\":\"Gets the future value contract address for the selected currency and maturity.\"},\"getGenesisDate(bytes32)\":{\"notice\":\"Gets the genesis date when the first market opens for the selected currency.\"},\"getGenesisValue(bytes32,address)\":{\"notice\":\"Gets the genesis value of the account.\"},\"getLendingMarket(bytes32)\":{\"notice\":\"Gets the lending market contract address for the selected currency.\"},\"getMarketBasePeriod()\":{\"notice\":\"Gets the base period for market maturity\"},\"getMaturities(bytes32)\":{\"notice\":\"Gets maturities for the selected currency.\"},\"getMinDebtUnitPrice(bytes32)\":{\"notice\":\"Gets the min debt unit price for the selected currency. This price is based on a one-year maturity.\"},\"getOrderBookId(bytes32,uint256)\":{\"notice\":\"Gets the order book id for the selected currency and maturity.\"},\"getOrderBookIds(bytes32)\":{\"notice\":\"Gets the order book ids.\"},\"getOrderEstimation((bytes32,uint256,address,uint8,uint256,uint256,uint256,bool))\":{\"notice\":\"Gets the estimated order result by the calculation of the amount to be filled when executing an order in the order books.\"},\"getOrderFeeRate(bytes32)\":{\"notice\":\"Gets the order fee rate\"},\"getPendingOrderAmount(bytes32,uint256)\":{\"notice\":\"Gets the total amount of pending orders that is not cleaned up yet.\"},\"getPosition(bytes32,uint256,address)\":{\"notice\":\"Gets user's active position from the future value vault\"},\"getRevision()\":{\"notice\":\"Gets the revision number of the contract\"},\"getTerminationCollateralRatio(bytes32)\":{\"notice\":\"Gets the collateral ratio of each token in TokenVault at the emergency termination.\"},\"getTerminationCurrencyCache(bytes32)\":{\"notice\":\"Gets the currency information cached at the emergency termination.\"},\"getTerminationDate()\":{\"notice\":\"Gets the date at the emergency termination.\"},\"getTotalPresentValue(bytes32,address)\":{\"notice\":\"Gets the total present value of the account for selected currency.\"},\"getTotalPresentValueInBaseCurrency(address)\":{\"notice\":\"Gets the total present value of the account converted to base currency.\"},\"getUsedCurrencies(address)\":{\"notice\":\"Get all the currencies in which the user has lending positions or orders.\"},\"getWithdrawableZCTokenAmount(bytes32,uint256,address)\":{\"notice\":\"Gets the withdrawable ZCToken amount for the selected currency and maturity. ZC perpetual token amount is returned only when the maturity is 0.\"},\"getZCToken(bytes32,uint256)\":{\"notice\":\"Gets ZC Token address for the selected currency and maturity.\"},\"getZCTokenInfo(address)\":{\"notice\":\"Gets ZC Token info for the selected ZC Token address.\"},\"initialize(address,address,uint256)\":{\"notice\":\"Initializes the contract.\"},\"initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize the lending market to set a genesis date and compound factor\"},\"isInitializedLendingMarket(bytes32)\":{\"notice\":\"Gets if the lending market is initialized.\"},\"isRedemptionRequired(address)\":{\"notice\":\"Gets if the user needs to redeem the funds.\"},\"isTerminated()\":{\"notice\":\"Gets if the protocol has not been terminated.\"},\"isValidMaturity(bytes32,uint256)\":{\"notice\":\"Gets if the maturity is valid.\"},\"migrateLendingMarket(bytes32,uint256)\":{\"notice\":\"Migrate the lending market to the new version.\"},\"pauseLendingMarket(bytes32)\":{\"notice\":\"Pauses the lending market by currency\"},\"removeOperator(address)\":{\"notice\":\"Removes an admin as Operator\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"rotateOrderBooks(bytes32)\":{\"notice\":\"Rotates the order books. In this rotation, the following actions are happened. - Updates the maturity at the beginning of the order book array. - Moves the beginning of the order book array to the end of it (Market rotation). - Update the compound factor in this contract using the next order book unit price. (Auto-rolls) - Clean up the reserve fund contract\"},\"unpauseLendingMarket(bytes32)\":{\"notice\":\"Unpauses the lending market by currency\"},\"unwindPosition(bytes32,uint256)\":{\"notice\":\"Unwinds user's lending or borrowing positions by creating an opposite position order.\"},\"updateCircuitBreakerLimitRange(bytes32,uint256)\":{\"notice\":\"Updates the auto-roll fee rate\"},\"updateMinDebtUnitPrice(bytes32,uint256)\":{\"notice\":\"Updates the min debt unit price for the selected currency.\"},\"updateOrderFeeRate(bytes32,uint256)\":{\"notice\":\"Updates the order fee rate\"},\"withdrawZCToken(bytes32,uint256,uint256)\":{\"notice\":\"Withdraws ZCToken for the selected currency and maturity. ZC perpetual token can be withdrawn only when the maturity is 0.\"}},\"notice\":\"Implements the module to manage separated lending market contracts per currency. This contract also works as a factory contract that can deploy\\u00a0(start)\\u00a0a new lending market & order book for selected currency and maturity and has the calculation logic for the following user's funds in addition. - Present Value(PV) - Future Value(FV) - Genesis Value(GV) Once the order book is created, it will be rotated and reused once it reaches its maturity date. At the time of rotation, a new maturity date is set and the compound factor is updated. The users mainly call this contract to execute orders to lend or borrow funds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/LendingMarketController.sol\":\"LendingMarketController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xbc9ec150e13091594dfd8b1cd6016c962f3b1c681072f3c3fa989fdfa587d42f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xb13e7a56a0af42137a3e04dccb39c6bd4233d5e5c324197af9d71c3f7af5359c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44e8974f420f05be7bf27220ef8e694d803a281eb0824a2c0d8960d864780bdf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa76bf4fcc900c3a9ddff36dc639af871c463d9e0f69320d33cd916ab3f8efec\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/protocol/LendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {ReentrancyGuard} from \\\"../dependencies/openzeppelin/security/ReentrancyGuard.sol\\\";\\nimport {EnumerableSet} from \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport {Multicall} from \\\"../dependencies/openzeppelin/utils/Multicall.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"./interfaces/ILendingMarketController.sol\\\";\\nimport {ILendingMarket} from \\\"./interfaces/ILendingMarket.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {FilledOrder, PartiallyFilledOrder} from \\\"./libraries/OrderBookLib.sol\\\";\\nimport {FundManagementLogic} from \\\"./libraries/logics/FundManagementLogic.sol\\\";\\nimport {LendingMarketOperationLogic} from \\\"./libraries/logics/LendingMarketOperationLogic.sol\\\";\\nimport {LendingMarketUserLogic} from \\\"./libraries/logics/LendingMarketUserLogic.sol\\\";\\nimport {LiquidationLogic} from \\\"./libraries/logics/LiquidationLogic.sol\\\";\\n// mixins\\nimport {MixinAccessControl} from \\\"./mixins/MixinAccessControl.sol\\\";\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinLendingMarketConfiguration} from \\\"./mixins/MixinLendingMarketConfiguration.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\nimport {LockAndMsgSender} from \\\"./utils/LockAndMsgSender.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage, ZCTokenInfo, TerminationCurrencyCache} from \\\"./storages/LendingMarketControllerStorage.sol\\\";\\n\\n/**\\n * @notice Implements the module to manage separated lending market contracts per currency.\\n *\\n * This contract also works as a factory contract that can deploy\\u00a0(start)\\u00a0a new lending market & order book\\n * for selected currency and maturity and has the calculation logic for the following user's funds in addition.\\n * - Present Value(PV)\\n * - Future Value(FV)\\n * - Genesis Value(GV)\\n *\\n * Once the order book is created, it will be rotated and reused once it reaches its maturity date. At the time of rotation,\\n * a new maturity date is set and the compound factor is updated.\\n *\\n * The users mainly call this contract to execute orders to lend or borrow funds.\\n */\\ncontract LendingMarketController is\\n    ILendingMarketController,\\n    MixinLendingMarketConfiguration,\\n    MixinAccessControl,\\n    MixinAddressResolver,\\n    ReentrancyGuard,\\n    Proxyable,\\n    LockAndMsgSender,\\n    Multicall\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if there is an order book in the maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     */\\n    modifier ifValidMaturity(bytes32 _ccy, uint256 _maturity) {\\n        if (isValidMaturity(_ccy, _maturity)) revert InvalidMaturity();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the protocol is active.\\n     */\\n    modifier ifActive() {\\n        if (isTerminated()) revert MarketTerminated();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the protocol is inactive.\\n     */\\n    modifier ifInactive() {\\n        if (!isTerminated()) revert NotTerminated();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _marketBasePeriod The base period for market maturity\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _marketBasePeriod\\n    ) public initializer onlyProxy {\\n        Storage.slot().marketBasePeriod = _marketBasePeriod;\\n        MixinLendingMarketConfiguration._initialize(_owner);\\n        MixinAccessControl._setupInitialRoles(_owner);\\n        registerAddressResolver(_resolver);\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](5);\\n        contracts[0] = Contracts.BEACON_PROXY_CONTROLLER;\\n        contracts[1] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[2] = Contracts.GENESIS_VALUE_VAULT;\\n        contracts[3] = Contracts.RESERVE_FUND;\\n        contracts[4] = Contracts.TOKEN_VAULT;\\n    }\\n\\n    /**\\n     * @notice Gets if the maturity is valid.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @return The boolean if the maturity is valid\\n     */\\n    function isValidMaturity(bytes32 _ccy, uint256 _maturity) public view override returns (bool) {\\n        return Storage.slot().maturityOrderBookIds[_ccy][_maturity] == 0;\\n    }\\n\\n    /**\\n     * @notice Gets if the protocol has not been terminated.\\n     * @return The boolean if the protocol has not been terminated\\n     */\\n    function isTerminated() public view override returns (bool) {\\n        return Storage.slot().terminationDate > 0;\\n    }\\n\\n    /**\\n     * @notice Gets if the user needs to redeem the funds.\\n     * @return The boolean if the user needs to redeem the funds\\n     */\\n    function isRedemptionRequired(address _user) external view override returns (bool) {\\n        return isTerminated() && !Storage.slot().isRedeemed[_user];\\n    }\\n\\n    // @inheritdoc Proxyable\\n    function getRevision() external pure override returns (uint256) {\\n        return 0x2;\\n    }\\n\\n    /**\\n     * @notice Gets the base period for market maturity\\n     * @return The base period\\n     */\\n    function getMarketBasePeriod() external view override returns (uint256) {\\n        return Storage.slot().marketBasePeriod;\\n    }\\n\\n    /**\\n     * @notice Gets the date at the emergency termination.\\n     * @return The termination date\\n     */\\n    function getTerminationDate() external view override returns (uint256) {\\n        return Storage.slot().terminationDate;\\n    }\\n\\n    /**\\n     * @notice Gets the currency information cached at the emergency termination.\\n     * @param _ccy Currency name in bytes32\\n     * @return The price cached\\n     */\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view override returns (TerminationCurrencyCache memory) {\\n        return Storage.slot().terminationCurrencyCaches[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the collateral ratio of each token in TokenVault at the emergency termination.\\n     * @param _ccy Currency name in bytes32\\n     * @return The ratio\\n     */\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().terminationCollateralRatios[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the min debt unit price for the selected currency.\\n     * This price is based on a one-year maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @return The genesis date\\n     */\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().minDebtUnitPrices[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the current min debt unit price.\\n     * This price fluctuates depending on the current maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @return The current min debt unit price\\n     */\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view override returns (uint256) {\\n        return\\n            FundManagementLogic.getCurrentMinDebtUnitPrice(\\n                _maturity,\\n                Storage.slot().minDebtUnitPrices[_ccy]\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the genesis date when the first market opens for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return The genesis date\\n     */\\n    function getGenesisDate(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().genesisDates[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the lending market contract address for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending market address\\n     */\\n    function getLendingMarket(bytes32 _ccy) external view override returns (address) {\\n        return Storage.slot().lendingMarkets[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the order book id for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @return The order book id\\n     */\\n    function getOrderBookId(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view override returns (uint8) {\\n        return Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the future value contract address for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @return The future value vault address\\n     */\\n    function getFutureValueVault(bytes32 _ccy) public view override returns (address) {\\n        return Storage.slot().futureValueVaults[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of pending orders that is not cleaned up yet.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @return The total amount\\n     */\\n    function getPendingOrderAmount(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view override returns (uint256) {\\n        return Storage.slot().pendingOrderAmounts[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the estimated order result by the calculation of the amount to be filled when executing an order in the order books.\\n     * @param _params The parameters to calculate the order estimation <br>\\n     * - ccy: Currency name in bytes32 of the selected market <br>\\n     * - maturity: The maturity of the market <br>\\n     * - side: Order position type, Borrow or Lend <br>\\n     * - amount: Amount of funds the maker wants to borrow/lend <br>\\n     * - unitPrice: Amount of unit price taker wish to borrow/lend <br>\\n     * - additionalDepositAmount: Additional amount to be deposited with the lending order <br>\\n     * - ignoreBorrowedAmount: The boolean if the borrowed amount is ignored and not used as collateral or not\\n     * @return lastUnitPrice The last unit price that is filled on the order book\\n     * @return filledAmount The amount that is filled on the order book\\n     * @return filledAmountInFV The amount in the future value that is filled on the order book\\n     * @return orderFeeInFV The order fee amount in the future value\\n     * @return placedAmount The amount that is placed to the order book\\n     * @return coverage The rate of collateral used\\n     * @return isInsufficientDepositAmount The boolean if the order amount for lending in the selected currency is insufficient\\n     * for the deposit amount or not\\n     */\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata _params\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        )\\n    {\\n        return LendingMarketUserLogic.getOrderEstimation(_params);\\n    }\\n\\n    /**\\n     * @notice Gets maturities for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @return Array with the lending market maturity\\n     */\\n    function getMaturities(bytes32 _ccy) public view override returns (uint256[] memory) {\\n        return\\n            ILendingMarket(Storage.slot().lendingMarkets[_ccy]).getMaturities(\\n                Storage.slot().orderBookIdLists[_ccy]\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the order book ids.\\n     * @param _ccy Currency name in bytes32\\n     * @return The array of order book id\\n     */\\n    function getOrderBookIds(bytes32 _ccy) external view override returns (uint8[] memory) {\\n        return Storage.slot().orderBookIdLists[_ccy];\\n    }\\n\\n    /**\\n     * @notice Get all the currencies in which the user has lending positions or orders.\\n     * @param _user User's address\\n     * @return The array of the currency\\n     */\\n    function getUsedCurrencies(address _user) external view override returns (bytes32[] memory) {\\n        return Storage.slot().usedCurrencies[_user].values();\\n    }\\n\\n    /**\\n     * @notice Gets the total present value of the account for selected currency.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _user User's address\\n     * @return totalPresentValue The total present value\\n     */\\n    function getTotalPresentValue(\\n        bytes32 _ccy,\\n        address _user\\n    ) external view override returns (int256 totalPresentValue) {\\n        totalPresentValue = FundManagementLogic.getActualFunds(_ccy, 0, _user, 0).presentValue;\\n    }\\n\\n    /**\\n     * @notice Gets the total present value of the account converted to base currency.\\n     * @param _user User's address\\n     * @return totalPresentValue The total present value in base currency\\n     */\\n    function getTotalPresentValueInBaseCurrency(\\n        address _user\\n    ) external view override returns (int256 totalPresentValue) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n\\n        for (uint256 i; i < currencySet.length(); i++) {\\n            bytes32 ccy = currencySet.at(i);\\n            int256 amount = FundManagementLogic.getActualFunds(ccy, 0, _user, 0).presentValue;\\n            totalPresentValue += currencyController().convertToBaseCurrency(ccy, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the genesis value of the account.\\n     * @param _ccy Currency name in bytes32 for Lending Market\\n     * @param _user User's address\\n     * @return amount The genesis value amount\\n     * @return amountInPV The genesis value amount in present value\\n     * @return amountInFV The genesis value amount in future value\\n     */\\n    function getGenesisValue(\\n        bytes32 _ccy,\\n        address _user\\n    ) external view override returns (int256 amount, int256 amountInPV, int256 amountInFV) {\\n        return FundManagementLogic.getGenesisValue(_ccy, _user);\\n    }\\n\\n    /**\\n     * @notice Gets user's active position from the future value vault\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the selected order book\\n     * @param _user User's address\\n     * @return presentValue The present value of the position\\n     * @return futureValue The future value of the position\\n     */\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view override returns (int256 presentValue, int256 futureValue) {\\n        (presentValue, futureValue) = FundManagementLogic.getPosition(_ccy, _maturity, _user);\\n    }\\n\\n    /**\\n     * @notice Gets ZC Token address for the selected currency and maturity.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the selected order book\\n     * @return The zcToken address\\n     */\\n    function getZCToken(bytes32 _ccy, uint256 _maturity) external view override returns (address) {\\n        return Storage.slot().zcTokens[_ccy][_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets ZC Token info for the selected ZC Token address.\\n     * @param _zcToken The zcToken address\\n     * @return The zcToken data\\n     */\\n    function getZCTokenInfo(address _zcToken) external view override returns (ZCTokenInfo memory) {\\n        return Storage.slot().zcTokenInfo[_zcToken];\\n    }\\n\\n    /**\\n     * @notice Gets the withdrawable ZCToken amount for the selected currency and maturity.\\n     * ZC perpetual token amount is returned only when the maturity is 0.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @param _user User's address\\n     * @return amount The total amount of ZCToken that can be minted\\n     */\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view override returns (uint256 amount) {\\n        return LendingMarketUserLogic.getWithdrawableZCTokenAmount(_ccy, _maturity, _user);\\n    }\\n\\n    /**\\n     * @notice Gets the funds that are calculated from the user's lending and borrowing order list\\n     * for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @return funds The funds calculated from the user's lending and borrowing order list\\n     */\\n    function calculateFunds(\\n        bytes32 _ccy,\\n        address _user,\\n        uint256 _liquidationThresholdRate\\n    ) external view override returns (CalculatedFunds memory funds) {\\n        if (Storage.slot().usedCurrencies[_user].contains(_ccy)) {\\n            AdditionalFunds memory emptyAdditionalFunds;\\n\\n            return\\n                FundManagementLogic.calculateFunds(\\n                    _ccy,\\n                    _user,\\n                    emptyAdditionalFunds,\\n                    _liquidationThresholdRate\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the funds that are calculated from the user's lending and borrowing order list\\n     * for all currencies in base currency.\\n     * @param _user User's address\\n     * @param _additionalFunds The funds to be added for calculating the total funds\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @return funds The total funds calculated from the user's lending and borrowing order list\\n     */\\n    function calculateTotalFundsInBaseCurrency(\\n        address _user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 _liquidationThresholdRate\\n    ) external view override returns (CalculatedTotalFunds memory funds) {\\n        return\\n            FundManagementLogic.calculateTotalFundsInBaseCurrency(\\n                _user,\\n                _additionalFunds,\\n                _liquidationThresholdRate\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets if the lending market is initialized.\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the lending market is initialized or not\\n     */\\n    function isInitializedLendingMarket(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().genesisDates[_ccy] != 0;\\n    }\\n\\n    /**\\n     * @notice Initialize the lending market to set a genesis date and compound factor\\n     * @param _ccy Currency name in bytes32\\n     * @param _genesisDate The genesis date when the initial market is opened\\n     * @param _compoundFactor The initial compound factor when the initial market is opened\\n     * @param _orderFeeRate The order fee rate received by protocol\\n     * @param _circuitBreakerLimitRange The circuit breaker limit range\\n     */\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _compoundFactor,\\n        uint256 _orderFeeRate,\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _minDebtUnitPrice\\n    ) external override onlyOwner {\\n        if (isInitializedLendingMarket(_ccy)) revert AlreadyInitialized();\\n\\n        LendingMarketOperationLogic.initializeLendingMarket(\\n            _ccy,\\n            _genesisDate,\\n            _compoundFactor,\\n            _orderFeeRate,\\n            _circuitBreakerLimitRange,\\n            _minDebtUnitPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates new order book.\\n     * @param _ccy Main currency for new order book\\n     * @param _openingDate The timestamp when the order book opens\\n     * @param _preOpeningDate The timestamp when the order book pre-opens\\n     */\\n    function createOrderBook(\\n        bytes32 _ccy,\\n        uint256 _openingDate,\\n        uint256 _preOpeningDate\\n    ) external override ifActive onlyOwner {\\n        LendingMarketOperationLogic.createOrderBook(_ccy, _openingDate, _preOpeningDate);\\n    }\\n\\n    /**\\n     * @notice Executes an order. Takes orders if the order is matched,\\n     * and places new order if not match it.\\n     *\\n     * In addition, converts the future value to the genesis value if there is future value in past maturity\\n     * before the execution of order creation.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function executeOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        LendingMarketUserLogic.executeOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds and executes an order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositAndExecuteOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        ifValidMaturity(_ccy, _maturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        tokenVault().depositFrom{value: msg.value}(msg.sender, _ccy, _amount);\\n        LendingMarketUserLogic.executeOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds with transfer approval of asset via permit function\\n     * and executes an order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @param _deadline The deadline timestamp that the permit is valid\\n     * @param _permitV The V parameter of ERC712 permit sig\\n     * @param _permitR The R parameter of ERC712 permit sig\\n     * @param _permitS The S parameter of ERC712 permit sig\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositWithPermitAndExecuteOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        tokenVault().depositWithPermitFrom(\\n            msg.sender,\\n            _ccy,\\n            _amount,\\n            _deadline,\\n            _permitV,\\n            _permitR,\\n            _permitS\\n        );\\n\\n        LendingMarketUserLogic.executeOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour\\n     * before the order book opens (Pre-order period). At the end of this period, Itayose will be executed.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function executePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) public override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        LendingMarketUserLogic.executePreOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds and executes a pre-order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositAndExecutesPreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        external\\n        payable\\n        override\\n        nonReentrant\\n        ifValidMaturity(_ccy, _maturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        tokenVault().depositFrom{value: msg.value}(msg.sender, _ccy, _amount);\\n        LendingMarketUserLogic.executePreOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Deposits funds with transfer approval of asset via permit function\\n     * and executes a pre-order at the same time.\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _side Order position type, Borrow or Lend\\n     * @param _amount Amount of funds the maker wants to borrow/lend\\n     * @param _unitPrice Amount of unit price taker wish to borrow/lend\\n     * @param _deadline The deadline timestamp that the permit is valid\\n     * @param _permitV The V parameter of ERC712 permit sig\\n     * @param _permitR The R parameter of ERC712 permit sig\\n     * @param _permitS The S parameter of ERC712 permit sig\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function depositWithPermitAndExecutePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        tokenVault().depositWithPermitFrom(\\n            msg.sender,\\n            _ccy,\\n            _amount,\\n            _deadline,\\n            _permitV,\\n            _permitR,\\n            _permitS\\n        );\\n\\n        LendingMarketUserLogic.executePreOrder(\\n            _ccy,\\n            _maturity,\\n            msg.sender,\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Unwinds user's lending or borrowing positions by creating an opposite position order.\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     */\\n    function unwindPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        LendingMarketUserLogic.unwindPosition(_ccy, _maturity, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Redeem user's lending positions.\\n     * Redemption can only be executed once the order book has matured after the currency has been delisted.\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     */\\n    function executeRedemption(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        FundManagementLogic.executeRedemption(_ccy, _maturity, msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Repay user's borrowing positions.\\n     * Repayment can only be executed once the order book has matured after the currency has been delisted.\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     */\\n    function executeRepayment(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        FundManagementLogic.executeRepayment(_ccy, _maturity, msg.sender, 0);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Force settlement of all lending and borrowing positions.\\n     * This function is executed under the present value as of the termination date.\\n     *\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function executeEmergencySettlement() external override nonReentrant ifInactive returns (bool) {\\n        FundManagementLogic.executeEmergencySettlement(msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes the Itayose call per selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the selected order book\\n     */\\n    function executeItayoseCall(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external override nonReentrant ifActive returns (bool) {\\n        (\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        ) = LendingMarketOperationLogic.executeItayoseCall(_ccy, _maturity);\\n\\n        LendingMarketUserLogic.updateFundsForMaker(\\n            _ccy,\\n            _maturity,\\n            ProtocolTypes.Side.LEND,\\n            partiallyFilledLendingOrder\\n        );\\n        LendingMarketUserLogic.updateFundsForMaker(\\n            _ccy,\\n            _maturity,\\n            ProtocolTypes.Side.BORROW,\\n            partiallyFilledBorrowingOrder\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Cancels the own order.\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     * @param _maturity The maturity of the selected order book\\n     * @param _orderId Market order id\\n     */\\n    function cancelOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint48 _orderId\\n    ) external override nonReentrant ifValidMaturity(_ccy, _maturity) ifActive returns (bool) {\\n        ILendingMarket(Storage.slot().lendingMarkets[_ccy]).cancelOrder(\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n            msg.sender,\\n            _orderId\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Liquidates a lending or borrowing position if the user's coverage is hight.\\n     * @param _collateralCcy Currency name to be used as collateral\\n     * @param _debtCcy Currency name to be used as debt\\n     * @param _debtMaturity The order book maturity of the debt\\n     * @param _user User's address\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function executeLiquidationCall(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    )\\n        external\\n        override\\n        isNotLocked\\n        ifValidMaturity(_debtCcy, _debtMaturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        LiquidationLogic.executeLiquidation(\\n            msg.sender,\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Execute forced repayment for a borrowing position if repayment date is over.\\n     * @param _collateralCcy Currency name to be used as collateral\\n     * @param _debtCcy Currency name to be used as debt\\n     * @param _debtMaturity The order book maturity of the debt\\n     * @param _user User's address\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    )\\n        external\\n        override\\n        isNotLocked\\n        ifValidMaturity(_debtCcy, _debtMaturity)\\n        ifActive\\n        returns (bool)\\n    {\\n        LiquidationLogic.executeForcedRepayment(\\n            msg.sender,\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Rotates the order books. In this rotation, the following actions are happened.\\n     * - Updates the maturity at the beginning of the order book array.\\n     * - Moves the beginning of the order book array to the end of it (Market rotation).\\n     * - Update the compound factor in this contract using the next order book unit price. (Auto-rolls)\\n     * - Clean up the reserve fund contract\\n     *\\n     * @param _ccy Currency name in bytes32 of the selected order book\\n     */\\n    function rotateOrderBooks(bytes32 _ccy) external override nonReentrant ifActive {\\n        LendingMarketOperationLogic.rotateOrderBooks(_ccy);\\n        FundManagementLogic.cleanUpFunds(_ccy, address(reserveFund()));\\n    }\\n\\n    /**\\n     * @notice Executes an emergency termination to stop the protocol. Once this function is executed,\\n     * the protocol cannot be run again. Also, users will only be able to redeem and withdraw.\\n     */\\n    function executeEmergencyTermination() external override ifActive onlyOwner {\\n        LendingMarketOperationLogic.executeEmergencyTermination();\\n    }\\n\\n    /**\\n     * @notice Pauses the lending market by currency\\n     * @param _ccy Currency for pausing all lending markets\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function pauseLendingMarket(\\n        bytes32 _ccy\\n    ) external override ifActive onlyOperator returns (bool) {\\n        LendingMarketOperationLogic.pauseLendingMarket(_ccy);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Unpauses the lending market by currency\\n     * @param _ccy Currency name in bytes32\\n     * @return True if the execution of the operation succeeds\\n     */\\n    function unpauseLendingMarket(\\n        bytes32 _ccy\\n    ) external override ifActive onlyOperator returns (bool) {\\n        LendingMarketOperationLogic.unpauseLendingMarket(_ccy);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Clean up all funds of the user\\n     * @param _user User's address\\n     */\\n    function cleanUpAllFunds(address _user) external override nonReentrant returns (bool) {\\n        FundManagementLogic.cleanUpAllFunds(_user);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Clean up user funds used for lazy evaluation by the following actions:\\n     * - Removes order IDs that is already filled on the order book.\\n     * - Convert Future values that have already been auto-rolled to Genesis values.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     */\\n    function cleanUpFunds(\\n        bytes32 _ccy,\\n        address _user\\n    ) external override nonReentrant returns (uint256 totalActiveOrderCount) {\\n        return FundManagementLogic.cleanUpFunds(_ccy, _user);\\n    }\\n\\n    /**\\n     * @notice Updates the min debt unit price for the selected currency.\\n     * @param _ccy Currency name in bytes32\\n     * @param _minDebtUnitPrice The min debt unit price\\n     */\\n    function updateMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _minDebtUnitPrice\\n    ) external override ifActive onlyOwner {\\n        LendingMarketOperationLogic.updateMinDebtUnitPrice(_ccy, _minDebtUnitPrice);\\n    }\\n\\n    /**\\n     * @notice Withdraws ZCToken for the selected currency and maturity.\\n     * ZC perpetual token can be withdrawn only when the maturity is 0.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @param _amount The amount of ZCToken to mint\\n     */\\n    function withdrawZCToken(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _amount\\n    ) external override nonReentrant ifActive {\\n        if (_maturity != 0 && isValidMaturity(_ccy, _maturity)) revert InvalidMaturity();\\n\\n        LendingMarketUserLogic.withdrawZCToken(_ccy, _maturity, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposits ZCToken for the selected currency and maturity.\\n     * ZC perpetual token can be deposited only when the maturity is 0.\\n     * This function is not inactivated after the emergency termination to allow users to redeem ZCToken.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the order book\\n     * @param _amount The amount of ZCToken to burn\\n     */\\n    function depositZCToken(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        if (_maturity != 0 && isValidMaturity(_ccy, _maturity)) revert InvalidMaturity();\\n\\n        LendingMarketUserLogic.depositZCToken(_ccy, _maturity, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Migrate the lending market to the new version.\\n     * @dev ZCTokens do not exist in markets that were deployed before the contract upgrade,\\n     * so they must be configured individually.\\n     * This function can be deleted after executing for all currencies and maturities.\\n     * @param _ccy Currency name in bytes32\\n     * @param _maturity The maturity of the ZCToken\\n     */\\n    function migrateLendingMarket(bytes32 _ccy, uint256 _maturity) external onlyOwner {\\n        LendingMarketOperationLogic.migrateLendingMarket(_ccy, _maturity);\\n    }\\n}\\n\",\"keccak256\":\"0xed32b56275a30ab13bd90a86a1ea3974531cbec54316266d6c1c9ff4000756f5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function getNames() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x902589cadb08c09a44c5cdbe7ed8ba57a93f7e2700681177ef57c47c40e2e161\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function setZCTokenImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n\\n    function deployZCToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address asset,\\n        uint256 maturity\\n    ) external returns (address futureValueToken);\\n}\\n\",\"keccak256\":\"0xec921fdea2288f812ed78ec9439e53f6bf751a582719618fa8fc8cd88d0b6920\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidDecimals(address priceFeed, uint8 decimals);\\n    error InvalidPriceFeedInputs();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) external view returns (int256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256 price);\\n\\n    function getAggregatedLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x2d1e477a53ca03307d2f2ec206028963e99ff4dcf1e719e3b59845f6acb3ee93\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IFutureValueVault {\\n    error UserIsZero();\\n    error PastMaturityBalanceExists(address user);\\n    error TotalSupplyNotZero();\\n    error InvalidResetAmount();\\n    error InsufficientBalance();\\n    error InsufficientLockedBalance();\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint8 orderBookId,\\n        uint256 maturity,\\n        int256 value\\n    );\\n    event BalanceLocked(\\n        uint8 indexed orderBookId,\\n        uint256 indexed maturity,\\n        address indexed user,\\n        uint256 value\\n    );\\n    event BalanceUnlocked(\\n        uint8 indexed orderBookId,\\n        uint256 indexed maturity,\\n        address indexed user,\\n        uint256 value\\n    );\\n\\n    function getTotalLendingSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getBalance(\\n        uint8 orderBookId,\\n        address user\\n    ) external view returns (int256 futureValue, uint256 maturity);\\n\\n    function getTotalLockedBalance(uint8 orderBookId) external view returns (uint256);\\n\\n    function hasBalanceAtPastMaturity(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (bool);\\n\\n    function increase(uint8 orderBookId, address user, uint256 amount, uint256 maturity) external;\\n\\n    function decrease(uint8 orderBookId, address user, uint256 amount, uint256 maturity) external;\\n\\n    function lock(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 amount,\\n        uint256 maturity\\n    ) external returns (uint256 lockedAmount);\\n\\n    function unlock(uint8 orderBookId, address user, uint256 amount, uint256 maturity) external;\\n\\n    function transferFrom(\\n        uint8 orderBookId,\\n        address sender,\\n        address receiver,\\n        int256 amount,\\n        uint256 maturity\\n    ) external;\\n\\n    function reset(\\n        uint8 orderBookId,\\n        address user\\n    )\\n        external\\n        returns (int256 removedAmount, int256 currentAmount, uint256 maturity, bool isAllRemoved);\\n\\n    function executeForcedReset(uint8 orderBookId, address user) external;\\n\\n    function executeForcedReset(\\n        uint8 orderBookId,\\n        address user,\\n        int256 amount\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0xe275e6a1c9914aaacebc863217725268360b1ff0c69d675461902f039933c854\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n    error InsufficientBalance();\\n    error InsufficientLockedBalance();\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n    event BalanceLocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n    event BalanceUnlocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n\\n    function isAutoRolled(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(\\n        bytes32 ccy,\\n        uint256 maturity\\n    ) external view returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function getTotalLockedBalance(bytes32 ccy) external view returns (uint256);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function updateDecimals(bytes32 _ccy, uint8 _decimals) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function lock(\\n        bytes32 ccy,\\n        address user,\\n        uint256 amount\\n    ) external returns (uint256 lockedAmount);\\n\\n    function unlock(bytes32 ccy, address user, uint256 amount) external;\\n\\n    function transferFrom(bytes32 ccy, address sender, address receiver, int256 amount) external;\\n\\n    function cleanUpBalance(bytes32 ccy, address user, uint256 maturity) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0x855588bd02fea39db9288300b2bad88c1c3269d39df73691245b611cc91852ce\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarket.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../types/ProtocolTypes.sol\\\";\\nimport {ItayoseLog} from \\\"../storages/LendingMarketStorage.sol\\\";\\nimport {OrderBookLib, FilledOrder, PartiallyFilledOrder} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\ninterface ILendingMarket {\\n    error NoOrderExists();\\n    error CallerNotMaker();\\n    error MarketNotOpened();\\n    error AlreadyItayosePeriod();\\n    error NotItayosePeriod();\\n    error NotPreOrderPeriod();\\n\\n    function getOrderBookDetail(\\n        uint8 orderBookId\\n    )\\n        external\\n        view\\n        returns (bytes32 ccy, uint256 maturity, uint256 openingDate, uint256 preOpeningDate);\\n\\n    function getCircuitBreakerThresholds(\\n        uint8 orderBookId\\n    )\\n        external\\n        view\\n        returns (uint256 lendCircuitBreakerThreshold, uint256 borrowCircuitBreakerThreshold);\\n\\n    function getBestLendUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestLendUnitPrices(\\n        uint8[] calldata orderBookIds\\n    ) external view returns (uint256[] memory);\\n\\n    function getBestBorrowUnitPrice(uint8 orderBookId) external view returns (uint256 unitPrice);\\n\\n    function getBestBorrowUnitPrices(\\n        uint8[] calldata orderBookIds\\n    ) external view returns (uint256[] memory);\\n\\n    function getMarketUnitPrice(uint8 orderBookId) external view returns (uint256);\\n\\n    function getLastOrderTimestamp(uint8 orderBookId) external view returns (uint48);\\n\\n    function getBlockUnitPriceHistory(\\n        uint8 orderBookId\\n    ) external view returns (uint256[] memory unitPrices, uint48 timestamp);\\n\\n    function getBlockUnitPriceAverage(\\n        uint8 orderBookId,\\n        uint256 count\\n    ) external view returns (uint256);\\n\\n    function getBorrowOrderBook(\\n        uint8 orderBookId,\\n        uint256 start,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities,\\n            uint256 next\\n        );\\n\\n    function getLendOrderBook(\\n        uint8 orderBookId,\\n        uint256 start,\\n        uint256 limit\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities,\\n            uint256 next\\n        );\\n\\n    function getItayoseEstimation(\\n        uint8 orderBookId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        );\\n\\n    function getMaturity(uint8 orderBookId) external view returns (uint256);\\n\\n    function getMaturities(\\n        uint8[] calldata orderBookIds\\n    ) external view returns (uint256[] memory maturities);\\n\\n    function getCurrency() external view returns (bytes32);\\n\\n    function getOrderFeeRate() external view returns (uint256);\\n\\n    function getCircuitBreakerLimitRange() external view returns (uint256);\\n\\n    function getOpeningDate(uint8 orderBookId) external view returns (uint256);\\n\\n    function isReady(uint8 orderBookId) external view returns (bool);\\n\\n    function isMatured(uint8 orderBookId) external view returns (bool);\\n\\n    function isOpened(uint8 orderBookId) external view returns (bool);\\n\\n    function isItayosePeriod(uint8 orderBookId) external view returns (bool);\\n\\n    function isPreOrderPeriod(uint8 orderBookId) external returns (bool);\\n\\n    function getItayoseLog(uint256 maturity) external view returns (ItayoseLog memory);\\n\\n    function getOrder(\\n        uint8 orderBookId,\\n        uint48 orderId\\n    )\\n        external\\n        view\\n        returns (\\n            ProtocolTypes.Side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            address maker,\\n            uint256 amount,\\n            uint256 timestamp,\\n            bool isPreOrder\\n        );\\n\\n    function getTotalAmountFromLendOrders(\\n        uint8 orderBookId,\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getTotalAmountFromBorrowOrders(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 _minUnitPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 activeAmount,\\n            uint256 inactiveAmount,\\n            uint256 inactiveFutureValue,\\n            uint256 maturity\\n        );\\n\\n    function getLendOrderIds(\\n        uint8 orderBookId,\\n        address user\\n    ) external view returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function getBorrowOrderIds(\\n        uint8 orderBookId,\\n        address user\\n    ) external view returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds);\\n\\n    function calculateFilledAmount(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 feeInFV,\\n            uint256 placedAmount\\n        );\\n\\n    function createOrderBook(\\n        uint256 maturity,\\n        uint256 openingDate,\\n        uint256 preOpeningDate\\n    ) external returns (uint8 orderBookId);\\n\\n    function executeAutoRoll(\\n        uint8 maturedOrderBookId,\\n        uint8 newNearestOrderBookId,\\n        uint256 autoRollUnitPrice\\n    ) external;\\n\\n    function cancelOrder(uint8 orderBookId, address user, uint48 orderId) external;\\n\\n    function executeOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address account,\\n        uint256 amount,\\n        uint256 unitPrice\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        );\\n\\n    function executePreOrder(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external;\\n\\n    function unwindPosition(\\n        uint8 orderBookId,\\n        ProtocolTypes.Side side,\\n        address user,\\n        uint256 futureValue\\n    )\\n        external\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        );\\n\\n    function executeItayoseCall(\\n        uint8 orderBookId\\n    )\\n        external\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 totalOffsetAmount,\\n            uint256 openingDate,\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        );\\n\\n    function cleanUpOrders(\\n        uint8 orderBookId,\\n        address user\\n    )\\n        external\\n        returns (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 maturity\\n        );\\n\\n    function updateOrderFeeRate(uint256 orderFeeRate) external;\\n\\n    function updateCircuitBreakerLimitRange(uint256 limitRange) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x432be1b53206d65f1cfa36131ef72d095b6bda8313b906ad792397351c128fba\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ZCTokenInfo, TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error MarketTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 unallocatedCollateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isValidMaturity(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(\\n        bytes32 ccy,\\n        address user\\n    ) external view returns (int256 amount, int256 amountInPV, int256 amountInFV);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getZCToken(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getZCTokenInfo(address zcToken) external view returns (ZCTokenInfo memory);\\n\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecutePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n\\n    function withdrawZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n\\n    function depositZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x9463424c1df184681606f105eefb17eea71e17cecf0f93e3fd29fb91def06cd5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILiquidationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface ILiquidationReceiver {\\n    error InvalidOperationExecution();\\n\\n    event OperationExecuteForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    );\\n    event OperationExecuteForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    );\\n\\n    function executeOperationForCollateral(\\n        address liquidator,\\n        address user,\\n        bytes32 ccy,\\n        uint256 receivedAmount\\n    ) external returns (bool);\\n\\n    function executeOperationForDebt(\\n        address liquidator,\\n        address user,\\n        bytes32 collateralCcy,\\n        uint256 receivedCollateralAmount,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        uint256 receivedDebtAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x182c08b2fa683f981fd1a5e77b720670d3c1766c24bac51bfee3c9d7e925603c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf201bba61d7527343057038ab254ba2e9b70e355ccfb71143f96068727bece48\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount, address caller);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy\\n    ) external view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralDetail(\\n        address user\\n    )\\n        external\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositTo(bytes32 ccy, uint256 amount, address onBehalfOf) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositWithPermitTo(\\n        bytes32 ccy,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function depositWithPermitFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function cleanUpUsedCurrencies(address user, bytes32 ccy) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function getLiquidationThresholdRate() external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x0d46845175ea03d23c7c2b614483e8c8d26f54f817666ee5e40136737dea490d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IZCToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IERC20} from \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IZCToken is IERC20 {\\n    function asset() external view returns (address);\\n\\n    function maturity() external view returns (uint256);\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd8b314734fe6be1b161bea84f9737ecdbca31b9575acd58b1c773bd8c0581a34\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x5cfce5841b4784484d127b5292c3ca0caa167257522e358570d5955656b7a71f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(\\n        uint256 _days\\n    ) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(\\n        uint256 timestamp\\n    ) internal pure returns (uint256 year, uint256 month, uint256 day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(\\n        uint256 timestamp\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp) internal pure returns (bool leapYear) {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp) internal pure returns (uint256 daysInMonth) {\\n        (uint256 year, uint256 month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(\\n        uint256 year,\\n        uint256 month\\n    ) internal pure returns (uint256 daysInMonth) {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp) internal pure returns (uint256 dayOfWeek) {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp) internal pure returns (uint256 minute) {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp) internal pure returns (uint256 second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(\\n        uint256 timestamp,\\n        uint256 _years\\n    ) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(\\n        uint256 timestamp,\\n        uint256 _months\\n    ) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(\\n        uint256 timestamp,\\n        uint256 _days\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(\\n        uint256 timestamp,\\n        uint256 _hours\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(\\n        uint256 timestamp,\\n        uint256 _minutes\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(\\n        uint256 timestamp,\\n        uint256 _seconds\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(\\n        uint256 timestamp,\\n        uint256 _years\\n    ) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(\\n        uint256 timestamp,\\n        uint256 _months\\n    ) internal pure returns (uint256 newTimestamp) {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(\\n        uint256 timestamp,\\n        uint256 _days\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(\\n        uint256 timestamp,\\n        uint256 _hours\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(\\n        uint256 timestamp,\\n        uint256 _minutes\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(\\n        uint256 timestamp,\\n        uint256 _seconds\\n    ) internal pure returns (uint256 newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (uint256 _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (uint256 _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (uint256 _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (uint256 _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (uint256 _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(\\n        uint256 fromTimestamp,\\n        uint256 toTimestamp\\n    ) internal pure returns (uint256 _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xc5513fad26720911c3927b38b65424f372bfc185b72a026f57d2e0955545281a\",\"license\":\"MIT\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x21443c5b15f48894fc2ab2f1ea266a01d59e7808f50c569bf5556f6bb298f5d6\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n    bytes32 internal constant ZC_TOKEN = \\\"ZCToken\\\";\\n}\\n\",\"keccak256\":\"0x0e5ed5826808f2caca98c73eb744d0c5774392b9451cf468652938721d210d7c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/OrderBookLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderStatisticsTreeLib, PartiallyRemovedOrder} from \\\"./OrderStatisticsTreeLib.sol\\\";\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct PlacedOrder {\\n    ProtocolTypes.Side side;\\n    uint256 unitPrice;\\n    uint256 maturity;\\n    uint256 timestamp;\\n}\\n\\nstruct FilledOrder {\\n    uint256 amount;\\n    uint256 unitPrice;\\n    uint256 futureValue;\\n    uint256 ignoredAmount;\\n}\\n\\nstruct PartiallyFilledOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\nlibrary OrderBookLib {\\n    using OrderStatisticsTreeLib for OrderStatisticsTreeLib.Tree;\\n    using RoundingUint256 for uint256;\\n\\n    uint256 public constant PRE_ORDER_BASE_PERIOD = 7 days;\\n    uint256 public constant ITAYOSE_PERIOD = 1 hours;\\n    uint256 public constant CIRCUIT_BREAKER_MINIMUM_LEND_RANGE = 700;\\n    uint256 public constant CIRCUIT_BREAKER_MINIMUM_BORROW_RANGE = 200;\\n\\n    error EmptyOrderBook();\\n    error PastMaturityOrderExists();\\n\\n    struct OrderBook {\\n        uint256 maturity;\\n        uint256 openingDate;\\n        uint256 preOpeningDate;\\n        uint48 lastOrderId;\\n        uint48 lastOrderTimestamp;\\n        bool isReliableBlock;\\n        // Micro slots for block unit price history\\n        uint80 blockUnitPriceHistory;\\n        uint48 lastBlockUnitPriceTimestamp;\\n        uint256 blockTotalAmount;\\n        uint256 blockTotalFutureValue;\\n        mapping(address user => uint48[] orderIds) activeLendOrderIds;\\n        mapping(address user => uint48[] orderIds) activeBorrowOrderIds;\\n        // Maturity when user last executes order\\n        mapping(address user => uint256 maturity) userCurrentMaturities;\\n        // Micro slots for order\\n        mapping(uint48 orderId => uint256 slots) orders;\\n        mapping(uint48 orderId => bool isPreOrder) isPreOrder;\\n        mapping(uint256 maturity => OrderStatisticsTreeLib.Tree orders) lendOrders;\\n        mapping(uint256 maturity => OrderStatisticsTreeLib.Tree orders) borrowOrders;\\n    }\\n\\n    function initialize(\\n        OrderBook storage self,\\n        uint256 _maturity,\\n        uint256 _openingDate,\\n        uint256 _preOpeningDate\\n    ) internal returns (bool isReady) {\\n        self.maturity = _maturity;\\n        self.openingDate = _openingDate;\\n        self.preOpeningDate = _preOpeningDate;\\n\\n        self.blockTotalAmount = 0;\\n        self.blockTotalFutureValue = 0;\\n        self.blockUnitPriceHistory = 0;\\n        self.lastOrderTimestamp = 0;\\n        self.lastBlockUnitPriceTimestamp = 0;\\n        self.isReliableBlock = false;\\n\\n        if (block.timestamp >= (_openingDate - ITAYOSE_PERIOD)) {\\n            isReady = true;\\n        }\\n    }\\n\\n    function isMatured(OrderBook storage self) internal view returns (bool) {\\n        return block.timestamp >= self.maturity;\\n    }\\n\\n    function getBestBorrowUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        return self.lendOrders[self.maturity].last();\\n    }\\n\\n    function getBestLendUnitPrice(OrderBook storage self) internal view returns (uint256) {\\n        uint256 unitPrice = self.borrowOrders[self.maturity].first();\\n        return unitPrice == 0 ? Constants.PRICE_DIGIT : unitPrice;\\n    }\\n\\n    function hasBorrowOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeBorrowOrderIds[_user].length != 0;\\n    }\\n\\n    function hasLendOrder(OrderBook storage self, address _user) internal view returns (bool) {\\n        return self.activeLendOrderIds[_user].length != 0;\\n    }\\n\\n    function getOrder(\\n        OrderBook storage self,\\n        uint48 _orderId\\n    ) internal view returns (PlacedOrder memory order) {\\n        (\\n            ProtocolTypes.Side side,\\n            uint256 unitPrice,\\n            uint256 maturity,\\n            uint256 timestamp\\n        ) = _unpackOrder(self.orders[_orderId]);\\n        order = PlacedOrder(side, unitPrice, maturity, timestamp);\\n    }\\n\\n    function getBlockUnitPriceHistory(\\n        OrderBook storage self,\\n        bool _isReadOnly\\n    ) internal view returns (uint256[] memory prices, uint48 timestamp) {\\n        prices = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory);\\n\\n        // NOTE: If an order is in the first block of the order book, the block unit price history is empty.\\n        // In this case, the first history record is calculated from the current block total amount and total future value\\n        // along with the `getMarketUnitPrice` function logic.\\n        if (\\n            (self.lastOrderTimestamp != block.timestamp || prices[0] == 0 || _isReadOnly) &&\\n            self.isReliableBlock\\n        ) {\\n            for (uint256 i = prices.length - 1; i > 0; i--) {\\n                prices[i] = prices[i - 1];\\n            }\\n\\n            prices[0] = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                self.blockTotalFutureValue\\n            );\\n            timestamp = self.lastOrderTimestamp;\\n        } else {\\n            timestamp = self.lastBlockUnitPriceTimestamp;\\n        }\\n    }\\n\\n    function getMarketUnitPrice(\\n        OrderBook storage self,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 unitPrice) {\\n        unitPrice = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory)[0];\\n\\n        // NOTE: If an order is in the first block of the order book, the block unit price history is empty.\\n        // In this case, the market unit price is calculated from the current block total amount and total future value\\n        // to avoid unwinding or liquidation the order in the same block using 0 as the market unit price.\\n        if (\\n            (self.lastOrderTimestamp != block.timestamp || unitPrice == 0 || _isReadOnly) &&\\n            self.isReliableBlock\\n        ) {\\n            unitPrice = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                self.blockTotalFutureValue\\n            );\\n        }\\n    }\\n\\n    function getBlockUnitPriceAverage(\\n        OrderBook storage self,\\n        uint256 maxCount,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 unitPrice) {\\n        uint256[] memory unitPrices = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory);\\n        uint256 length = unitPrices.length;\\n        uint256 sum;\\n        uint256 count;\\n\\n        if ((self.lastOrderTimestamp != block.timestamp || _isReadOnly) && self.isReliableBlock) {\\n            sum = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(self.blockTotalFutureValue);\\n            count = 1;\\n            maxCount--;\\n        }\\n\\n        for (uint256 i; i < maxCount; i++) {\\n            if (i >= length || unitPrices[i] == 0) {\\n                break;\\n            }\\n\\n            sum += unitPrices[i];\\n            count++;\\n        }\\n\\n        unitPrice = count > 0 ? sum.div(count) : 0;\\n    }\\n\\n    function getLendOrderBook(\\n        OrderBook storage self,\\n        uint256 _start,\\n        uint256 _limit\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities,\\n            uint256 next\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice;\\n\\n        if (_start == 0) {\\n            unitPrice = self.lendOrders[self.maturity].last();\\n        } else {\\n            (bool exists, uint256 parent) = self.lendOrders[self.maturity].search(_start);\\n\\n            if (exists) {\\n                unitPrice = _start;\\n            } else if (parent < _start) {\\n                unitPrice = parent;\\n            } else {\\n                unitPrice = self.lendOrders[self.maturity].prev(parent);\\n            }\\n        }\\n\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.lendOrders[self.maturity].prev(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.lendOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.lendOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n\\n        if (unitPrice != 0) {\\n            next = self.lendOrders[self.maturity].prev(unitPrice);\\n        }\\n    }\\n\\n    function getBorrowOrderBook(\\n        OrderBook storage self,\\n        uint256 _start,\\n        uint256 _limit\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256[] memory unitPrices,\\n            uint256[] memory amounts,\\n            uint256[] memory quantities,\\n            uint256 next\\n        )\\n    {\\n        unitPrices = new uint256[](_limit);\\n        amounts = new uint256[](_limit);\\n        quantities = new uint256[](_limit);\\n\\n        uint256 unitPrice;\\n\\n        if (_start == 0) {\\n            unitPrice = self.borrowOrders[self.maturity].first();\\n        } else {\\n            (bool exists, uint256 parent) = self.borrowOrders[self.maturity].search(_start);\\n\\n            if (exists) {\\n                unitPrice = _start;\\n            } else if (parent > _start) {\\n                unitPrice = parent;\\n            } else {\\n                unitPrice = self.borrowOrders[self.maturity].next(parent);\\n            }\\n        }\\n\\n        unitPrices[0] = unitPrice;\\n        amounts[0] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n        quantities[0] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n\\n        for (uint256 i = 1; i < unitPrices.length; i++) {\\n            if (unitPrice == 0) {\\n                break;\\n            }\\n\\n            unitPrice = self.borrowOrders[self.maturity].next(unitPrice);\\n            unitPrices[i] = unitPrice;\\n            amounts[i] = self.borrowOrders[self.maturity].getNodeTotalAmount(unitPrice);\\n            quantities[i] = self.borrowOrders[self.maturity].getNodeCount(unitPrice);\\n        }\\n\\n        if (unitPrice != 0) {\\n            next = self.borrowOrders[self.maturity].next(unitPrice);\\n        }\\n    }\\n\\n    function getLendOrderIds(\\n        OrderBook storage self,\\n        address _user\\n    ) internal view returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = block.timestamp >= userMaturity;\\n\\n        uint48[] memory orderIds = self.activeLendOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.lendOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                unchecked {\\n                    activeOrderCount += 1;\\n                }\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function getBorrowOrderIds(\\n        OrderBook storage self,\\n        address _user\\n    ) internal view returns (uint48[] memory activeOrderIds, uint48[] memory inActiveOrderIds) {\\n        uint256 activeOrderCount = 0;\\n        uint256 inActiveOrderCount = 0;\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        bool isPastMaturity = block.timestamp >= userMaturity;\\n\\n        uint48[] memory orderIds = self.activeBorrowOrderIds[_user];\\n        uint256 orderIdLength = orderIds.length;\\n        activeOrderIds = new uint48[](isPastMaturity ? 0 : orderIdLength);\\n        inActiveOrderIds = new uint48[](orderIdLength);\\n\\n        for (uint256 i; i < orderIdLength; i++) {\\n            uint48 orderId = orderIds[i];\\n            (, uint256 unitPrice, , ) = _unpackOrder(self.orders[orderId]);\\n\\n            if (!self.borrowOrders[userMaturity].isActiveOrderId(unitPrice, orderId)) {\\n                unchecked {\\n                    inActiveOrderCount += 1;\\n                }\\n                inActiveOrderIds[i - activeOrderCount] = orderId;\\n                if (!isPastMaturity) {\\n                    assembly {\\n                        mstore(activeOrderIds, sub(mload(activeOrderIds), 1))\\n                    }\\n                }\\n            } else {\\n                unchecked {\\n                    activeOrderCount += 1;\\n                }\\n                if (!isPastMaturity) {\\n                    activeOrderIds[i - inActiveOrderCount] = orderId;\\n                }\\n                assembly {\\n                    mstore(inActiveOrderIds, sub(mload(inActiveOrderIds), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function calculateFilledAmount(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        view\\n        returns (uint256 lastUnitPrice, uint256 filledAmount, uint256 filledAmountInFV)\\n    {\\n        if (_amount == 0) return (0, 0, 0);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            return\\n                self.borrowOrders[self.maturity].calculateDroppedAmountFromLeft(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        } else {\\n            return\\n                self.lendOrders[self.maturity].calculateDroppedAmountFromRight(\\n                    _amount,\\n                    0,\\n                    _unitPrice\\n                );\\n        }\\n    }\\n\\n    function updateUserMaturity(OrderBook storage self, address _user) internal {\\n        uint256 userMaturity = self.userCurrentMaturities[_user];\\n        uint256 orderBookMaturity = self.maturity;\\n\\n        if (userMaturity != orderBookMaturity) {\\n            if (\\n                self.activeLendOrderIds[_user].length > 0 ||\\n                self.activeBorrowOrderIds[_user].length > 0\\n            ) {\\n                revert PastMaturityOrderExists();\\n            }\\n\\n            self.userCurrentMaturities[_user] = orderBookMaturity;\\n        }\\n    }\\n\\n    function placeOrder(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) internal returns (uint48 orderId) {\\n        orderId = _nextOrderId(self);\\n        self.orders[orderId] = _packOrder(_side, _unitPrice, self.maturity, block.timestamp);\\n\\n        if (_side == ProtocolTypes.Side.LEND) {\\n            self.lendOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeLendOrderIds[_user].push(orderId);\\n        } else if (_side == ProtocolTypes.Side.BORROW) {\\n            self.borrowOrders[self.maturity].insertOrder(_unitPrice, orderId, _user, _amount);\\n            self.activeBorrowOrderIds[_user].push(orderId);\\n        }\\n    }\\n\\n    function fillOrders(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _amountInFV,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 remainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        PartiallyRemovedOrder memory partiallyRemovedOrder;\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.lendOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropRight(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        } else if (_side == ProtocolTypes.Side.LEND) {\\n            OrderStatisticsTreeLib.Tree storage orders = self.borrowOrders[self.maturity];\\n            (\\n                filledOrder.unitPrice,\\n                filledOrder.amount,\\n                filledOrder.futureValue,\\n                remainingAmount,\\n                partiallyRemovedOrder\\n            ) = orders.dropLeft(_amount, _amountInFV, _unitPrice);\\n            orderExists = orders.hasOrders();\\n        }\\n\\n        partiallyFilledOrder = PartiallyFilledOrder(\\n            partiallyRemovedOrder.orderId,\\n            partiallyRemovedOrder.maker,\\n            partiallyRemovedOrder.amount,\\n            partiallyRemovedOrder.futureValue\\n        );\\n    }\\n\\n    function setInitialBlockUnitPrice(OrderBook storage self, uint256 _unitPrice) internal {\\n        self.blockUnitPriceHistory = uint16(_unitPrice);\\n        self.lastBlockUnitPriceTimestamp = uint48(block.timestamp);\\n        self.lastOrderTimestamp = uint48(block.timestamp);\\n    }\\n\\n    function updateBlockUnitPriceHistory(\\n        OrderBook storage self,\\n        uint256 _filledAmount,\\n        uint256 _filledFutureValue,\\n        uint256 _minimumReliableAmount\\n    ) internal returns (uint256 latestBlockUnitPrice, bool isUpdated) {\\n        latestBlockUnitPrice = _unpackBlockUnitPriceHistory(self.blockUnitPriceHistory)[0];\\n\\n        if (self.lastOrderTimestamp != block.timestamp) {\\n            if (self.isReliableBlock) {\\n                latestBlockUnitPrice = (self.blockTotalAmount * Constants.PRICE_DIGIT).div(\\n                    self.blockTotalFutureValue\\n                );\\n\\n                // Remove the oldest block unit price and add the latest block unit price\\n                self.blockUnitPriceHistory =\\n                    uint16(latestBlockUnitPrice) |\\n                    (self.blockUnitPriceHistory << 16);\\n                self.lastBlockUnitPriceTimestamp = uint48(block.timestamp);\\n                isUpdated = true;\\n            }\\n\\n            self.lastOrderTimestamp = uint48(block.timestamp);\\n            self.blockTotalAmount = _filledAmount;\\n            self.blockTotalFutureValue = _filledFutureValue;\\n            self.isReliableBlock = false;\\n        } else {\\n            self.blockTotalAmount += _filledAmount;\\n            self.blockTotalFutureValue += _filledFutureValue;\\n        }\\n\\n        if (\\n            self.blockTotalAmount >= _minimumReliableAmount ||\\n            (self.blockTotalAmount > 0 && latestBlockUnitPrice == 0)\\n        ) {\\n            self.isReliableBlock = true;\\n        }\\n    }\\n\\n    function removeOrder(\\n        OrderBook storage self,\\n        address _user,\\n        uint48 _orderId\\n    ) internal returns (ProtocolTypes.Side, uint256, uint256) {\\n        (ProtocolTypes.Side side, uint256 unitPrice, , ) = _unpackOrder(self.orders[_orderId]);\\n        uint256 removedAmount;\\n\\n        if (side == ProtocolTypes.Side.LEND) {\\n            removedAmount = self.lendOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeLendOrderIds[_user], _orderId);\\n        } else if (side == ProtocolTypes.Side.BORROW) {\\n            removedAmount = self.borrowOrders[self.maturity].removeOrder(unitPrice, _orderId);\\n            _removeOrderIdFromOrders(self.activeBorrowOrderIds[_user], _orderId);\\n        }\\n\\n        delete self.orders[_orderId];\\n\\n        return (side, removedAmount, unitPrice);\\n    }\\n\\n    function calculateItayoseResult(\\n        OrderBook storage self\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 openingUnitPrice,\\n            uint256 lastLendUnitPrice,\\n            uint256 lastBorrowUnitPrice,\\n            uint256 totalOffsetAmount\\n        )\\n    {\\n        uint256 lendUnitPrice = self.lendOrders[self.maturity].last();\\n        uint256 borrowUnitPrice = self.borrowOrders[self.maturity].first();\\n        uint256 lendAmount = self.lendOrders[self.maturity].getNodeTotalAmount(lendUnitPrice);\\n        uint256 borrowAmount = self.borrowOrders[self.maturity].getNodeTotalAmount(borrowUnitPrice);\\n\\n        OrderStatisticsTreeLib.Tree storage borrowOrders = self.borrowOrders[self.maturity];\\n        OrderStatisticsTreeLib.Tree storage lendOrders = self.lendOrders[self.maturity];\\n\\n        // Return 0 if no orders is filled\\n        if (borrowUnitPrice > lendUnitPrice || borrowUnitPrice == 0 || lendUnitPrice == 0) {\\n            return (0, 0, 0, 0);\\n        }\\n\\n        while (borrowUnitPrice <= lendUnitPrice && borrowUnitPrice > 0 && lendUnitPrice > 0) {\\n            lastLendUnitPrice = lendUnitPrice;\\n            lastBorrowUnitPrice = borrowUnitPrice;\\n\\n            if (lendAmount > borrowAmount) {\\n                openingUnitPrice = lendUnitPrice;\\n                totalOffsetAmount += borrowAmount;\\n                lendAmount -= borrowAmount;\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            } else if (lendAmount < borrowAmount) {\\n                openingUnitPrice = borrowUnitPrice;\\n                totalOffsetAmount += lendAmount;\\n                borrowAmount -= lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n            } else {\\n                openingUnitPrice = (lendUnitPrice + borrowUnitPrice).div(2);\\n                totalOffsetAmount += lendAmount;\\n                lendUnitPrice = lendOrders.prev(lendUnitPrice);\\n                borrowUnitPrice = borrowOrders.next(borrowUnitPrice);\\n                lendAmount = lendOrders.getNodeTotalAmount(lendUnitPrice);\\n                borrowAmount = borrowOrders.getNodeTotalAmount(borrowUnitPrice);\\n            }\\n        }\\n    }\\n\\n    function getOrderExecutionConditions(\\n        OrderBook storage self,\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _circuitBreakerLimitRange,\\n        bool _isReadOnly\\n    )\\n        internal\\n        view\\n        returns (\\n            bool isFilled,\\n            uint256 executedUnitPrice,\\n            bool ignoreRemainingAmount,\\n            bool orderExists\\n        )\\n    {\\n        bool isLend = _side == ProtocolTypes.Side.LEND;\\n        uint256 cbThresholdUnitPrice;\\n        uint256 bestUnitPrice;\\n\\n        if (isLend) {\\n            bestUnitPrice = self.borrowOrders[self.maturity].first();\\n            cbThresholdUnitPrice = getLendCircuitBreakerThreshold(\\n                self,\\n                _circuitBreakerLimitRange,\\n                _isReadOnly\\n            );\\n        } else {\\n            bestUnitPrice = self.lendOrders[self.maturity].last();\\n            cbThresholdUnitPrice = getBorrowCircuitBreakerThreshold(\\n                self,\\n                _circuitBreakerLimitRange,\\n                _isReadOnly\\n            );\\n        }\\n\\n        orderExists = bestUnitPrice != 0;\\n\\n        if (\\n            _unitPrice == 0 ||\\n            (orderExists &&\\n                cbThresholdUnitPrice != 0 &&\\n                ((isLend && _unitPrice > cbThresholdUnitPrice) ||\\n                    (!isLend && _unitPrice < cbThresholdUnitPrice)))\\n        ) {\\n            executedUnitPrice = cbThresholdUnitPrice;\\n            ignoreRemainingAmount = true;\\n        } else {\\n            executedUnitPrice = _unitPrice;\\n            ignoreRemainingAmount = false;\\n        }\\n\\n        if (orderExists) {\\n            isFilled = isLend\\n                ? bestUnitPrice <= executedUnitPrice\\n                : bestUnitPrice >= executedUnitPrice;\\n        }\\n    }\\n\\n    function getLendCircuitBreakerThreshold(\\n        OrderBook storage self,\\n        uint256 _circuitBreakerLimitRange,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 cbThresholdUnitPrice) {\\n        uint256 blockUnitPriceAverage = getBlockUnitPriceAverage(self, 3, _isReadOnly);\\n        cbThresholdUnitPrice = (blockUnitPriceAverage *\\n            (Constants.PCT_DIGIT + _circuitBreakerLimitRange * 2)).div(Constants.PCT_DIGIT);\\n\\n        if (cbThresholdUnitPrice > Constants.PRICE_DIGIT || blockUnitPriceAverage == 0) {\\n            cbThresholdUnitPrice = Constants.PRICE_DIGIT;\\n        } else if (\\n            cbThresholdUnitPrice < blockUnitPriceAverage + CIRCUIT_BREAKER_MINIMUM_LEND_RANGE\\n        ) {\\n            cbThresholdUnitPrice = blockUnitPriceAverage + CIRCUIT_BREAKER_MINIMUM_LEND_RANGE;\\n        }\\n    }\\n\\n    function getBorrowCircuitBreakerThreshold(\\n        OrderBook storage self,\\n        uint256 _circuitBreakerLimitRange,\\n        bool _isReadOnly\\n    ) internal view returns (uint256 cbThresholdUnitPrice) {\\n        uint256 blockUnitPriceAverage = getBlockUnitPriceAverage(self, 5, _isReadOnly);\\n        cbThresholdUnitPrice = (blockUnitPriceAverage *\\n            (Constants.PCT_DIGIT - _circuitBreakerLimitRange)).div(Constants.PCT_DIGIT);\\n\\n        if (\\n            cbThresholdUnitPrice == 0 ||\\n            blockUnitPriceAverage == 0 ||\\n            blockUnitPriceAverage <= CIRCUIT_BREAKER_MINIMUM_BORROW_RANGE\\n        ) {\\n            cbThresholdUnitPrice = 1;\\n        } else if (\\n            blockUnitPriceAverage < cbThresholdUnitPrice + CIRCUIT_BREAKER_MINIMUM_BORROW_RANGE\\n        ) {\\n            cbThresholdUnitPrice = blockUnitPriceAverage - CIRCUIT_BREAKER_MINIMUM_BORROW_RANGE;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases and returns id of last order in order book.\\n     * @return The new order id\\n     */\\n    function _nextOrderId(OrderBook storage self) private returns (uint48) {\\n        self.lastOrderId++;\\n        return self.lastOrderId;\\n    }\\n\\n    function _removeOrderIdFromOrders(uint48[] storage orders, uint256 orderId) private {\\n        uint256 lastOrderIndex = orders.length - 1;\\n        for (uint256 i; i <= lastOrderIndex; i++) {\\n            if (orders[i] == orderId) {\\n                if (i != lastOrderIndex) {\\n                    uint48 lastOrderId = orders[lastOrderIndex];\\n                    orders[i] = lastOrderId;\\n                }\\n\\n                orders.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Packs order parameters into uint256\\n     */\\n    function _packOrder(\\n        ProtocolTypes.Side _side,\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _timestamp\\n    ) private pure returns (uint256) {\\n        return uint256(_side) | (_unitPrice << 8) | (_maturity << 24) | (_timestamp << 88);\\n    }\\n\\n    /**\\n     * @notice Unpacks order parameters from uint256\\n     */\\n    function _unpackOrder(\\n        uint256 _order\\n    )\\n        private\\n        pure\\n        returns (ProtocolTypes.Side side, uint256 unitPrice, uint256 maturity, uint256 timestamp)\\n    {\\n        side = ProtocolTypes.Side(uint8(_order));\\n        unitPrice = uint16(_order >> 8);\\n        maturity = uint64(_order >> 24);\\n        timestamp = uint64(_order >> 88);\\n    }\\n\\n    function _unpackBlockUnitPriceHistory(\\n        uint80 _blockUnitPriceHistory\\n    ) private pure returns (uint256[] memory prices) {\\n        prices = new uint256[](5);\\n\\n        prices[0] = uint16(_blockUnitPriceHistory);\\n        prices[1] = uint16(_blockUnitPriceHistory >> 16);\\n        prices[2] = uint16(_blockUnitPriceHistory >> 32);\\n        prices[3] = uint16(_blockUnitPriceHistory >> 48);\\n        prices[4] = uint16(_blockUnitPriceHistory >> 64);\\n    }\\n}\\n\",\"keccak256\":\"0x7154c684dd5c19c57505b0123296ed06d885214856c266ff75371689eb542320\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/OrderStatisticsTreeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// types\\nimport {RoundingUint256} from \\\"./math/RoundingUint256.sol\\\";\\n\\nstruct RemainingOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 unitPrice;\\n}\\n\\nstruct PartiallyRemovedOrder {\\n    uint48 orderId;\\n    address maker;\\n    uint256 amount;\\n    uint256 futureValue;\\n}\\n\\n/**\\n * @notice OrderStatisticsTreeLib is a Red-Black Tree binary search library\\n * based on the following library that is extended to manage order data.\\n *\\n * https://github.com/rob-Hitchens/OrderStatisticsTree\\n *\\n */\\nlibrary OrderStatisticsTreeLib {\\n    using RoundingUint256 for uint256;\\n    uint256 private constant EMPTY = 0;\\n\\n    struct Node {\\n        uint256 parent;\\n        uint256 left;\\n        uint256 right;\\n        bool red;\\n        uint48 head;\\n        uint48 tail;\\n        uint256 orderCounter;\\n        uint256 orderTotalAmount;\\n        mapping(uint48 orderId => OrderItem) orders;\\n    }\\n\\n    struct Tree {\\n        uint256 root;\\n        mapping(uint256 value => Node) nodes;\\n    }\\n\\n    struct OrderItem {\\n        uint48 orderId;\\n        uint48 next;\\n        uint48 prev;\\n        address maker;\\n        uint256 amount;\\n    }\\n\\n    function first(Tree storage self) internal view returns (uint256 value) {\\n        value = self.root;\\n        if (value == EMPTY) return 0;\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n    }\\n\\n    function last(Tree storage self) internal view returns (uint256 value) {\\n        value = self.root;\\n        if (value == EMPTY) return 0;\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n    }\\n\\n    function hasOrders(Tree storage self) internal view returns (bool) {\\n        return self.root != EMPTY;\\n    }\\n\\n    function next(Tree storage self, uint256 value) internal view returns (uint256 cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Starting value cannot be zero\\\");\\n        if (self.nodes[value].right != EMPTY) {\\n            cursor = treeMinimum(self, self.nodes[value].right);\\n        } else {\\n            cursor = self.nodes[value].parent;\\n            while (cursor != EMPTY && value == self.nodes[cursor].right) {\\n                value = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function prev(Tree storage self, uint256 value) internal view returns (uint256 cursor) {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Starting value cannot be zero\\\");\\n        if (self.nodes[value].left != EMPTY) {\\n            cursor = treeMaximum(self, self.nodes[value].left);\\n        } else {\\n            cursor = self.nodes[value].parent;\\n            while (cursor != EMPTY && value == self.nodes[cursor].left) {\\n                value = cursor;\\n                cursor = self.nodes[cursor].parent;\\n            }\\n        }\\n    }\\n\\n    function search(\\n        Tree storage self,\\n        uint256 value\\n    ) internal view returns (bool valueExists, uint256 parent) {\\n        uint256 cursor = self.root;\\n\\n        while (cursor != EMPTY) {\\n            if (value < cursor) {\\n                parent = cursor;\\n                cursor = self.nodes[cursor].left;\\n            } else if (value > cursor) {\\n                parent = cursor;\\n                cursor = self.nodes[cursor].right;\\n            }\\n\\n            if (value == cursor) {\\n                break;\\n            }\\n        }\\n\\n        valueExists = cursor != EMPTY;\\n    }\\n\\n    function exists(Tree storage self, uint256 value) internal view returns (bool) {\\n        if (value == self.root) return true;\\n\\n        uint256 cursor = value;\\n        while (self.nodes[cursor].parent != EMPTY) {\\n            uint256 parent = self.nodes[cursor].parent;\\n            Node storage gn = self.nodes[parent];\\n            if (gn.left != cursor && gn.right != cursor) {\\n                return false;\\n            }\\n            if (parent == self.root) {\\n                return true;\\n            }\\n            cursor = parent;\\n        }\\n        return false;\\n    }\\n\\n    function isActiveOrderId(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        return orderIdExists(self, value, orderId) && exists(self, value);\\n    }\\n\\n    function getNode(\\n        Tree storage self,\\n        uint256 value\\n    ) internal view returns (uint256, uint256, uint256, bool, uint256, uint256, uint256, uint256) {\\n        require(exists(self, value), \\\"OrderStatisticsTreeLib: Value does not exist\\\");\\n        Node storage gn = self.nodes[value];\\n        return (\\n            gn.parent,\\n            gn.left,\\n            gn.right,\\n            gn.red,\\n            gn.head,\\n            gn.tail,\\n            gn.orderCounter,\\n            gn.orderTotalAmount\\n        );\\n    }\\n\\n    function getNodeCount(Tree storage self, uint256 value) internal view returns (uint256) {\\n        Node storage gn = self.nodes[value];\\n        return gn.orderCounter;\\n    }\\n\\n    function getNodeTotalAmount(\\n        Tree storage self,\\n        uint256 value\\n    ) internal view returns (uint256 totalAmount) {\\n        return self.nodes[value].orderTotalAmount;\\n    }\\n\\n    function getNodeOrderIds(\\n        Tree storage self,\\n        uint256 value\\n    ) internal view returns (uint48[] memory orderIds) {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[gn.head];\\n        orderIds = new uint48[](gn.orderCounter);\\n\\n        for (uint256 i; i < gn.orderCounter; i++) {\\n            orderIds[i] = order.orderId;\\n            order = gn.orders[order.next];\\n        }\\n    }\\n\\n    function count(Tree storage self) internal view returns (uint256) {\\n        return getNodeCount(self, self.root);\\n    }\\n\\n    function insert(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Value to insert cannot be zero\\\");\\n        uint256 cursor;\\n        uint256 probe = self.root;\\n        while (probe != EMPTY) {\\n            cursor = probe;\\n            if (value < probe) {\\n                probe = self.nodes[probe].left;\\n            } else if (value > probe) {\\n                probe = self.nodes[probe].right;\\n            } else if (value == probe) {\\n                return;\\n            }\\n        }\\n\\n        Node storage nValue = self.nodes[value];\\n        // Update order info as a new one if there is already an old node\\n        if (self.root == EMPTY || nValue.orderCounter != 0) {\\n            nValue.orderCounter = 0;\\n            nValue.orderTotalAmount = 0;\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        }\\n        nValue.parent = cursor;\\n        nValue.left = EMPTY;\\n        nValue.right = EMPTY;\\n        nValue.red = true;\\n\\n        if (cursor == EMPTY) {\\n            self.root = value;\\n        } else if (value < cursor) {\\n            self.nodes[cursor].left = value;\\n        } else {\\n            self.nodes[cursor].right = value;\\n        }\\n        insertFixup(self, value);\\n    }\\n\\n    function remove(Tree storage self, uint256 value) internal {\\n        require(value != EMPTY, \\\"OrderStatisticsTreeLib: Value to remove cannot be zero\\\");\\n        Node storage nValue = self.nodes[value];\\n        uint256 probe;\\n        uint256 cursor;\\n        if (nValue.orderCounter == 0) {\\n            if (self.nodes[value].left == EMPTY || self.nodes[value].right == EMPTY) {\\n                cursor = value;\\n            } else {\\n                cursor = self.nodes[value].right;\\n                while (self.nodes[cursor].left != EMPTY) {\\n                    cursor = self.nodes[cursor].left;\\n                }\\n            }\\n            if (self.nodes[cursor].left != EMPTY) {\\n                probe = self.nodes[cursor].left;\\n            } else {\\n                probe = self.nodes[cursor].right;\\n            }\\n            uint256 cursorParent = self.nodes[cursor].parent;\\n            self.nodes[probe].parent = cursorParent;\\n            if (cursorParent != EMPTY) {\\n                if (cursor == self.nodes[cursorParent].left) {\\n                    self.nodes[cursorParent].left = probe;\\n                } else {\\n                    self.nodes[cursorParent].right = probe;\\n                }\\n            } else {\\n                self.root = probe;\\n            }\\n            bool doFixup = !self.nodes[cursor].red;\\n            if (cursor != value) {\\n                replaceParent(self, cursor, value);\\n                self.nodes[cursor].left = self.nodes[value].left;\\n                self.nodes[self.nodes[cursor].left].parent = cursor;\\n                self.nodes[cursor].right = self.nodes[value].right;\\n                self.nodes[self.nodes[cursor].right].parent = cursor;\\n                self.nodes[cursor].red = self.nodes[value].red;\\n                (cursor, value) = (value, cursor);\\n            }\\n            if (doFixup) {\\n                removeFixup(self, probe);\\n            }\\n            delete self.nodes[cursor];\\n        }\\n    }\\n\\n    function treeMinimum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].left != EMPTY) {\\n            value = self.nodes[value].left;\\n        }\\n        return value;\\n    }\\n\\n    function treeMaximum(Tree storage self, uint256 value) private view returns (uint256) {\\n        while (self.nodes[value].right != EMPTY) {\\n            value = self.nodes[value].right;\\n        }\\n        return value;\\n    }\\n\\n    function rotateLeft(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].right;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorLeft = self.nodes[cursor].left;\\n        self.nodes[value].right = cursorLeft;\\n        if (cursorLeft != EMPTY) {\\n            self.nodes[cursorLeft].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].left) {\\n            self.nodes[parent].left = cursor;\\n        } else {\\n            self.nodes[parent].right = cursor;\\n        }\\n        self.nodes[cursor].left = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function rotateRight(Tree storage self, uint256 value) private {\\n        uint256 cursor = self.nodes[value].left;\\n        uint256 parent = self.nodes[value].parent;\\n        uint256 cursorRight = self.nodes[cursor].right;\\n        self.nodes[value].left = cursorRight;\\n        if (cursorRight != EMPTY) {\\n            self.nodes[cursorRight].parent = value;\\n        }\\n        self.nodes[cursor].parent = parent;\\n        if (parent == EMPTY) {\\n            self.root = cursor;\\n        } else if (value == self.nodes[parent].right) {\\n            self.nodes[parent].right = cursor;\\n        } else {\\n            self.nodes[parent].left = cursor;\\n        }\\n        self.nodes[cursor].right = value;\\n        self.nodes[value].parent = cursor;\\n    }\\n\\n    function insertFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && self.nodes[self.nodes[value].parent].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (valueParent == self.nodes[self.nodes[valueParent].parent].left) {\\n                cursor = self.nodes[self.nodes[valueParent].parent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].right) {\\n                        value = valueParent;\\n                        rotateLeft(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateRight(self, self.nodes[valueParent].parent);\\n                }\\n            } else {\\n                cursor = self.nodes[self.nodes[valueParent].parent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    value = self.nodes[valueParent].parent;\\n                } else {\\n                    if (value == self.nodes[valueParent].left) {\\n                        value = valueParent;\\n                        rotateRight(self, value);\\n                    }\\n                    valueParent = self.nodes[value].parent;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[valueParent].parent].red = true;\\n                    rotateLeft(self, self.nodes[valueParent].parent);\\n                }\\n            }\\n        }\\n        self.nodes[self.root].red = false;\\n    }\\n\\n    function replaceParent(Tree storage self, uint256 a, uint256 b) private {\\n        uint256 bParent = self.nodes[b].parent;\\n        self.nodes[a].parent = bParent;\\n        if (bParent == EMPTY) {\\n            self.root = a;\\n        } else {\\n            if (b == self.nodes[bParent].left) {\\n                self.nodes[bParent].left = a;\\n            } else {\\n                self.nodes[bParent].right = a;\\n            }\\n        }\\n    }\\n\\n    function removeFixup(Tree storage self, uint256 value) private {\\n        uint256 cursor;\\n        while (value != self.root && !self.nodes[value].red) {\\n            uint256 valueParent = self.nodes[value].parent;\\n            if (value == self.nodes[valueParent].left) {\\n                cursor = self.nodes[valueParent].right;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateLeft(self, valueParent);\\n                    cursor = self.nodes[valueParent].right;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].left].red &&\\n                    !self.nodes[self.nodes[cursor].right].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].right].red) {\\n                        self.nodes[self.nodes[cursor].left].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateRight(self, cursor);\\n                        cursor = self.nodes[valueParent].right;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].right].red = false;\\n                    rotateLeft(self, valueParent);\\n                    value = self.root;\\n                }\\n            } else {\\n                cursor = self.nodes[valueParent].left;\\n                if (self.nodes[cursor].red) {\\n                    self.nodes[cursor].red = false;\\n                    self.nodes[valueParent].red = true;\\n                    rotateRight(self, valueParent);\\n                    cursor = self.nodes[valueParent].left;\\n                }\\n                if (\\n                    !self.nodes[self.nodes[cursor].right].red &&\\n                    !self.nodes[self.nodes[cursor].left].red\\n                ) {\\n                    self.nodes[cursor].red = true;\\n                    value = valueParent;\\n                } else {\\n                    if (!self.nodes[self.nodes[cursor].left].red) {\\n                        self.nodes[self.nodes[cursor].right].red = false;\\n                        self.nodes[cursor].red = true;\\n                        rotateLeft(self, cursor);\\n                        cursor = self.nodes[valueParent].left;\\n                    }\\n                    self.nodes[cursor].red = self.nodes[valueParent].red;\\n                    self.nodes[valueParent].red = false;\\n                    self.nodes[self.nodes[cursor].left].red = false;\\n                    rotateRight(self, valueParent);\\n                    value = self.root;\\n                }\\n            }\\n        }\\n        self.nodes[value].red = false;\\n    }\\n\\n    function calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (uint256 droppedValue, uint256 droppedAmount, uint256 droppedAmountInFV)\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromLeft(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            first(self)\\n        );\\n    }\\n\\n    function calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        view\\n        returns (uint256 droppedValue, uint256 droppedAmount, uint256 droppedAmountInFV)\\n    {\\n        (droppedValue, , , droppedAmount, droppedAmountInFV, , ) = _calculateDroppedAmountFromRight(\\n            self,\\n            amount,\\n            amountInFV,\\n            limitValue,\\n            last(self)\\n        );\\n    }\\n\\n    function dropLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = first(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor <= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromLeft(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].left = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent > cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].left = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 lastNode = last(self);\\n\\n        if (lastNode == droppedValue && self.nodes[lastNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue > self.root ||\\n            (droppedValue == self.root && droppedAmount == totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToLeft(self);\\n    }\\n\\n    function dropRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue\\n    )\\n        internal\\n        returns (\\n            uint256 droppedValue,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 remainingAmount,\\n            PartiallyRemovedOrder memory partiallyRemovedOrder\\n        )\\n    {\\n        uint256 cursor = last(self);\\n        uint256 cursorNodeAmount;\\n        uint256 exceededAmount;\\n        uint256 exceededAmountInFV;\\n\\n        require(cursor >= limitValue || limitValue == 0, \\\"Insufficient limit value\\\");\\n\\n        (\\n            droppedValue,\\n            cursor,\\n            cursorNodeAmount,\\n            droppedAmount,\\n            droppedAmountInFV,\\n            exceededAmount,\\n            exceededAmountInFV\\n        ) = _calculateDroppedAmountFromRight(self, amount, amountInFV, limitValue, cursor);\\n\\n        uint256 totalNodeAmount = droppedAmount + exceededAmount;\\n\\n        if (totalNodeAmount > 0) {\\n            if (exceededAmount > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - exceededAmount\\n                );\\n            } else if (exceededAmountInFV > 0) {\\n                cursor = droppedValue;\\n                // Update order ids in the node.\\n                partiallyRemovedOrder = removeOrders(\\n                    self,\\n                    cursor,\\n                    cursorNodeAmount - _calculatePresentValue(cursor, exceededAmountInFV)\\n                );\\n            }\\n\\n            self.nodes[cursor].right = 0;\\n\\n            uint256 parent = self.nodes[cursor].parent;\\n\\n            if (cursor != EMPTY) {\\n                while (parent != EMPTY) {\\n                    if (parent < cursor) {\\n                        // Relink the nodes\\n                        if (self.nodes[cursor].parent != parent) {\\n                            self.nodes[cursor].parent = parent;\\n                            self.nodes[parent].right = cursor;\\n                        }\\n\\n                        cursor = parent;\\n                    }\\n\\n                    parent = self.nodes[parent].parent;\\n                }\\n            }\\n        }\\n\\n        if (amount > totalNodeAmount) {\\n            remainingAmount = amount - totalNodeAmount;\\n        }\\n\\n        uint256 firstNode = first(self);\\n\\n        if (firstNode == droppedValue && self.nodes[firstNode].orderTotalAmount == 0) {\\n            // The case that all node is dropped.\\n            self.root = EMPTY;\\n        } else if (\\n            droppedValue < self.root ||\\n            (droppedValue == self.root && droppedAmount == totalNodeAmount)\\n        ) {\\n            // The case that the root node is dropped\\n            self.root = cursor;\\n            self.nodes[cursor].parent = 0;\\n        }\\n\\n        rotateTreeToRight(self);\\n    }\\n\\n    function rotateTreeToLeft(Tree storage self) internal {\\n        if (self.nodes[self.root].left == 0 && self.nodes[self.root].right != 0) {\\n            if (self.nodes[self.nodes[self.root].right].left != 0) {\\n                rotateRight(self, self.nodes[self.root].right);\\n            }\\n            rotateLeft(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function rotateTreeToRight(Tree storage self) internal {\\n        if (self.nodes[self.root].right == 0 && self.nodes[self.root].left != 0) {\\n            if (self.nodes[self.nodes[self.root].left].right != 0) {\\n                rotateLeft(self, self.nodes[self.root].left);\\n            }\\n            rotateRight(self, self.root);\\n        }\\n\\n        if (self.nodes[self.root].red) {\\n            self.nodes[self.root].red = false;\\n        }\\n    }\\n\\n    function getFutureValue(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (uint256) {\\n        return _calculateFutureValue(value, self.nodes[value].orders[orderId].amount);\\n    }\\n\\n    // Double linked list functions\\n    /**\\n     * @dev Retrieves the Object denoted by `_id`.\\n     */\\n    function getOrderById(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (address maker, uint256 amount) {\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[orderId];\\n\\n        maker = order.maker;\\n        amount = order.amount;\\n    }\\n\\n    /**\\n     * @dev Return boolean if value, amount and orderId exist in doubly linked list\\n     */\\n    function orderIdExists(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal view returns (bool) {\\n        uint48 cursor = orderId;\\n        Node storage gn = self.nodes[value];\\n        OrderItem memory order = gn.orders[cursor];\\n\\n        if (order.orderId != cursor) {\\n            return false;\\n        }\\n\\n        while (order.prev != EMPTY) {\\n            cursor = order.prev;\\n            order = gn.orders[cursor];\\n        }\\n\\n        return cursor == gn.head;\\n    }\\n\\n    function insertOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal {\\n        require(amount > 0, \\\"Insufficient amount\\\");\\n        require(value <= Constants.PRICE_DIGIT, \\\"Value too high\\\");\\n        insert(self, value);\\n\\n        addTail(self, value, orderId, user, amount);\\n    }\\n\\n    function removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        amount = _removeOrder(self, value, orderId);\\n        remove(self, value);\\n    }\\n\\n    function removeOrders(\\n        Tree storage self,\\n        uint256 value,\\n        uint256 _amount\\n    ) internal returns (PartiallyRemovedOrder memory partiallyRemovedOrder) {\\n        Node storage gn = self.nodes[value];\\n\\n        require(\\n            gn.orderTotalAmount >= _amount,\\n            \\\"OrderStatisticsTreeLib: Amount to remove is insufficient\\\"\\n        );\\n\\n        uint256 remainingAmount = _amount;\\n        OrderItem memory currentOrder = gn.orders[gn.head];\\n        uint48 orderId = gn.head;\\n\\n        while (orderId != 0 && remainingAmount != 0) {\\n            currentOrder = gn.orders[orderId];\\n\\n            if (currentOrder.amount <= remainingAmount) {\\n                remainingAmount -= currentOrder.amount;\\n                orderId = currentOrder.next;\\n            } else {\\n                partiallyRemovedOrder = PartiallyRemovedOrder(\\n                    currentOrder.orderId,\\n                    currentOrder.maker,\\n                    remainingAmount,\\n                    _calculateFutureValue(value, remainingAmount)\\n                );\\n                currentOrder = gn.orders[currentOrder.prev];\\n                break;\\n            }\\n        }\\n\\n        if (currentOrder.orderId != 0) {\\n            _removeOrders(self, value, currentOrder.orderId);\\n        }\\n\\n        if (partiallyRemovedOrder.amount > 0) {\\n            self.nodes[value].orders[partiallyRemovedOrder.orderId].amount -= partiallyRemovedOrder\\n                .amount;\\n            self.nodes[value].orderTotalAmount -= partiallyRemovedOrder.amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Head with `_amount` in the amount field, and orderId.\\n     */\\n    function addHead(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n        uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n        _link(self, _value, orderId, gn.head);\\n        _setHead(self, _value, orderId);\\n        if (gn.tail == 0) _setTail(self, _value, orderId);\\n    }\\n\\n    /**\\n     * @dev Insert a new OrderItem as the new Tail with `_amount` in the amount field, and orderId.\\n     */\\n    function addTail(\\n        Tree storage self,\\n        uint256 _value,\\n        uint48 _orderId,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        Node storage gn = self.nodes[_value];\\n\\n        if (gn.head == 0) {\\n            addHead(self, _value, _orderId, _user, _amount);\\n        } else {\\n            uint48 orderId = _createOrder(self, _value, _orderId, _user, _amount);\\n            _link(self, _value, gn.tail, orderId);\\n            _setTail(self, _value, orderId);\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromLeft(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 firstValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = firstValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor <= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = next(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    function _calculateDroppedAmountFromRight(\\n        Tree storage self,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 limitValue,\\n        uint256 lastValue\\n    )\\n        private\\n        view\\n        returns (\\n            uint256 droppedValue,\\n            uint256 cursor,\\n            uint256 cursorNodeAmount,\\n            uint256 droppedAmount,\\n            uint256 droppedAmountInFV,\\n            uint256 exceededAmount,\\n            uint256 exceededAmountInFV\\n        )\\n    {\\n        cursor = lastValue;\\n\\n        while (\\n            (droppedAmount < amount || amount == EMPTY) &&\\n            (droppedAmountInFV < amountInFV || amountInFV == EMPTY) &&\\n            cursor != EMPTY &&\\n            (cursor >= limitValue || limitValue == EMPTY)\\n        ) {\\n            cursorNodeAmount = self.nodes[cursor].orderTotalAmount;\\n            droppedValue = cursor;\\n\\n            droppedAmountInFV += _calculateFutureValue(cursor, cursorNodeAmount);\\n            droppedAmount += cursorNodeAmount;\\n\\n            if (droppedAmount > amount && amount != EMPTY) {\\n                exceededAmount = droppedAmount - amount;\\n                exceededAmountInFV = _calculateFutureValue(cursor, exceededAmount);\\n            } else if (droppedAmountInFV > amountInFV && amountInFV != EMPTY) {\\n                exceededAmountInFV = droppedAmountInFV - amountInFV;\\n                exceededAmount = _calculatePresentValue(cursor, exceededAmountInFV);\\n            }\\n\\n            cursor = prev(self, cursor);\\n        }\\n\\n        if (exceededAmount > 0) {\\n            droppedAmount -= exceededAmount;\\n        }\\n        if (exceededAmountInFV > 0) {\\n            droppedAmountInFV -= exceededAmountInFV;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to create an unlinked Order.\\n     */\\n    function _createOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId,\\n        address user,\\n        uint256 amount\\n    ) internal returns (uint48) {\\n        Node storage gn = self.nodes[value];\\n        require(\\n            gn.orders[orderId].maker == address(0),\\n            \\\"OrderStatisticsTreeLib: Order id already exists\\\"\\n        );\\n\\n        gn.orderCounter += 1;\\n        gn.orderTotalAmount += amount;\\n        OrderItem memory order = OrderItem(orderId, 0, 0, user, amount);\\n        gn.orders[orderId] = order;\\n        return order.orderId;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItem denoted by `_id` from the list.\\n     */\\n    function _removeOrder(\\n        Tree storage self,\\n        uint256 value,\\n        uint48 orderId\\n    ) internal returns (uint256 amount) {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTreeLib: Order does not exist\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        amount = order.amount;\\n\\n        if (gn.head == orderId && gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else if (gn.head == orderId) {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        } else if (gn.tail == orderId) {\\n            _setTail(self, value, order.prev);\\n            gn.orders[order.prev].next = 0;\\n        } else {\\n            _link(self, value, order.prev, order.next);\\n        }\\n        delete gn.orders[order.orderId];\\n        gn.orderCounter -= 1;\\n        gn.orderTotalAmount -= order.amount;\\n    }\\n\\n    /**\\n     * @dev Remove the OrderItems older than or equal `orderId` from the list\\n     */\\n    function _removeOrders(Tree storage self, uint256 value, uint48 orderId) internal {\\n        require(\\n            isActiveOrderId(self, value, orderId),\\n            \\\"OrderStatisticsTreeLib: Order does not exist\\\"\\n        );\\n        Node storage gn = self.nodes[value];\\n\\n        OrderItem memory order = gn.orders[orderId];\\n        uint48 cursor = gn.head;\\n        uint256 removedCount = 1;\\n        uint256 removedAmount = gn.orders[cursor].amount;\\n\\n        while (cursor != orderId) {\\n            cursor = gn.orders[cursor].next;\\n            removedCount++;\\n            removedAmount += gn.orders[cursor].amount;\\n        }\\n\\n        if (gn.tail == orderId) {\\n            _setHead(self, value, 0);\\n            _setTail(self, value, 0);\\n        } else {\\n            _setHead(self, value, order.next);\\n            gn.orders[order.next].prev = 0;\\n        }\\n\\n        gn.orderCounter -= removedCount;\\n        gn.orderTotalAmount -= removedAmount;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Head pointer.\\n     */\\n    function _setHead(Tree storage self, uint256 value, uint48 orderId) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.head = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to update the Tail pointer.\\n     */\\n    function _setTail(Tree storage self, uint256 value, uint48 orderId) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.tail = orderId;\\n    }\\n\\n    /**\\n     * @dev Internal function to link an Object to another.\\n     */\\n    function _link(Tree storage self, uint256 value, uint48 prevId, uint48 nextId) internal {\\n        Node storage gn = self.nodes[value];\\n\\n        gn.orders[prevId].next = nextId;\\n        gn.orders[nextId].prev = prevId;\\n    }\\n\\n    function _calculateFutureValue(\\n        uint256 unitPrice,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        return (amount * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n\\n    function _calculatePresentValue(\\n        uint256 unitPrice,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        return (amount * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n}\\n\",\"keccak256\":\"0x7e726e6f70fd1ef9d56b3104a1a2963fc121a578313227b9dd087d81e9222a0b\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/QuickSort.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary QuickSort {\\n    function sort(uint256[] memory data) public pure returns (uint256[] memory) {\\n        quickSort(data, int256(0), int256(data.length - 1));\\n        return data;\\n    }\\n\\n    function quickSort(uint256[] memory arr, int256 left, int256 right) internal pure {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] < pivot) i++;\\n            while (pivot < arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x1e5ceda4895c1ac2523f8fb4bc42996b10a12a683c6943c31614699a6717586a\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logics/FundManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\nimport {ILiquidationReceiver} from \\\"../../interfaces/ILiquidationReceiver.sol\\\";\\n\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {QuickSort} from \\\"../QuickSort.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage, TerminationCurrencyCache} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary FundManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n    using RoundingUint256 for uint256;\\n    using RoundingInt256 for int256;\\n\\n    uint256 public constant BASE_MIN_DEBT_UNIT_PRICE = 9600;\\n\\n    error NotRedemptionPeriod();\\n    error NotRepaymentPeriod();\\n    error NoRedemptionAmount();\\n    error NoRepaymentAmount();\\n    error AlreadyRedeemed();\\n    error InsufficientCollateral();\\n\\n    struct CalculatedTotalFundInBaseCurrencyVars {\\n        address user;\\n        ILendingMarketController.AdditionalFunds additionalFunds;\\n        uint256 liquidationThresholdRate;\\n        bool[] isCollateral;\\n        bytes32[] ccys;\\n    }\\n\\n    struct ActualFunds {\\n        int256 presentValue;\\n        uint256 claimableAmount;\\n        uint256 debtAmount;\\n        int256 futureValue;\\n        uint256 workingLendOrdersAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 borrowedAmount;\\n        int256 genesisValue;\\n        int256 genesisValueInPV;\\n        int256 genesisValueInFV;\\n    }\\n\\n    struct CalculateActualFundsVars {\\n        bool isTotal;\\n        bool isDefaultMarket;\\n        uint8 orderBookId;\\n        uint8 defaultOrderBookId;\\n        uint256 defaultOrderBookMarketUnitPrice;\\n        uint256[] maturities;\\n        int256 presentValueOfDefaultMarket;\\n        ILendingMarket market;\\n        IFutureValueVault futureValueVault;\\n        uint256 minDebtUnitPrice;\\n        uint256 defaultOrderBookMinDebtUnitPrice;\\n    }\\n\\n    struct FutureValueVaultFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n    }\\n\\n    struct InactiveBorrowOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct InactiveLendOrdersFunds {\\n        int256 genesisValue;\\n        int256 presentValue;\\n        int256 futureValue;\\n        uint256 workingOrdersAmount;\\n        uint256 lentAmount;\\n    }\\n\\n    event OrderFilled(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 amountInFV,\\n        uint256 feeInFV\\n    );\\n\\n    event OrdersFilledInAsync(\\n        address indexed taker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 indexed maturity,\\n        uint256 amount,\\n        uint256 amountInFV\\n    );\\n\\n    event OrderPartiallyFilled(\\n        uint48 orderId,\\n        address indexed maker,\\n        bytes32 indexed ccy,\\n        ProtocolTypes.Side side,\\n        uint256 maturity,\\n        uint256 amount,\\n        uint256 amountInFV\\n    );\\n\\n    event RedemptionExecuted(\\n        address indexed user,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 amount\\n    );\\n\\n    event RepaymentExecuted(\\n        address indexed user,\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        uint256 amount\\n    );\\n\\n    event EmergencySettlementExecuted(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Converts the future value to the genesis value if there is balance in the past maturity.\\n     * @param _ccy Currency for pausing all lending markets\\n     * @param _user User's address\\n     * @return Current future value amount after update\\n     */\\n    function convertFutureValueToGenesisValue(\\n        bytes32 _ccy,\\n        uint8 _orderBookId,\\n        uint256 _maturity,\\n        address _user\\n    ) public returns (int256) {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy];\\n        bool isAutoRolled = AddressResolverLib.genesisValueVault().isAutoRolled(_ccy, _maturity);\\n\\n        if (!isAutoRolled) {\\n            (int256 amount, ) = IFutureValueVault(futureValueVault).getBalance(_orderBookId, _user);\\n            return amount;\\n        }\\n\\n        (\\n            int256 removedAmount,\\n            int256 currentAmount,\\n            uint256 basisMaturity,\\n            bool isAllRemoved\\n        ) = IFutureValueVault(futureValueVault).reset(_orderBookId, _user);\\n\\n        if (removedAmount != 0) {\\n            // Overwrite the `removedAmount` with the unsettled amount left of the Genesis Value\\n            // to handle the fractional amount generated by the lazy evaluation when the user is\\n            // the last user who is converting their own future value in the selected maturity.\\n            if (isAllRemoved && Storage.slot().pendingOrderAmounts[_ccy][basisMaturity] == 0) {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithResidualAmount(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity\\n                );\\n            } else {\\n                AddressResolverLib.genesisValueVault().updateGenesisValueWithFutureValue(\\n                    _ccy,\\n                    _user,\\n                    basisMaturity,\\n                    removedAmount\\n                );\\n            }\\n        }\\n\\n        return currentAmount;\\n    }\\n\\n    function updateFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledAmount,\\n        uint256 _filledAmountInFV,\\n        uint256 _feeInFV\\n    ) external {\\n        address futureValueVault = Storage.slot().futureValueVaults[_ccy];\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n\\n        if (_side == ProtocolTypes.Side.BORROW) {\\n            AddressResolverLib.tokenVault().addDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).decrease(\\n                orderBookId,\\n                _user,\\n                _filledAmountInFV + _feeInFV,\\n                _maturity\\n            );\\n        } else {\\n            AddressResolverLib.tokenVault().removeDepositAmount(_user, _ccy, _filledAmount);\\n            IFutureValueVault(futureValueVault).increase(\\n                orderBookId,\\n                _user,\\n                _filledAmountInFV - _feeInFV,\\n                _maturity\\n            );\\n        }\\n\\n        if (_feeInFV > 0) {\\n            address reserveFundAddr = address(AddressResolverLib.reserveFund());\\n            IFutureValueVault(futureValueVault).increase(\\n                orderBookId,\\n                reserveFundAddr,\\n                _feeInFV,\\n                _maturity\\n            );\\n\\n            registerCurrencyAndMaturity(_ccy, _maturity, reserveFundAddr);\\n        }\\n    }\\n\\n    function registerCurrencyAndMaturity(bytes32 _ccy, uint256 _maturity, address _user) public {\\n        if (!Storage.slot().usedMaturities[_ccy][_user].contains(_maturity)) {\\n            Storage.slot().usedMaturities[_ccy][_user].add(_maturity);\\n\\n            registerCurrency(_ccy, _user);\\n        }\\n    }\\n\\n    function registerCurrency(bytes32 _ccy, address _user) public {\\n        if (!Storage.slot().usedCurrencies[_user].contains(_ccy)) {\\n            Storage.slot().usedCurrencies[_user].add(_ccy);\\n        }\\n    }\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity, address _user) external {\\n        if (\\n            AddressResolverLib.currencyController().currencyExists(_ccy) ||\\n            block.timestamp < _maturity + 1 weeks\\n        ) revert NotRedemptionPeriod();\\n\\n        cleanUpFunds(_ccy, _user);\\n\\n        int256 amount = getActualFunds(_ccy, _maturity, _user, 0).futureValue;\\n        if (amount <= 0) revert NoRedemptionAmount();\\n\\n        uint256 redemptionAmount = _resetFundsPerMaturity(_ccy, _maturity, _user, amount)\\n            .toUint256();\\n        AddressResolverLib.tokenVault().addDepositAmount(_user, _ccy, redemptionAmount);\\n\\n        emit RedemptionExecuted(_user, _ccy, _maturity, redemptionAmount);\\n    }\\n\\n    function executeRepayment(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        uint256 _amount\\n    ) public returns (uint256 repaymentAmount) {\\n        if (\\n            AddressResolverLib.currencyController().currencyExists(_ccy) ||\\n            block.timestamp < _maturity\\n        ) revert NotRepaymentPeriod();\\n\\n        cleanUpFunds(_ccy, _user);\\n\\n        int256 resetAmount = _amount == 0\\n            ? getActualFunds(_ccy, _maturity, _user, 0).futureValue\\n            : -_amount.toInt256();\\n\\n        if (resetAmount >= 0) revert NoRepaymentAmount();\\n\\n        repaymentAmount = (-_resetFundsPerMaturity(_ccy, _maturity, _user, resetAmount))\\n            .toUint256();\\n        AddressResolverLib.tokenVault().removeDepositAmount(_user, _ccy, repaymentAmount);\\n\\n        emit RepaymentExecuted(_user, _ccy, _maturity, repaymentAmount);\\n    }\\n\\n    function executeEmergencySettlement(address _user) external {\\n        if (Storage.slot().isRedeemed[_user]) revert AlreadyRedeemed();\\n\\n        int256 redemptionAmountInBaseCurrency;\\n\\n        bytes32[] memory currencies = Storage.slot().usedCurrencies[_user].values();\\n\\n        for (uint256 i; i < currencies.length; i++) {\\n            bytes32 ccy = currencies[i];\\n            // First, clean up future values and genesis values to redeem those amounts.\\n            cleanUpFunds(ccy, _user);\\n\\n            int256 amountInCcy = _resetFundsPerCurrency(ccy, _user);\\n            redemptionAmountInBaseCurrency += _convertToBaseCurrencyAtMarketTerminationPrice(\\n                ccy,\\n                amountInCcy\\n            );\\n        }\\n\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            int256 amountInCcy = AddressResolverLib\\n                .tokenVault()\\n                .executeForcedReset(_user, collateralCurrencies[i])\\n                .toInt256();\\n\\n            redemptionAmountInBaseCurrency += _convertToBaseCurrencyAtMarketTerminationPrice(\\n                collateralCurrencies[i],\\n                amountInCcy\\n            );\\n        }\\n\\n        if (redemptionAmountInBaseCurrency > 0) {\\n            uint256[] memory terminationCollateralRatios = new uint256[](\\n                collateralCurrencies.length\\n            );\\n            uint256 terminationRatioTotal;\\n\\n            for (uint256 i; i < collateralCurrencies.length; i++) {\\n                bytes32 ccy = collateralCurrencies[i];\\n                terminationCollateralRatios[i] = Storage.slot().terminationCollateralRatios[ccy];\\n                terminationRatioTotal += terminationCollateralRatios[i];\\n            }\\n\\n            for (uint256 i; i < collateralCurrencies.length; i++) {\\n                bytes32 ccy = collateralCurrencies[i];\\n                uint256 addedAmount = _convertFromBaseCurrencyAtMarketTerminationPrice(\\n                    ccy,\\n                    (redemptionAmountInBaseCurrency.toUint256() * terminationCollateralRatios[i])\\n                        .div(terminationRatioTotal)\\n                );\\n\\n                AddressResolverLib.tokenVault().addDepositAmount(_user, ccy, addedAmount);\\n            }\\n        } else if (redemptionAmountInBaseCurrency < 0) {\\n            revert InsufficientCollateral();\\n        }\\n\\n        Storage.slot().isRedeemed[_user] = true;\\n        emit EmergencySettlementExecuted(_user, redemptionAmountInBaseCurrency.toUint256());\\n    }\\n\\n    function getActualFunds(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        uint256 _minDebtUnitPrice\\n    ) public view returns (ActualFunds memory actualFunds) {\\n        CalculateActualFundsVars memory vars;\\n        vars.market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        vars.futureValueVault = IFutureValueVault(Storage.slot().futureValueVaults[_ccy]);\\n        vars.defaultOrderBookId = Storage.slot().orderBookIdLists[_ccy][0];\\n        vars.minDebtUnitPrice = _minDebtUnitPrice;\\n\\n        if (_maturity == 0) {\\n            vars.isTotal = true;\\n            vars.orderBookId = vars.defaultOrderBookId;\\n            vars.isDefaultMarket = true;\\n        } else {\\n            vars.isTotal = false;\\n            vars.orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n            vars.isDefaultMarket = vars.orderBookId == vars.defaultOrderBookId;\\n        }\\n        actualFunds.genesisValue = AddressResolverLib.genesisValueVault().getBalance(_ccy, _user);\\n\\n        vars.maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 i; i < vars.maturities.length; i++) {\\n            uint256 currentMaturity = vars.maturities[i];\\n            uint8 currentOrderBookId = Storage.slot().maturityOrderBookIds[_ccy][currentMaturity];\\n            bool isAutoRolled = AddressResolverLib.genesisValueVault().isAutoRolled(\\n                _ccy,\\n                currentMaturity\\n            );\\n\\n            if (vars.isDefaultMarket || currentOrderBookId == vars.orderBookId) {\\n                {\\n                    bool isDefaultMarket = currentOrderBookId == vars.defaultOrderBookId;\\n\\n                    // Get current funds from Future Value Vault by lazy evaluations.\\n                    FutureValueVaultFunds\\n                        memory futureValueVaultFunds = _getFundsFromFutureValueVault(\\n                            _ccy,\\n                            _user,\\n                            vars,\\n                            currentOrderBookId,\\n                            isDefaultMarket,\\n                            isAutoRolled\\n                        );\\n                    // Get current funds from borrowing orders by lazy evaluations.\\n                    InactiveBorrowOrdersFunds\\n                        memory borrowOrdersFunds = _getFundsFromInactiveBorrowOrders(\\n                            _ccy,\\n                            _user,\\n                            vars,\\n                            currentOrderBookId,\\n                            currentMaturity,\\n                            isDefaultMarket,\\n                            isAutoRolled\\n                        );\\n                    // Get current funds from lending orders by lazy evaluations.\\n                    InactiveLendOrdersFunds\\n                        memory lendOrdersFunds = _getFundsFromInactiveLendOrders(\\n                            _ccy,\\n                            _user,\\n                            vars,\\n                            currentOrderBookId,\\n                            isDefaultMarket,\\n                            isAutoRolled\\n                        );\\n\\n                    // Set genesis value.\\n                    actualFunds.genesisValue +=\\n                        futureValueVaultFunds.genesisValue -\\n                        borrowOrdersFunds.genesisValue +\\n                        lendOrdersFunds.genesisValue;\\n\\n                    // Set present value.\\n                    int256 presentValue = futureValueVaultFunds.presentValue -\\n                        borrowOrdersFunds.presentValue +\\n                        lendOrdersFunds.presentValue;\\n                    int256 futureValue = futureValueVaultFunds.futureValue -\\n                        borrowOrdersFunds.futureValue +\\n                        lendOrdersFunds.futureValue;\\n\\n                    actualFunds.presentValue += presentValue;\\n\\n                    if (isDefaultMarket) {\\n                        vars.presentValueOfDefaultMarket = presentValue;\\n                    }\\n\\n                    if (presentValue > 0) {\\n                        actualFunds.claimableAmount += presentValue.toUint256();\\n                    } else if (presentValue < 0) {\\n                        actualFunds.debtAmount += (-presentValue).toUint256();\\n                    }\\n\\n                    // Set future value.\\n                    // Note: When calculating total funds, total future value will be 0 because different maturities can not be added.\\n                    if (!vars.isTotal) {\\n                        actualFunds.futureValue += futureValue;\\n                    }\\n\\n                    actualFunds.workingBorrowOrdersAmount += borrowOrdersFunds.workingOrdersAmount;\\n                    actualFunds.workingLendOrdersAmount += lendOrdersFunds.workingOrdersAmount;\\n                    actualFunds.borrowedAmount += borrowOrdersFunds.borrowedAmount;\\n                    actualFunds.lentAmount += lendOrdersFunds.lentAmount;\\n                }\\n\\n                // Get balance fluctuation amount by auto-rolls\\n                if (actualFunds.genesisValue < 0) {\\n                    actualFunds.genesisValue += AddressResolverLib\\n                        .genesisValueVault()\\n                        .calculateBalanceFluctuationByAutoRolls(\\n                            _ccy,\\n                            actualFunds.genesisValue,\\n                            vars.maturities[i],\\n                            i == vars.maturities.length - 1 ? 0 : vars.maturities[i + 1]\\n                        );\\n                }\\n            }\\n        }\\n\\n        // Add GV to PV & FV if the market is that the lending position is rolled to.\\n        if (vars.isDefaultMarket && actualFunds.genesisValue != 0) {\\n            int256 futureValue = AddressResolverLib.genesisValueVault().calculateFVFromGV(\\n                _ccy,\\n                0,\\n                actualFunds.genesisValue\\n            );\\n\\n            uint256 unitPrice = _getDefaultOrderBookMarketUnitPrice(vars);\\n            uint256 defaultOrderBookMinDebtUnitPrice = _getDefaultOrderBookMinDebtUnitPrice(vars);\\n\\n            int256 presentValue = _calculatePVFromFV(\\n                futureValue,\\n                unitPrice >= defaultOrderBookMinDebtUnitPrice\\n                    ? unitPrice\\n                    : defaultOrderBookMinDebtUnitPrice\\n            );\\n\\n            actualFunds.presentValue += presentValue;\\n            actualFunds.genesisValueInPV = presentValue;\\n\\n            // Add GV to the claimable amount or debt amount.\\n            // Before that, offset the present value of the default market and the genesis value in addition.\\n            if (presentValue > 0) {\\n                if (vars.presentValueOfDefaultMarket < 0) {\\n                    int256 offsetAmount = presentValue > -vars.presentValueOfDefaultMarket\\n                        ? -vars.presentValueOfDefaultMarket\\n                        : presentValue;\\n                    actualFunds.debtAmount -= (offsetAmount).toUint256();\\n                    presentValue -= offsetAmount;\\n                }\\n\\n                actualFunds.claimableAmount += presentValue.toUint256();\\n            } else if (presentValue < 0) {\\n                if (vars.presentValueOfDefaultMarket > 0) {\\n                    int256 offsetAmount = -presentValue > vars.presentValueOfDefaultMarket\\n                        ? vars.presentValueOfDefaultMarket\\n                        : -presentValue;\\n\\n                    actualFunds.claimableAmount -= (offsetAmount).toUint256();\\n                    presentValue += offsetAmount;\\n                }\\n\\n                actualFunds.debtAmount += (-presentValue).toUint256();\\n            }\\n\\n            actualFunds.genesisValueInFV = futureValue;\\n            if (!vars.isTotal) {\\n                actualFunds.futureValue += futureValue;\\n            }\\n        }\\n    }\\n\\n    function getCurrentMinDebtUnitPrice(\\n        uint256 _maturity,\\n        uint256 _minDebtUnitPrice\\n    ) public view returns (uint256) {\\n        if (_minDebtUnitPrice == 0) return 0;\\n\\n        return\\n            _maturity > block.timestamp\\n                ? BASE_MIN_DEBT_UNIT_PRICE -\\n                    ((BASE_MIN_DEBT_UNIT_PRICE - _minDebtUnitPrice) *\\n                        (_maturity - block.timestamp)) /\\n                    Constants.SECONDS_IN_YEAR\\n                : BASE_MIN_DEBT_UNIT_PRICE;\\n    }\\n\\n    function calculateFunds(\\n        bytes32 _ccy,\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds,\\n        uint256 _liquidationThresholdRate\\n    ) public view returns (ILendingMarketController.CalculatedFunds memory funds) {\\n        ActualFunds memory actualFunds = getActualFunds(\\n            _ccy,\\n            0,\\n            _user,\\n            Storage.slot().minDebtUnitPrices[_ccy]\\n        );\\n\\n        funds.workingLendOrdersAmount =\\n            actualFunds.workingLendOrdersAmount +\\n            _additionalFunds.workingLendOrdersAmount;\\n        funds.claimableAmount = actualFunds.claimableAmount + _additionalFunds.claimableAmount;\\n        funds.lentAmount = actualFunds.lentAmount + _additionalFunds.lentAmount;\\n        funds.workingBorrowOrdersAmount =\\n            actualFunds.workingBorrowOrdersAmount +\\n            _additionalFunds.workingBorrowOrdersAmount;\\n        funds.debtAmount = actualFunds.debtAmount + _additionalFunds.debtAmount;\\n        funds.borrowedAmount = actualFunds.borrowedAmount + _additionalFunds.borrowedAmount;\\n\\n        if (funds.claimableAmount > 0) {\\n            // If the debt and claimable amount are in the same currency, the claimable amount can be allocated\\n            // as collateral up to the amount that the liquidation threshold is reached.\\n            // For calculation purposes, the working amount for borrowing orders is treated as potential debt in addition.\\n            uint256 maxAllocableCollateralAmountInSameCcy = ((funds.debtAmount +\\n                funds.workingBorrowOrdersAmount) * _liquidationThresholdRate).div(\\n                    Constants.PCT_DIGIT\\n                );\\n\\n            // If the claimable amount is over the allocable amount as collateral, the over amount is used as collateral\\n            // for the other currency after being multiplied by a haircut.\\n            if (funds.claimableAmount > maxAllocableCollateralAmountInSameCcy) {\\n                uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n                funds.unallocatedCollateralAmount =\\n                    funds.claimableAmount -\\n                    maxAllocableCollateralAmountInSameCcy;\\n                funds.collateralAmount =\\n                    maxAllocableCollateralAmountInSameCcy +\\n                    (haircut * (funds.unallocatedCollateralAmount)).div(Constants.PCT_DIGIT);\\n            } else {\\n                funds.collateralAmount = funds.claimableAmount;\\n                funds.unallocatedCollateralAmount = 0;\\n            }\\n        }\\n    }\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds calldata _additionalFunds,\\n        uint256 _liquidationThresholdRate\\n    ) external view returns (ILendingMarketController.CalculatedTotalFunds memory totalFunds) {\\n        EnumerableSet.Bytes32Set storage currencySet = Storage.slot().usedCurrencies[_user];\\n        CalculatedTotalFundInBaseCurrencyVars memory vars;\\n\\n        if (\\n            !currencySet.contains(_additionalFunds.ccy) &&\\n            AddressResolverLib.currencyController().currencyExists(_additionalFunds.ccy)\\n        ) {\\n            uint256 length = currencySet.length();\\n            vars.ccys = new bytes32[](length + 1);\\n            for (uint256 i; i < length; i++) {\\n                vars.ccys[i] = currencySet.at(i);\\n            }\\n            vars.ccys[length] = _additionalFunds.ccy;\\n        } else {\\n            vars.ccys = currencySet.values();\\n        }\\n\\n        vars.user = _user;\\n        vars.additionalFunds = _additionalFunds;\\n        vars.liquidationThresholdRate = _liquidationThresholdRate;\\n        vars.isCollateral = AddressResolverLib.tokenVault().isCollateral(vars.ccys);\\n\\n        // Calculate total funds from the user's order list\\n        for (uint256 i; i < vars.ccys.length; i++) {\\n            // bytes32 ccy = vars.ccys[i];\\n            ILendingMarketController.AdditionalFunds memory additionalFunds;\\n\\n            if (vars.ccys[i] == vars.additionalFunds.ccy) {\\n                additionalFunds = vars.additionalFunds;\\n            }\\n\\n            uint256[] memory amounts = new uint256[](7);\\n\\n            // 0: workingLendOrdersAmount\\n            // 1: claimableAmount\\n            // 2: collateralAmount\\n            // 3: lentAmount\\n            // 4: workingBorrowOrdersAmount\\n            // 5: debtAmount\\n            // 6: borrowedAmount\\n            ILendingMarketController.CalculatedFunds memory funds = calculateFunds(\\n                vars.ccys[i],\\n                vars.user,\\n                additionalFunds,\\n                vars.liquidationThresholdRate\\n            );\\n\\n            amounts[0] = funds.workingLendOrdersAmount;\\n            amounts[1] = funds.claimableAmount;\\n            amounts[2] = funds.collateralAmount;\\n            amounts[3] = funds.lentAmount;\\n            amounts[4] = funds.workingBorrowOrdersAmount;\\n            amounts[5] = funds.debtAmount;\\n            amounts[6] = funds.borrowedAmount;\\n\\n            if (vars.ccys[i] == vars.additionalFunds.ccy) {\\n                // plusDepositAmount: borrowedAmount\\n                // minusDepositAmount: workingLendOrdersAmount + lentAmount\\n                totalFunds.plusDepositAmountInAdditionalFundsCcy += amounts[6];\\n                totalFunds.minusDepositAmountInAdditionalFundsCcy += amounts[0] + amounts[3];\\n            }\\n\\n            uint256[] memory amountsInBaseCurrency = AddressResolverLib\\n                .currencyController()\\n                .convertToBaseCurrency(vars.ccys[i], amounts);\\n\\n            totalFunds.claimableAmount += amountsInBaseCurrency[1];\\n            totalFunds.collateralAmount += amountsInBaseCurrency[2];\\n            totalFunds.workingBorrowOrdersAmount += amountsInBaseCurrency[4];\\n            totalFunds.debtAmount += amountsInBaseCurrency[5];\\n\\n            // NOTE: Lent amount and working lend orders amount are excluded here as they are not used\\n            // for the collateral calculation.\\n            // Those amounts need only to check whether there is enough deposit amount in the selected currency.\\n            if (vars.isCollateral[i]) {\\n                totalFunds.workingLendOrdersAmount += amountsInBaseCurrency[0];\\n                totalFunds.lentAmount += amountsInBaseCurrency[3];\\n                totalFunds.borrowedAmount += amountsInBaseCurrency[6];\\n            }\\n        }\\n    }\\n\\n    function getUsedMaturities(\\n        bytes32 _ccy,\\n        address _user\\n    ) public view returns (uint256[] memory maturities) {\\n        maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        if (maturities.length > 0) {\\n            maturities = QuickSort.sort(maturities);\\n        }\\n    }\\n\\n    function getGenesisValue(\\n        bytes32 _ccy,\\n        address _user\\n    ) public view returns (int256 amount, int256 amountInPV, int256 amountInFV) {\\n        FundManagementLogic.ActualFunds memory funds = getActualFunds(_ccy, 0, _user, 0);\\n        amount = funds.genesisValue;\\n        amountInPV = funds.genesisValueInPV;\\n        amountInFV = funds.genesisValueInFV;\\n    }\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (int256 presentValue, int256 futureValue) {\\n        FundManagementLogic.ActualFunds memory funds = getActualFunds(_ccy, _maturity, _user, 0);\\n        presentValue = funds.presentValue;\\n        futureValue = funds.futureValue;\\n    }\\n\\n    function cleanUpAllFunds(address _user) external {\\n        bytes32[] memory currencies = Storage.slot().usedCurrencies[_user].values();\\n        uint256 length = currencies.length;\\n        for (uint256 i; i < length; i++) {\\n            cleanUpFunds(currencies[i], _user);\\n        }\\n    }\\n\\n    function cleanUpFunds(\\n        bytes32 _ccy,\\n        address _user\\n    ) public returns (uint256 totalActiveOrderCount) {\\n        bool futureValueExists = false;\\n        uint256[] memory maturities = getUsedMaturities(_ccy, _user);\\n\\n        for (uint256 i; i < maturities.length; i++) {\\n            uint256 maturity = maturities[i];\\n            uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][maturity];\\n            uint256 activeOrderCount = _cleanUpOrders(_ccy, orderBookId, _user);\\n            totalActiveOrderCount += activeOrderCount;\\n\\n            int256 currentFutureValue = convertFutureValueToGenesisValue(\\n                _ccy,\\n                orderBookId,\\n                maturity,\\n                _user\\n            );\\n\\n            if (currentFutureValue != 0) {\\n                futureValueExists = true;\\n            }\\n\\n            if (currentFutureValue == 0 && activeOrderCount == 0) {\\n                Storage.slot().usedMaturities[_ccy][_user].remove(maturity);\\n            }\\n\\n            AddressResolverLib.genesisValueVault().cleanUpBalance(\\n                _ccy,\\n                _user,\\n                i == maturities.length - 1 ? 0 : maturities[i + 1]\\n            );\\n        }\\n\\n        if (totalActiveOrderCount == 0) {\\n            AddressResolverLib.tokenVault().cleanUpUsedCurrencies(_user, _ccy);\\n\\n            if (\\n                !futureValueExists &&\\n                AddressResolverLib.genesisValueVault().getBalance(_ccy, _user) == 0\\n            ) {\\n                Storage.slot().usedCurrencies[_user].remove(_ccy);\\n            }\\n        }\\n    }\\n\\n    function _cleanUpOrders(\\n        bytes32 _ccy,\\n        uint8 _orderBookId,\\n        address _user\\n    ) internal returns (uint256 activeOrderCount) {\\n        (\\n            uint256 activeLendOrderCount,\\n            uint256 activeBorrowOrderCount,\\n            uint256 removedLendOrderFutureValue,\\n            uint256 removedBorrowOrderFutureValue,\\n            uint256 removedLendOrderAmount,\\n            uint256 removedBorrowOrderAmount,\\n            uint256 userCurrentMaturity\\n        ) = ILendingMarket(Storage.slot().lendingMarkets[_ccy]).cleanUpOrders(_orderBookId, _user);\\n\\n        if (removedLendOrderAmount > removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().removeDepositAmount(\\n                _user,\\n                _ccy,\\n                removedLendOrderAmount - removedBorrowOrderAmount\\n            );\\n        } else if (removedLendOrderAmount < removedBorrowOrderAmount) {\\n            AddressResolverLib.tokenVault().addDepositAmount(\\n                _user,\\n                _ccy,\\n                removedBorrowOrderAmount - removedLendOrderAmount\\n            );\\n        }\\n\\n        if (removedLendOrderFutureValue > 0) {\\n            IFutureValueVault(Storage.slot().futureValueVaults[_ccy]).increase(\\n                _orderBookId,\\n                _user,\\n                removedLendOrderFutureValue,\\n                userCurrentMaturity\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.LEND,\\n                userCurrentMaturity,\\n                removedLendOrderAmount,\\n                removedLendOrderFutureValue\\n            );\\n        }\\n\\n        if (removedBorrowOrderFutureValue > 0) {\\n            IFutureValueVault(Storage.slot().futureValueVaults[_ccy]).decrease(\\n                _orderBookId,\\n                _user,\\n                removedBorrowOrderFutureValue,\\n                userCurrentMaturity\\n            );\\n            emit OrdersFilledInAsync(\\n                _user,\\n                _ccy,\\n                ProtocolTypes.Side.BORROW,\\n                userCurrentMaturity,\\n                removedBorrowOrderAmount,\\n                removedBorrowOrderFutureValue\\n            );\\n        }\\n\\n        Storage.slot().pendingOrderAmounts[_ccy][userCurrentMaturity] -=\\n            removedLendOrderAmount +\\n            removedBorrowOrderAmount;\\n\\n        activeOrderCount = activeLendOrderCount + activeBorrowOrderCount;\\n    }\\n\\n    function _getFundsFromFutureValueVault(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint8 currentOrderBookId,\\n        bool isDefaultMarket,\\n        bool isAutoRolled\\n    ) internal view returns (FutureValueVaultFunds memory funds) {\\n        (int256 futureValueInMaturity, uint256 fvMaturity) = vars.futureValueVault.getBalance(\\n            currentOrderBookId,\\n            _user\\n        );\\n\\n        if (futureValueInMaturity != 0) {\\n            if (isAutoRolled) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        fvMaturity,\\n                        futureValueInMaturity\\n                    );\\n                }\\n            } else {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    uint256 unitPrice = _getDefaultOrderBookMarketUnitPrice(vars);\\n\\n                    (funds.presentValue, funds.futureValue) = _convertFVtoOtherMaturity(\\n                        _ccy,\\n                        vars.market,\\n                        fvMaturity,\\n                        futureValueInMaturity,\\n                        unitPrice\\n                    );\\n\\n                    if (funds.futureValue < 0) {\\n                        uint256 defaultOrderBookMinDebtUnitPrice = _getDefaultOrderBookMinDebtUnitPrice(\\n                                vars\\n                            );\\n\\n                        if (unitPrice < defaultOrderBookMinDebtUnitPrice) {\\n                            funds.presentValue = _calculatePVFromFV(\\n                                funds.futureValue,\\n                                defaultOrderBookMinDebtUnitPrice\\n                            );\\n                        }\\n                    }\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    uint256 unitPrice = vars.market.getMarketUnitPrice(vars.orderBookId);\\n                    funds.futureValue = futureValueInMaturity;\\n\\n                    // Apply min debt unit price if the future value is negative (debt).\\n                    if (funds.futureValue < 0) {\\n                        uint256 currentMinDebtUnitPrice = getCurrentMinDebtUnitPrice(\\n                            fvMaturity,\\n                            vars.minDebtUnitPrice\\n                        );\\n\\n                        funds.presentValue = _calculatePVFromFV(\\n                            futureValueInMaturity,\\n                            unitPrice < currentMinDebtUnitPrice\\n                                ? currentMinDebtUnitPrice\\n                                : unitPrice\\n                        );\\n                    } else {\\n                        funds.presentValue = _calculatePVFromFV(futureValueInMaturity, unitPrice);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveBorrowOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint8 currentOrderBookId,\\n        uint256 currentMaturity,\\n        bool isDefaultMarket,\\n        bool isAutoRolled\\n    ) internal view returns (InactiveBorrowOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        uint256 currentMinDebtUnitPrice = getCurrentMinDebtUnitPrice(\\n            currentMaturity,\\n            vars.minDebtUnitPrice\\n        );\\n\\n        (funds.workingOrdersAmount, funds.borrowedAmount, filledFutureValue, orderMaturity) = vars\\n            .market\\n            .getTotalAmountFromBorrowOrders(currentOrderBookId, _user, currentMinDebtUnitPrice);\\n\\n        if (isAutoRolled) {\\n            funds.workingOrdersAmount = 0;\\n        }\\n\\n        if (filledFutureValue != 0) {\\n            if (isAutoRolled) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    uint256 unitPrice = _getDefaultOrderBookMarketUnitPrice(vars);\\n\\n                    (funds.presentValue, funds.futureValue) = _convertFVtoOtherMaturity(\\n                        _ccy,\\n                        vars.market,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256(),\\n                        unitPrice\\n                    );\\n\\n                    uint256 defaultOrderBookMinDebtUnitPrice = _getDefaultOrderBookMinDebtUnitPrice(\\n                        vars\\n                    );\\n\\n                    if (unitPrice < defaultOrderBookMinDebtUnitPrice) {\\n                        funds.presentValue = _calculatePVFromFV(\\n                            funds.futureValue,\\n                            defaultOrderBookMinDebtUnitPrice\\n                        );\\n                    }\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    uint256 unitPrice = vars.market.getMarketUnitPrice(vars.orderBookId);\\n\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFV(\\n                        funds.futureValue,\\n                        unitPrice < currentMinDebtUnitPrice ? currentMinDebtUnitPrice : unitPrice\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getFundsFromInactiveLendOrders(\\n        bytes32 _ccy,\\n        address _user,\\n        CalculateActualFundsVars memory vars,\\n        uint8 currentOrderBookId,\\n        bool isDefaultMarket,\\n        bool isAutoRolled\\n    ) internal view returns (InactiveLendOrdersFunds memory funds) {\\n        uint256 filledFutureValue;\\n        uint256 orderMaturity;\\n        (funds.workingOrdersAmount, funds.lentAmount, filledFutureValue, orderMaturity) = vars\\n            .market\\n            .getTotalAmountFromLendOrders(currentOrderBookId, _user);\\n\\n        if (isAutoRolled) {\\n            funds.workingOrdersAmount = 0;\\n        }\\n\\n        if (filledFutureValue != 0) {\\n            if (isAutoRolled) {\\n                if (vars.isDefaultMarket) {\\n                    funds.genesisValue = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                        _ccy,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256()\\n                    );\\n                }\\n            } else {\\n                if (vars.isTotal && !isDefaultMarket) {\\n                    (funds.presentValue, funds.futureValue) = _convertFVtoOtherMaturity(\\n                        _ccy,\\n                        vars.market,\\n                        orderMaturity,\\n                        filledFutureValue.toInt256(),\\n                        vars.market.getMarketUnitPrice(vars.defaultOrderBookId)\\n                    );\\n                } else if (vars.isTotal || !vars.isDefaultMarket || isDefaultMarket) {\\n                    funds.futureValue = filledFutureValue.toInt256();\\n                    funds.presentValue = _calculatePVFromFV(\\n                        vars.market,\\n                        vars.orderBookId,\\n                        funds.futureValue\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _convertFVtoOtherMaturity(\\n        bytes32 _ccy,\\n        ILendingMarket _market,\\n        uint256 _fromMaturity,\\n        int256 _fromFutureValue,\\n        uint256 _toUnitPrice\\n    ) internal view returns (int256 presentValue, int256 futureValue) {\\n        if (\\n            AddressResolverLib.genesisValueVault().getAutoRollLog(_ccy, _fromMaturity).unitPrice ==\\n            0\\n        ) {\\n            presentValue = _calculatePVFromFV(\\n                _market,\\n                Storage.slot().maturityOrderBookIds[_ccy][_fromMaturity],\\n                _fromFutureValue\\n            );\\n            futureValue = _calculateFVFromPV(presentValue, _toUnitPrice);\\n        } else {\\n            futureValue = AddressResolverLib.genesisValueVault().calculateFVFromFV(\\n                _ccy,\\n                _fromMaturity,\\n                0,\\n                _fromFutureValue\\n            );\\n            presentValue = _calculatePVFromFV(futureValue, _toUnitPrice);\\n        }\\n    }\\n\\n    function calculatePVFromFV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _futureValue\\n    ) public view returns (int256 presentValue) {\\n        presentValue = _calculatePVFromFV(\\n            ILendingMarket(Storage.slot().lendingMarkets[_ccy]),\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n            _futureValue\\n        );\\n    }\\n\\n    function calculateFVFromPV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _presentValue\\n    ) public view returns (int256 futureValue) {\\n        uint256 unitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy]).getMarketUnitPrice(\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity]\\n        );\\n        futureValue = _calculateFVFromPV(_presentValue, unitPrice);\\n    }\\n\\n    function calculateFVFromPV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _presentValue\\n    ) public view returns (uint256 futureValue) {\\n        uint256 unitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy]).getMarketUnitPrice(\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity]\\n        );\\n        futureValue = _calculateFVFromPV(_presentValue, unitPrice);\\n    }\\n\\n    function _convertToBaseCurrencyAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) internal view returns (int256) {\\n        TerminationCurrencyCache memory currency = Storage.slot().terminationCurrencyCaches[_ccy];\\n        return (_amount * currency.price).div((10 ** currency.decimals).toInt256());\\n    }\\n\\n    function _convertFromBaseCurrencyAtMarketTerminationPrice(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        TerminationCurrencyCache memory currency = Storage.slot().terminationCurrencyCaches[_ccy];\\n        return (_amount * 10 ** currency.decimals).div(currency.price.toUint256());\\n    }\\n\\n    function _resetFundsPerCurrency(bytes32 _ccy, address _user) internal returns (int256 amount) {\\n        amount = getActualFunds(_ccy, 0, _user, 0).presentValue;\\n\\n        uint256[] memory maturities = Storage.slot().usedMaturities[_ccy][_user].values();\\n        for (uint256 j; j < maturities.length; j++) {\\n            IFutureValueVault(Storage.slot().futureValueVaults[_ccy]).executeForcedReset(\\n                Storage.slot().maturityOrderBookIds[_ccy][maturities[j]],\\n                _user\\n            );\\n        }\\n\\n        AddressResolverLib.genesisValueVault().executeForcedReset(_ccy, _user);\\n\\n        Storage.slot().usedCurrencies[_user].remove(_ccy);\\n    }\\n\\n    function _resetFundsPerMaturity(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amount\\n    ) internal returns (int256 totalRemovedAmount) {\\n        int256 currentFVAmount;\\n        int256 currentGVAmount;\\n\\n        (totalRemovedAmount, currentFVAmount) = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy]\\n        ).executeForcedReset(Storage.slot().maturityOrderBookIds[_ccy][_maturity], _user, _amount);\\n\\n        int256 remainingAmount = _amount - totalRemovedAmount;\\n\\n        bool isDefaultMarket = Storage.slot().maturityOrderBookIds[_ccy][_maturity] ==\\n            Storage.slot().orderBookIdLists[_ccy][0];\\n\\n        if (isDefaultMarket && remainingAmount != 0) {\\n            int256 removedAmount;\\n            (removedAmount, currentGVAmount) = AddressResolverLib\\n                .genesisValueVault()\\n                .executeForcedReset(_ccy, _maturity, _user, remainingAmount);\\n            totalRemovedAmount += removedAmount;\\n        }\\n\\n        if (currentFVAmount == 0 && currentGVAmount == 0) {\\n            Storage.slot().usedMaturities[_ccy][_user].remove(_maturity);\\n\\n            if (Storage.slot().usedMaturities[_ccy][_user].length() == 0) {\\n                Storage.slot().usedCurrencies[_user].remove(_ccy);\\n            }\\n        }\\n    }\\n\\n    function _getDefaultOrderBookMinDebtUnitPrice(\\n        CalculateActualFundsVars memory vars\\n    ) private view returns (uint256) {\\n        if (vars.defaultOrderBookMinDebtUnitPrice == 0 && vars.minDebtUnitPrice != 0) {\\n            vars.defaultOrderBookMinDebtUnitPrice = getCurrentMinDebtUnitPrice(\\n                vars.market.getMaturity(vars.defaultOrderBookId),\\n                vars.minDebtUnitPrice\\n            );\\n        }\\n\\n        return vars.defaultOrderBookMinDebtUnitPrice;\\n    }\\n\\n    function _getDefaultOrderBookMarketUnitPrice(\\n        CalculateActualFundsVars memory vars\\n    ) private view returns (uint256) {\\n        if (vars.defaultOrderBookMarketUnitPrice == 0) {\\n            vars.defaultOrderBookMarketUnitPrice = vars.market.getMarketUnitPrice(\\n                vars.defaultOrderBookId\\n            );\\n        }\\n\\n        return vars.defaultOrderBookMarketUnitPrice;\\n    }\\n\\n    function _calculatePVFromFV(\\n        ILendingMarket _market,\\n        uint8 _orderBookId,\\n        int256 _futureValue\\n    ) internal view returns (int256 presentValue) {\\n        uint256 unitPrice = _market.getMarketUnitPrice(_orderBookId);\\n        presentValue = _calculatePVFromFV(_futureValue, unitPrice);\\n    }\\n\\n    function _calculatePVFromFV(\\n        int256 _futureValue,\\n        uint256 _unitPrice\\n    ) internal pure returns (int256) {\\n        uint256 unitPrice = _unitPrice == 0 ? Constants.PRICE_DIGIT : _unitPrice;\\n        // NOTE: The formula is: presentValue = futureValue * unitPrice.\\n        return (_futureValue * unitPrice.toInt256()).div(Constants.PRICE_DIGIT.toInt256());\\n    }\\n\\n    function _calculatePVFromFV(\\n        uint256 _futureValue,\\n        uint256 _unitPrice\\n    ) internal pure returns (uint256) {\\n        uint256 unitPrice = _unitPrice == 0 ? Constants.PRICE_DIGIT : _unitPrice;\\n        // NOTE: The formula is: presentValue = futureValue * unitPrice.\\n        return (_futureValue * unitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n\\n    function _calculateFVFromPV(\\n        int256 _presentValue,\\n        uint256 _unitPrice\\n    ) internal pure returns (int256) {\\n        uint256 unitPrice = _unitPrice == 0 ? Constants.PRICE_DIGIT : _unitPrice;\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_presentValue * Constants.PRICE_DIGIT.toInt256()).div(unitPrice.toInt256());\\n    }\\n\\n    function _calculateFVFromPV(\\n        uint256 _presentValue,\\n        uint256 _unitPrice\\n    ) internal pure returns (uint256) {\\n        uint256 unitPrice = _unitPrice == 0 ? Constants.PRICE_DIGIT : _unitPrice;\\n        // NOTE: The formula is: futureValue = presentValue / unitPrice.\\n        return (_presentValue * Constants.PRICE_DIGIT).div(unitPrice);\\n    }\\n}\\n\",\"keccak256\":\"0x90190f2b759dd7f95fda5840b7c6477c9d46225d00a9f710f6488fc004ca0b6d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logics/LendingMarketOperationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../../../dependencies/openzeppelin/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\nimport {Strings} from \\\"../../../dependencies/openzeppelin/utils/Strings.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\nimport {AutoRollLog} from \\\"../../interfaces/IGenesisValueVault.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {BokkyPooBahsDateTimeLibrary as TimeLibrary} from \\\"../BokkyPooBahsDateTimeLibrary.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {RoundingInt256} from \\\"../math/RoundingInt256.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage, ZCTokenInfo, TerminationCurrencyCache, ObservationPeriodLog} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary LendingMarketOperationLogic {\\n    using SafeCast for uint256;\\n    using RoundingUint256 for uint256;\\n    using SafeCast for uint256;\\n    using RoundingInt256 for int256;\\n\\n    uint256 public constant OBSERVATION_PERIOD = 6 hours;\\n    uint8 public constant COMPOUND_FACTOR_DECIMALS = 18;\\n    uint8 public constant ZC_TOKEN_BASE_DECIMALS = 26;\\n    uint256 public constant PRE_ORDER_BASE_PERIOD = 7 days;\\n\\n    error InvalidCompoundFactor();\\n    error TooManyTokenDecimals(address tokenAddress, uint8 decimals);\\n    error InvalidCurrency();\\n    error InvalidOpeningDate();\\n    error InvalidPreOpeningDate();\\n    error InvalidTimestamp();\\n    error InvalidMinDebtUnitPrice();\\n    error LendingMarketNotInitialized();\\n    error NotEnoughOrderBooks();\\n    error AlreadyZCTokenExists(address tokenAddress);\\n    error InvalidMaturity(uint256 maturity);\\n    error ZcTokenIsZero();\\n\\n    event LendingMarketInitialized(\\n        bytes32 indexed ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        address lendingMarket,\\n        address futureValueVault\\n    );\\n\\n    event MinDebtUnitPriceUpdated(bytes32 indexed ccy, uint256 minDebtUnitPrice);\\n\\n    event OrderBookCreated(\\n        bytes32 indexed ccy,\\n        uint8 indexed orderBookId,\\n        uint256 openingDate,\\n        uint256 preOpeningDate,\\n        uint256 maturity\\n    );\\n\\n    event OrderBooksRotated(bytes32 ccy, uint256 oldMaturity, uint256 newMaturity);\\n    event EmergencyTerminationExecuted(uint256 timestamp);\\n\\n    event ZCTokenCreated(\\n        bytes32 indexed ccy,\\n        uint256 indexed maturity,\\n        string name,\\n        string symbol,\\n        uint8 decimals,\\n        address tokenAddress\\n    );\\n\\n    function initializeLendingMarket(\\n        bytes32 _ccy,\\n        uint256 _genesisDate,\\n        uint256 _compoundFactor,\\n        uint256 _orderFeeRate,\\n        uint256 _circuitBreakerLimitRange,\\n        uint256 _minDebtUnitPrice\\n    ) external {\\n        if (!AddressResolverLib.currencyController().currencyExists(_ccy)) {\\n            revert InvalidCurrency();\\n        }\\n\\n        if (_compoundFactor == 0) revert InvalidCompoundFactor();\\n\\n        address tokenAddress = AddressResolverLib.tokenVault().getTokenAddress(_ccy);\\n        uint8 tokenDecimals = IERC20Metadata(tokenAddress).decimals();\\n\\n        if (tokenDecimals > COMPOUND_FACTOR_DECIMALS + ZC_TOKEN_BASE_DECIMALS) {\\n            revert TooManyTokenDecimals(tokenAddress, tokenDecimals);\\n        }\\n\\n        AddressResolverLib.genesisValueVault().initializeCurrencySetting(\\n            _ccy,\\n            COMPOUND_FACTOR_DECIMALS + ZC_TOKEN_BASE_DECIMALS - tokenDecimals,\\n            _compoundFactor,\\n            calculateNextMaturity(_genesisDate, Storage.slot().marketBasePeriod)\\n        );\\n\\n        address lendingMarket = AddressResolverLib.beaconProxyController().deployLendingMarket(\\n            _ccy,\\n            _orderFeeRate,\\n            _circuitBreakerLimitRange\\n        );\\n        address futureValueVault = AddressResolverLib\\n            .beaconProxyController()\\n            .deployFutureValueVault();\\n\\n        Storage.slot().genesisDates[_ccy] = _genesisDate;\\n        Storage.slot().lendingMarkets[_ccy] = lendingMarket;\\n        Storage.slot().futureValueVaults[_ccy] = futureValueVault;\\n\\n        updateMinDebtUnitPrice(_ccy, _minDebtUnitPrice);\\n        createZCToken(_ccy, 0, tokenAddress);\\n\\n        emit LendingMarketInitialized(\\n            _ccy,\\n            _genesisDate,\\n            _compoundFactor,\\n            _orderFeeRate,\\n            _circuitBreakerLimitRange,\\n            lendingMarket,\\n            futureValueVault\\n        );\\n    }\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) public {\\n        if (_minDebtUnitPrice > Constants.PRICE_DIGIT) revert InvalidMinDebtUnitPrice();\\n\\n        Storage.slot().minDebtUnitPrices[_ccy] = _minDebtUnitPrice;\\n        emit MinDebtUnitPriceUpdated(_ccy, _minDebtUnitPrice);\\n    }\\n\\n    function createOrderBook(bytes32 _ccy, uint256 _openingDate, uint256 _preOpeningDate) public {\\n        if (!AddressResolverLib.genesisValueVault().isInitialized(_ccy)) {\\n            revert LendingMarketNotInitialized();\\n        }\\n        if (!AddressResolverLib.currencyController().currencyExists(_ccy)) {\\n            revert InvalidCurrency();\\n        }\\n        if (_preOpeningDate > _openingDate) revert InvalidPreOpeningDate();\\n\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n\\n        uint256[] memory maturities = market.getMaturities(Storage.slot().orderBookIdLists[_ccy]);\\n        uint256 newMaturity;\\n\\n        if (maturities.length == 0) {\\n            newMaturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(_ccy);\\n        } else {\\n            uint256 lastMaturity = maturities[maturities.length - 1];\\n            newMaturity = calculateNextMaturity(lastMaturity, Storage.slot().marketBasePeriod);\\n        }\\n\\n        if (_openingDate >= newMaturity) revert InvalidOpeningDate();\\n\\n        uint8 orderBookId = market.createOrderBook(newMaturity, _openingDate, _preOpeningDate);\\n\\n        Storage.slot().orderBookIdLists[_ccy].push(orderBookId);\\n        Storage.slot().maturityOrderBookIds[_ccy][newMaturity] = orderBookId;\\n\\n        address tokenAddress = AddressResolverLib.tokenVault().getTokenAddress(_ccy);\\n        createZCToken(_ccy, newMaturity, tokenAddress);\\n\\n        emit OrderBookCreated(_ccy, orderBookId, _openingDate, _preOpeningDate, newMaturity);\\n    }\\n\\n    function executeItayoseCall(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    )\\n        external\\n        returns (\\n            PartiallyFilledOrder memory partiallyFilledLendingOrder,\\n            PartiallyFilledOrder memory partiallyFilledBorrowingOrder\\n        )\\n    {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n        uint256 openingUnitPrice;\\n        uint256 openingDate;\\n        uint256 totalOffsetAmount;\\n\\n        (\\n            openingUnitPrice,\\n            totalOffsetAmount,\\n            openingDate,\\n            partiallyFilledLendingOrder,\\n            partiallyFilledBorrowingOrder\\n        ) = market.executeItayoseCall(orderBookId);\\n\\n        // Updates the pending order amount for both side orders.\\n        // Since the partially filled orders are updated with `updateFundsForMaker()`,\\n        // their amount is subtracted from `pendingOrderAmounts`.\\n        Storage.slot().pendingOrderAmounts[_ccy][_maturity] +=\\n            (totalOffsetAmount * 2) -\\n            partiallyFilledLendingOrder.amount -\\n            partiallyFilledBorrowingOrder.amount;\\n\\n        // Save the openingUnitPrice as first compound factor\\n        // if it is a first Itayose call at the nearest market.\\n        if (openingUnitPrice > 0 && Storage.slot().orderBookIdLists[_ccy][0] == orderBookId) {\\n            // Convert the openingUnitPrice determined by Itayose to the unit price on the Genesis Date.\\n            uint256 convertedUnitPrice = _convertUnitPrice(\\n                openingUnitPrice,\\n                _maturity,\\n                openingDate,\\n                Storage.slot().genesisDates[_ccy]\\n            );\\n\\n            AddressResolverLib.genesisValueVault().updateInitialCompoundFactor(\\n                _ccy,\\n                convertedUnitPrice\\n            );\\n        }\\n    }\\n\\n    function rotateOrderBooks(bytes32 _ccy) external {\\n        // NOTE: Before the contract upgrade, the ZCToken did not exist, but the upgrade added it.\\n        // This check is to prevent the error that occurs when the ZCToken is not created by the\\n        // `migrateLendingMarket` function. After ZCTokens are added for all currencies and maturities,\\n        // this check can be removed.\\n        if (Storage.slot().zcTokens[_ccy][0] == address(0)) {\\n            revert ZcTokenIsZero();\\n        }\\n\\n        if (!AddressResolverLib.currencyController().currencyExists(_ccy)) {\\n            revert InvalidCurrency();\\n        }\\n\\n        uint8[] storage orderBookIds = Storage.slot().orderBookIdLists[_ccy];\\n\\n        if (orderBookIds.length < 2) revert NotEnoughOrderBooks();\\n\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        uint256[] memory maturities = market.getMaturities(orderBookIds);\\n\\n        uint8 maturedOrderBookId = orderBookIds[0];\\n        uint8 destinationOrderBookId = orderBookIds[1];\\n        uint256 maturedOrderBookMaturity = maturities[0];\\n        uint256 destinationOrderBookMaturity = maturities[1];\\n\\n        uint256 newMaturity = calculateNextMaturity(\\n            maturities[maturities.length - 1],\\n            Storage.slot().marketBasePeriod\\n        );\\n\\n        // Delete the matured order book from the list\\n        for (uint256 i; i < orderBookIds.length - 1; i++) {\\n            orderBookIds[i] = orderBookIds[i + 1];\\n        }\\n        orderBookIds.pop();\\n\\n        uint256 autoRollUnitPrice = _calculateAutoRollUnitPrice(\\n            _ccy,\\n            maturedOrderBookMaturity,\\n            destinationOrderBookMaturity,\\n            destinationOrderBookId,\\n            market\\n        );\\n\\n        market.executeAutoRoll(maturedOrderBookId, destinationOrderBookId, autoRollUnitPrice);\\n\\n        createOrderBook(\\n            _ccy,\\n            destinationOrderBookMaturity,\\n            destinationOrderBookMaturity - PRE_ORDER_BASE_PERIOD\\n        );\\n\\n        AddressResolverLib.genesisValueVault().executeAutoRoll(\\n            _ccy,\\n            maturedOrderBookMaturity,\\n            destinationOrderBookMaturity,\\n            autoRollUnitPrice,\\n            market.getOrderFeeRate()\\n        );\\n\\n        emit OrderBooksRotated(_ccy, maturedOrderBookMaturity, newMaturity);\\n    }\\n\\n    function executeEmergencyTermination() external {\\n        Storage.slot().terminationDate = block.timestamp;\\n\\n        bytes32[] memory currencies = AddressResolverLib.currencyController().getCurrencies();\\n        bytes32[] memory collateralCurrencies = AddressResolverLib\\n            .tokenVault()\\n            .getCollateralCurrencies();\\n\\n        for (uint256 i; i < currencies.length; i++) {\\n            bytes32 ccy = currencies[i];\\n\\n            Storage.slot().terminationCurrencyCaches[ccy] = TerminationCurrencyCache({\\n                price: AddressResolverLib.currencyController().getAggregatedLastPrice(ccy),\\n                decimals: AddressResolverLib.currencyController().getDecimals(ccy)\\n            });\\n        }\\n\\n        for (uint256 i; i < collateralCurrencies.length; i++) {\\n            bytes32 ccy = collateralCurrencies[i];\\n            address tokenAddress = AddressResolverLib.tokenVault().getTokenAddress(ccy);\\n            uint256 balance = IERC20(tokenAddress).balanceOf(\\n                address(AddressResolverLib.tokenVault())\\n            );\\n\\n            Storage.slot().terminationCollateralRatios[ccy] = AddressResolverLib\\n                .currencyController()\\n                .convertToBaseCurrency(ccy, balance);\\n        }\\n\\n        emit EmergencyTerminationExecuted(block.timestamp);\\n    }\\n\\n    function pauseLendingMarket(bytes32 _ccy) public {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        market.pause();\\n    }\\n\\n    function unpauseLendingMarket(bytes32 _ccy) public {\\n        ILendingMarket market = ILendingMarket(Storage.slot().lendingMarkets[_ccy]);\\n        market.unpause();\\n    }\\n\\n    function updateOrderLogs(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _filledAmount,\\n        uint256 _filledFutureValue\\n    ) external {\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n\\n        if (Storage.slot().orderBookIdLists[_ccy][1] == orderBookId) {\\n            uint256 nearestMaturity = ILendingMarket(Storage.slot().lendingMarkets[_ccy])\\n                .getMaturity(Storage.slot().orderBookIdLists[_ccy][0]);\\n\\n            if (\\n                (block.timestamp < nearestMaturity) &&\\n                (block.timestamp >= (nearestMaturity - OBSERVATION_PERIOD))\\n            ) {\\n                Storage.slot().observationPeriodLogs[_ccy][_maturity].totalAmount += _filledAmount;\\n                Storage\\n                .slot()\\n                .observationPeriodLogs[_ccy][_maturity].totalFutureValue += _filledFutureValue;\\n            }\\n        }\\n    }\\n\\n    function migrateLendingMarket(bytes32 _ccy, uint256 _maturity) external {\\n        address tokenAddress = AddressResolverLib.tokenVault().getTokenAddress(_ccy);\\n\\n        if (_maturity == 0) {\\n            uint8 tokenDecimals = IERC20Metadata(tokenAddress).decimals();\\n\\n            if (tokenDecimals > COMPOUND_FACTOR_DECIMALS + ZC_TOKEN_BASE_DECIMALS) {\\n                revert TooManyTokenDecimals(tokenAddress, tokenDecimals);\\n            }\\n\\n            AddressResolverLib.genesisValueVault().updateDecimals(\\n                _ccy,\\n                COMPOUND_FACTOR_DECIMALS + ZC_TOKEN_BASE_DECIMALS - tokenDecimals\\n            );\\n        }\\n\\n        createZCToken(_ccy, _maturity, tokenAddress);\\n    }\\n\\n    function createZCToken(bytes32 _ccy, uint256 _maturity, address _tokenAddress) public {\\n        if (Storage.slot().zcTokens[_ccy][_maturity] != address(0)) {\\n            revert AlreadyZCTokenExists(Storage.slot().zcTokens[_ccy][_maturity]);\\n        }\\n\\n        if (_maturity != 0 && Storage.slot().maturityOrderBookIds[_ccy][_maturity] == 0) {\\n            revert InvalidMaturity(_maturity);\\n        }\\n\\n        string memory tokenSymbol = bytes32ToString(_ccy);\\n\\n        string memory symbol = string.concat(\\\"zc\\\", tokenSymbol);\\n        string memory name = string.concat(\\\"ZC \\\", tokenSymbol);\\n        // NOTE: The amount of genesis value generated gradually decreases as the compound factor increases.\\n        // The values of ZCToken decimals are subtracted by 2 to prevent the display from becoming too small.\\n        // Therefore, if the lending position is 1ETH and the compound factor is 10^18, the amount of ZCToken\\n        // will be 100zcETH.\\n        uint8 decimals = ZC_TOKEN_BASE_DECIMALS - 2;\\n\\n        // If the maturity is 0, the ZCToken is created as a perpetual one.\\n        // Otherwise, the ZCToken is created per maturity.\\n        if (_maturity != 0) {\\n            (uint256 year, uint256 month, ) = TimeLibrary.timestampToDate(_maturity);\\n\\n            string memory formattedMaturity = string.concat(\\n                Strings.toString(year),\\n                \\\"-\\\",\\n                month < 10 ? string.concat(\\\"0\\\", Strings.toString(month)) : Strings.toString(month)\\n            );\\n\\n            symbol = string.concat(symbol, \\\"-\\\", formattedMaturity);\\n            name = string.concat(name, \\\" \\\", _getShortMonthYearString(_maturity));\\n            decimals = IERC20Metadata(_tokenAddress).decimals();\\n        }\\n\\n        address zcToken = AddressResolverLib.beaconProxyController().deployZCToken(\\n            name,\\n            symbol,\\n            decimals,\\n            _tokenAddress,\\n            _maturity\\n        );\\n\\n        Storage.slot().zcTokens[_ccy][_maturity] = zcToken;\\n        Storage.slot().zcTokenInfo[zcToken] = ZCTokenInfo({ccy: _ccy, maturity: _maturity});\\n\\n        emit ZCTokenCreated(_ccy, _maturity, name, symbol, decimals, zcToken);\\n    }\\n\\n    function calculateNextMaturity(\\n        uint256 _timestamp,\\n        uint256 _period\\n    ) public pure returns (uint256) {\\n        if (_period == 0) {\\n            return TimeLibrary.addDays(_timestamp, 7);\\n        } else {\\n            return _getLastFridayAfterMonths(_timestamp, _period);\\n        }\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n        uint256 i = 0;\\n        while (i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n\\n        return string(bytesArray);\\n    }\\n\\n    function _getLastFridayAfterMonths(\\n        uint256 _timestamp,\\n        uint256 _months\\n    ) internal pure returns (uint256 lastFridayTimestamp) {\\n        (uint256 year, uint256 month, ) = TimeLibrary.timestampToDate(\\n            TimeLibrary.addMonths(_timestamp, _months + 1)\\n        );\\n        uint256 thirdMonthEndTimestamp = TimeLibrary.timestampFromDate(year, month, 0);\\n        uint256 dayOfWeek = TimeLibrary.getDayOfWeek(thirdMonthEndTimestamp);\\n        uint256 diff = (dayOfWeek < TimeLibrary.DOW_FRI ? 7 : 0) + dayOfWeek - TimeLibrary.DOW_FRI;\\n        lastFridayTimestamp = TimeLibrary.subDays(thirdMonthEndTimestamp, diff);\\n\\n        if (lastFridayTimestamp == 0) revert InvalidTimestamp();\\n\\n        return lastFridayTimestamp;\\n    }\\n\\n    function _getShortMonthYearString(uint256 timestamp) internal pure returns (string memory) {\\n        (uint256 year, uint256 month, ) = TimeLibrary.timestampToDate(timestamp);\\n        string[12] memory months = [\\n            \\\"JAN\\\",\\n            \\\"FEB\\\",\\n            \\\"MAR\\\",\\n            \\\"APR\\\",\\n            \\\"MAY\\\",\\n            \\\"JUN\\\",\\n            \\\"JUL\\\",\\n            \\\"AUG\\\",\\n            \\\"SEP\\\",\\n            \\\"OCT\\\",\\n            \\\"NOV\\\",\\n            \\\"DEC\\\"\\n        ];\\n        return string(abi.encodePacked(months[month - 1], Strings.toString(year)));\\n    }\\n\\n    function _calculateAutoRollUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _nearestMaturity,\\n        uint256 _destinationMaturity,\\n        uint8 _destinationOrderBookId,\\n        ILendingMarket _market\\n    ) internal view returns (uint256 autoRollUnitPrice) {\\n        ObservationPeriodLog memory log = Storage.slot().observationPeriodLogs[_ccy][\\n            _destinationMaturity\\n        ];\\n\\n        // The auto-roll unit price is calculated based on the volume-weighted average price of orders that are filled\\n        // in the observation period. If there is no order filled in that period, the auto-roll unit price is calculated\\n        // using the last block price. If the last block price is older than the last auto-roll date,\\n        // the last auto-roll unit price is reused as the current auto-roll unit price.\\n        if (log.totalFutureValue != 0) {\\n            autoRollUnitPrice = (log.totalAmount * Constants.PRICE_DIGIT).div(log.totalFutureValue);\\n        } else {\\n            (uint256[] memory unitPrices, uint48 timestamp) = _market.getBlockUnitPriceHistory(\\n                _destinationOrderBookId\\n            );\\n\\n            AutoRollLog memory autoRollLog = AddressResolverLib\\n                .genesisValueVault()\\n                .getLatestAutoRollLog(_ccy);\\n\\n            if (unitPrices[0] != 0 && timestamp >= autoRollLog.prev) {\\n                autoRollUnitPrice = _convertUnitPrice(\\n                    unitPrices[0],\\n                    _destinationMaturity,\\n                    timestamp,\\n                    _nearestMaturity\\n                );\\n            } else {\\n                autoRollUnitPrice = autoRollLog.unitPrice;\\n            }\\n        }\\n    }\\n\\n    function _convertUnitPrice(\\n        uint256 _unitPrice,\\n        uint256 _maturity,\\n        uint256 _currentTimestamp,\\n        uint256 _destinationTimestamp\\n    ) internal pure returns (uint256) {\\n        // NOTE:The formula is:\\n        // 1) currentDuration = maturity - currentTimestamp\\n        // 2) destinationDuration = maturity - destinationTimestamp\\n        // 3) unitPrice = (currentUnitPrice * currentDuration)\\n        //      / ((1 - currentUnitPrice) * destinationDuration + currentUnitPrice * currentDuration)\\n\\n        uint256 currentDuration = _maturity - _currentTimestamp;\\n        uint256 destinationDuration = _maturity - _destinationTimestamp;\\n        return\\n            (Constants.PRICE_DIGIT * _unitPrice * currentDuration) /\\n            (((Constants.PRICE_DIGIT - _unitPrice) * destinationDuration) +\\n                (_unitPrice * currentDuration));\\n    }\\n}\\n\",\"keccak256\":\"0x30f54d6534ccb4cb1ba133ea4c60ec7b0a950d9906daab68d5f1789c9515fb1e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logics/LendingMarketUserLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {ILendingMarket} from \\\"../../interfaces/ILendingMarket.sol\\\";\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\nimport {IZCToken} from \\\"../../interfaces/IZCToken.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {FilledOrder, PartiallyFilledOrder} from \\\"../OrderBookLib.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\nimport {LendingMarketOperationLogic} from \\\"./LendingMarketOperationLogic.sol\\\";\\nimport {FundManagementLogic} from \\\"./FundManagementLogic.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"../../types/ProtocolTypes.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary LendingMarketUserLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeCast for int256;\\n    using SafeCast for uint256;\\n    using RoundingUint256 for uint256;\\n\\n    error InvalidAmount();\\n    error AmountIsZero();\\n    error FutureValueIsZero();\\n    error TooManyActiveOrders();\\n    error NotEnoughCollateral();\\n    error NotEnoughDeposit(bytes32 ccy);\\n\\n    struct EstimateCollateralCoverageParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n        uint256 filledAmount;\\n        uint256 filledAmountInFV;\\n        uint256 orderFeeInFV;\\n        uint256 placedAmount;\\n    }\\n\\n    function getOrderEstimation(\\n        ILendingMarketController.GetOrderEstimationParams memory input\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        )\\n    {\\n        (\\n            lastUnitPrice,\\n            filledAmount,\\n            filledAmountInFV,\\n            orderFeeInFV,\\n            placedAmount\\n        ) = _calculateFilledAmount(\\n            input.ccy,\\n            input.maturity,\\n            input.side,\\n            input.amount,\\n            input.unitPrice\\n        );\\n\\n        (coverage, isInsufficientDepositAmount) = _estimateCollateralCoverage(\\n            EstimateCollateralCoverageParams(\\n                input.ccy,\\n                input.maturity,\\n                input.user,\\n                input.side,\\n                input.unitPrice,\\n                input.additionalDepositAmount,\\n                input.ignoreBorrowedAmount,\\n                filledAmount,\\n                filledAmountInFV,\\n                orderFeeInFV,\\n                placedAmount\\n            )\\n        );\\n    }\\n\\n    function executeOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external {\\n        if (_amount == 0) revert InvalidAmount();\\n\\n        uint256 activeOrderCount = FundManagementLogic.cleanUpFunds(_ccy, _user);\\n        FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n\\n        (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV\\n        ) = ILendingMarket(Storage.slot().lendingMarkets[_ccy]).executeOrder(\\n                Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n                _side,\\n                _user,\\n                _amount,\\n                _unitPrice\\n            );\\n\\n        uint256 filledAmount = filledOrder.amount;\\n\\n        // The case that an order is placed in the order book\\n        if ((filledAmount + filledOrder.ignoredAmount) != _amount) {\\n            unchecked {\\n                activeOrderCount += 1;\\n            }\\n        }\\n\\n        if (activeOrderCount > Constants.MAXIMUM_ORDER_COUNT) revert TooManyActiveOrders();\\n\\n        updateFundsForTaker(\\n            _ccy,\\n            _maturity,\\n            _user,\\n            _side,\\n            filledAmount,\\n            filledOrder.futureValue,\\n            feeInFV\\n        );\\n\\n        updateFundsForMaker(\\n            _ccy,\\n            _maturity,\\n            _side == ProtocolTypes.Side.LEND ? ProtocolTypes.Side.BORROW : ProtocolTypes.Side.LEND,\\n            partiallyFilledOrder\\n        );\\n\\n        // Updates the pending order amount for marker's orders.\\n        // Since the partially filled order is updated with `updateFundsForMaker()`,\\n        // its amount is subtracted from `pendingOrderAmounts`.\\n        Storage.slot().pendingOrderAmounts[_ccy][_maturity] +=\\n            filledAmount -\\n            partiallyFilledOrder.amount;\\n\\n        Storage.slot().usedCurrencies[_user].add(_ccy);\\n\\n        _isCovered(_user, _ccy);\\n    }\\n\\n    function executePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) external {\\n        if (_amount == 0) revert InvalidAmount();\\n\\n        uint256 activeOrderCount = FundManagementLogic.cleanUpFunds(_ccy, _user);\\n\\n        if (activeOrderCount + 1 > Constants.MAXIMUM_ORDER_COUNT) revert TooManyActiveOrders();\\n\\n        FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n\\n        ILendingMarket(Storage.slot().lendingMarkets[_ccy]).executePreOrder(\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n            _side,\\n            _user,\\n            _amount,\\n            _unitPrice\\n        );\\n\\n        Storage.slot().usedCurrencies[_user].add(_ccy);\\n\\n        _isCovered(_user, _ccy);\\n    }\\n\\n    function unwindPosition(bytes32 _ccy, uint256 _maturity, address _user) external {\\n        FundManagementLogic.cleanUpFunds(_ccy, _user);\\n\\n        int256 futureValue = FundManagementLogic\\n            .getActualFunds(_ccy, _maturity, _user, 0)\\n            .futureValue;\\n\\n        (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV,\\n            ProtocolTypes.Side side\\n        ) = _unwindPosition(_ccy, _maturity, _user, futureValue);\\n\\n        updateFundsForTaker(\\n            _ccy,\\n            _maturity,\\n            _user,\\n            side,\\n            filledOrder.amount,\\n            filledOrder.futureValue,\\n            feeInFV\\n        );\\n\\n        updateFundsForMaker(\\n            _ccy,\\n            _maturity,\\n            side == ProtocolTypes.Side.LEND ? ProtocolTypes.Side.BORROW : ProtocolTypes.Side.LEND,\\n            partiallyFilledOrder\\n        );\\n\\n        // Updates the pending order amount for marker's orders.\\n        // Since the partially filled order is updated with `updateFundsForMaker()`,\\n        // its amount is subtracted from `pendingOrderAmounts`.\\n        Storage.slot().pendingOrderAmounts[_ccy][_maturity] +=\\n            filledOrder.amount -\\n            partiallyFilledOrder.amount;\\n\\n        // When the market is the nearest market and the user has only GV, a user still has future value after unwinding.\\n        // For that case, the `registerCurrencyAndMaturity` function needs to be called again.\\n        (int256 currentFutureValue, ) = IFutureValueVault(Storage.slot().futureValueVaults[_ccy])\\n            .getBalance(Storage.slot().maturityOrderBookIds[_ccy][_maturity], _user);\\n\\n        if (currentFutureValue != 0) {\\n            FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n        }\\n\\n        _isCovered(_user, _ccy);\\n    }\\n\\n    function updateFundsForTaker(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        ProtocolTypes.Side _side,\\n        uint256 _filledAmount,\\n        uint256 _filledAmountInFV,\\n        uint256 _feeInFV\\n    ) public {\\n        if (_filledAmountInFV != 0) {\\n            FundManagementLogic.updateFunds(\\n                _ccy,\\n                _maturity,\\n                _user,\\n                _side,\\n                _filledAmount,\\n                _filledAmountInFV,\\n                _feeInFV\\n            );\\n\\n            LendingMarketOperationLogic.updateOrderLogs(\\n                _ccy,\\n                _maturity,\\n                _filledAmount,\\n                _filledAmountInFV\\n            );\\n\\n            emit FundManagementLogic.OrderFilled(\\n                _user,\\n                _ccy,\\n                _side,\\n                _maturity,\\n                _filledAmount,\\n                _filledAmountInFV,\\n                _feeInFV\\n            );\\n        }\\n    }\\n\\n    function updateFundsForMaker(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        PartiallyFilledOrder memory partiallyFilledOrder\\n    ) public {\\n        if (partiallyFilledOrder.futureValue != 0) {\\n            FundManagementLogic.updateFunds(\\n                _ccy,\\n                _maturity,\\n                partiallyFilledOrder.maker,\\n                _side,\\n                partiallyFilledOrder.amount,\\n                partiallyFilledOrder.futureValue,\\n                0\\n            );\\n\\n            emit FundManagementLogic.OrderPartiallyFilled(\\n                partiallyFilledOrder.orderId,\\n                partiallyFilledOrder.maker,\\n                _ccy,\\n                _side,\\n                _maturity,\\n                partiallyFilledOrder.amount,\\n                partiallyFilledOrder.futureValue\\n            );\\n        }\\n    }\\n\\n    function withdrawZCToken(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        uint256 _amount\\n    ) public {\\n        FundManagementLogic.cleanUpFunds(_ccy, _user);\\n\\n        if (_maturity == 0) {\\n            _withdrawZCPerpetualToken(_ccy, _user, _amount);\\n        } else {\\n            _withdrawZCToken(_ccy, _maturity, _user, _amount);\\n        }\\n    }\\n\\n    function depositZCToken(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        uint256 _amount\\n    ) public {\\n        FundManagementLogic.cleanUpFunds(_ccy, _user);\\n\\n        if (_maturity == 0) {\\n            _depositZCPerpetualToken(_ccy, _user, _amount);\\n        } else {\\n            _depositZCToken(_ccy, _maturity, _user, _amount);\\n        }\\n\\n        FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _user);\\n    }\\n\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) public view returns (uint256 amount) {\\n        if (_maturity == 0) {\\n            return _getWithdrawableZCPerpetualTokenAmount(_ccy, _user);\\n        } else {\\n            return _getWithdrawableZCTokenAmount(_ccy, _maturity, _user);\\n        }\\n    }\\n\\n    function _calculateFilledAmount(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount\\n        )\\n    {\\n        (\\n            lastUnitPrice,\\n            filledAmount,\\n            filledAmountInFV,\\n            orderFeeInFV,\\n            placedAmount\\n        ) = ILendingMarket(Storage.slot().lendingMarkets[_ccy]).calculateFilledAmount(\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n            _side,\\n            _amount,\\n            _unitPrice\\n        );\\n    }\\n\\n    function _estimateCollateralCoverage(\\n        EstimateCollateralCoverageParams memory _params\\n    ) internal view returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        uint256 filledAmountWithFeeInFV = _params.filledAmountInFV;\\n\\n        if (_params.side == ProtocolTypes.Side.LEND) {\\n            filledAmountWithFeeInFV -= _params.orderFeeInFV;\\n        } else {\\n            filledAmountWithFeeInFV += _params.orderFeeInFV;\\n        }\\n\\n        uint256 filledAmountWithFeeInPV = _estimatePVFromFV(\\n            _params.ccy,\\n            _params.maturity,\\n            filledAmountWithFeeInFV,\\n            _params.unitPrice\\n        );\\n\\n        ILendingMarketController.AdditionalFunds memory funds;\\n        funds.ccy = _params.ccy;\\n        // Store the _additionalDepositAmount in the borrowedAmount,\\n        // because the borrowedAmount is used as collateral.\\n        funds.borrowedAmount = _params.additionalDepositAmount;\\n\\n        if (_params.placedAmount != 0) {\\n            if (_params.side == ProtocolTypes.Side.BORROW) {\\n                uint256 minUnitPrice = FundManagementLogic.getCurrentMinDebtUnitPrice(\\n                    _params.maturity,\\n                    Storage.slot().minDebtUnitPrices[_params.ccy]\\n                );\\n\\n                if (_params.unitPrice >= minUnitPrice) {\\n                    funds.workingBorrowOrdersAmount = _params.placedAmount;\\n                } else {\\n                    // NOTE: The formula is:\\n                    // futureValue = placedAmount / unitPrice\\n                    // workingBorrowOrdersAmount = futureValue * minUnitPrice\\n                    funds.workingBorrowOrdersAmount = (_params.placedAmount * minUnitPrice).div(\\n                        _params.unitPrice\\n                    );\\n                }\\n            } else {\\n                funds.workingLendOrdersAmount = _params.placedAmount;\\n            }\\n        }\\n\\n        if (filledAmountWithFeeInPV > 0) {\\n            if (_params.side == ProtocolTypes.Side.BORROW) {\\n                if (!_params.ignoreBorrowedAmount) {\\n                    funds.borrowedAmount += _params.filledAmount;\\n                }\\n                funds.debtAmount += filledAmountWithFeeInPV;\\n            } else {\\n                funds.lentAmount += _params.filledAmount;\\n                funds.claimableAmount += filledAmountWithFeeInPV;\\n            }\\n        }\\n\\n        (coverage, isInsufficientDepositAmount) = AddressResolverLib.tokenVault().calculateCoverage(\\n            _params.user,\\n            funds\\n        );\\n    }\\n\\n    function _estimatePVFromFV(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        uint256 _amount,\\n        uint256 _unitPrice\\n    ) internal view returns (uint256) {\\n        uint256 marketUnitPrice = ILendingMarket(Storage.slot().lendingMarkets[_ccy])\\n            .getMarketUnitPrice(Storage.slot().maturityOrderBookIds[_ccy][_maturity]);\\n\\n        if (marketUnitPrice == 0) {\\n            marketUnitPrice = _unitPrice;\\n        }\\n\\n        return (_amount * marketUnitPrice).div(Constants.PRICE_DIGIT);\\n    }\\n\\n    function _unwindPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _futureValue\\n    )\\n        internal\\n        returns (\\n            FilledOrder memory filledOrder,\\n            PartiallyFilledOrder memory partiallyFilledOrder,\\n            uint256 feeInFV,\\n            ProtocolTypes.Side side\\n        )\\n    {\\n        if (_futureValue == 0) revert FutureValueIsZero();\\n\\n        if (_futureValue > 0) {\\n            side = ProtocolTypes.Side.BORROW;\\n\\n            (filledOrder, partiallyFilledOrder, feeInFV) = ILendingMarket(\\n                Storage.slot().lendingMarkets[_ccy]\\n            ).unwindPosition(\\n                    Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n                    side,\\n                    _user,\\n                    _futureValue.toUint256()\\n                );\\n        } else if (_futureValue < 0) {\\n            side = ProtocolTypes.Side.LEND;\\n\\n            (filledOrder, partiallyFilledOrder, feeInFV) = ILendingMarket(\\n                Storage.slot().lendingMarkets[_ccy]\\n            ).unwindPosition(\\n                    Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n                    side,\\n                    _user,\\n                    (-_futureValue).toUint256()\\n                );\\n        }\\n    }\\n\\n    function _withdrawZCToken(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n        uint256 maxWithdrawableAmount = _getWithdrawableZCTokenAmount(_ccy, _maturity, _user);\\n\\n        if (maxWithdrawableAmount < _amount) {\\n            _amount = maxWithdrawableAmount;\\n        }\\n\\n        if (_amount == 0) revert AmountIsZero();\\n\\n        uint256 lockedAmount = IFutureValueVault(Storage.slot().futureValueVaults[_ccy]).lock(\\n            orderBookId,\\n            _user,\\n            _amount,\\n            _maturity\\n        );\\n        IZCToken(Storage.slot().zcTokens[_ccy][_maturity]).mint(_user, lockedAmount);\\n    }\\n\\n    function _depositZCToken(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        uint256 _amount\\n    ) internal {\\n        IZCToken token = IZCToken(Storage.slot().zcTokens[_ccy][_maturity]);\\n        uint256 balance = token.balanceOf(_user);\\n\\n        if (balance == 0) {\\n            revert AmountIsZero();\\n        }\\n\\n        if (balance < _amount) {\\n            _amount = balance;\\n        }\\n\\n        token.burn(_user, _amount);\\n        IFutureValueVault(Storage.slot().futureValueVaults[_ccy]).unlock(\\n            Storage.slot().maturityOrderBookIds[_ccy][_maturity],\\n            _user,\\n            _amount,\\n            _maturity\\n        );\\n    }\\n\\n    function _withdrawZCPerpetualToken(bytes32 _ccy, address _user, uint256 _amount) internal {\\n        uint256 maxWithdrawableAmount = _getWithdrawableZCPerpetualTokenAmount(_ccy, _user);\\n\\n        if (maxWithdrawableAmount < _amount) {\\n            _amount = maxWithdrawableAmount;\\n        }\\n\\n        if (_amount == 0) revert AmountIsZero();\\n\\n        uint256 lockedAmount = AddressResolverLib.genesisValueVault().lock(_ccy, _user, _amount);\\n        IZCToken(Storage.slot().zcTokens[_ccy][0]).mint(_user, lockedAmount);\\n    }\\n\\n    function _depositZCPerpetualToken(bytes32 _ccy, address _user, uint256 _amount) internal {\\n        IZCToken token = IZCToken(Storage.slot().zcTokens[_ccy][0]);\\n        uint256 balance = token.balanceOf(_user);\\n\\n        if (balance == 0) {\\n            revert AmountIsZero();\\n        }\\n\\n        if (balance < _amount) {\\n            _amount = balance;\\n        }\\n\\n        token.burn(_user, _amount);\\n        AddressResolverLib.genesisValueVault().unlock(_ccy, _user, _amount);\\n    }\\n\\n    function _getWithdrawableZCTokenAmount(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) internal view returns (uint256 amount) {\\n        (uint256 withdrawableAmount, bool hasAllocatedCollateral) = _getWithdrawableAmount(\\n            _ccy,\\n            _user\\n        );\\n\\n        FundManagementLogic.ActualFunds memory funds = FundManagementLogic.getActualFunds(\\n            _ccy,\\n            _maturity,\\n            _user,\\n            0\\n        );\\n        int256 presentValue = funds.presentValue - funds.genesisValueInPV;\\n        int256 futureValue = funds.futureValue - funds.genesisValueInFV;\\n\\n        if (futureValue <= 0) {\\n            return 0;\\n        } else if (!hasAllocatedCollateral || withdrawableAmount >= presentValue.toUint256()) {\\n            return futureValue.toUint256();\\n        } else {\\n            return FundManagementLogic.calculateFVFromPV(_ccy, _maturity, withdrawableAmount);\\n        }\\n    }\\n\\n    function _getWithdrawableZCPerpetualTokenAmount(\\n        bytes32 _ccy,\\n        address _user\\n    ) internal view returns (uint256 amount) {\\n        (uint256 withdrawableAmount, bool hasAllocatedCollateral) = _getWithdrawableAmount(\\n            _ccy,\\n            _user\\n        );\\n\\n        FundManagementLogic.ActualFunds memory funds = FundManagementLogic.getActualFunds(\\n            _ccy,\\n            0,\\n            _user,\\n            0\\n        );\\n\\n        if (funds.genesisValue <= 0) {\\n            return 0;\\n        } else if (\\n            !hasAllocatedCollateral || withdrawableAmount >= funds.genesisValueInPV.toUint256()\\n        ) {\\n            return funds.genesisValue.toUint256();\\n        } else {\\n            int256 withdrawableAmountInFV = FundManagementLogic.calculateFVFromPV(\\n                _ccy,\\n                AddressResolverLib.genesisValueVault().getCurrentMaturity(_ccy),\\n                withdrawableAmount.toInt256()\\n            );\\n\\n            return\\n                AddressResolverLib\\n                    .genesisValueVault()\\n                    .calculateGVFromFV(_ccy, 0, withdrawableAmountInFV)\\n                    .toUint256();\\n        }\\n    }\\n\\n    function _getWithdrawableAmount(\\n        bytes32 _ccy,\\n        address _user\\n    ) internal view returns (uint256 withdrawableAmount, bool hasAllocatedCollateral) {\\n        ILendingMarketController.AdditionalFunds memory emptyAdditionalFunds;\\n        uint256 liquidationThresholdRate = AddressResolverLib\\n            .tokenVault()\\n            .getLiquidationThresholdRate();\\n        ILendingMarketController.CalculatedFunds memory funds = FundManagementLogic.calculateFunds(\\n            _ccy,\\n            _user,\\n            emptyAdditionalFunds,\\n            liquidationThresholdRate\\n        );\\n\\n        uint256[] memory amounts = new uint256[](2);\\n        (amounts[0], amounts[1], ) = AddressResolverLib.tokenVault().getCollateralDetail(_user);\\n        amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(_ccy, amounts);\\n\\n        uint256 totalCollateral = amounts[0];\\n        uint256 totalUsedCollateral = amounts[1];\\n\\n        if (totalUsedCollateral == 0) {\\n            return (totalCollateral, false);\\n        }\\n\\n        uint256 haircut = AddressResolverLib.currencyController().getHaircut(_ccy);\\n        uint256 discountedUnallocatedCollateralAmount = (funds.unallocatedCollateralAmount *\\n            haircut).div(Constants.PCT_DIGIT);\\n\\n        uint256 availableAmount = (totalCollateral *\\n            Constants.PCT_DIGIT -\\n            totalUsedCollateral *\\n            liquidationThresholdRate).div(Constants.PCT_DIGIT);\\n\\n        if (haircut != 0 && funds.unallocatedCollateralAmount != 0) {\\n            uint256 allocatedAmount = funds.claimableAmount - funds.unallocatedCollateralAmount;\\n\\n            if (availableAmount <= discountedUnallocatedCollateralAmount) {\\n                return ((availableAmount * Constants.PCT_DIGIT).div(haircut), true);\\n            } else if (availableAmount <= discountedUnallocatedCollateralAmount + allocatedAmount) {\\n                // If the available amount is insufficient, unallocated collateral, which is discounted by a haircut and used between different currencies,\\n                // is used first. Then, the allocated collateral, which is used to offset positions in the same currency, is used for the rest of the amount.\\n                // NOTE: The formula is:\\n                // allocatedCollateralAmount = availableAmount - discountedUnallocatedCollateralAmount\\n                // totalWithdrawableAmount = allocatedCollateralAmount + unallocatedCollateralAmount\\n                return (\\n                    funds.unallocatedCollateralAmount +\\n                        availableAmount -\\n                        discountedUnallocatedCollateralAmount,\\n                    true\\n                );\\n            } else {\\n                return (availableAmount, true);\\n            }\\n        } else {\\n            return (availableAmount, funds.unallocatedCollateralAmount != 0);\\n        }\\n    }\\n\\n    function _isCovered(address _user, bytes32 _ccy) internal view {\\n        (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy) = AddressResolverLib\\n            .tokenVault()\\n            .isCovered(_user, _ccy);\\n\\n        if (!isEnoughDepositInOrderCcy) revert NotEnoughDeposit(_ccy);\\n        if (!isEnoughCollateral) revert NotEnoughCollateral();\\n    }\\n}\\n\",\"keccak256\":\"0x25e725055af19a202be8f03ca781d3544c2690a4cd10a8438d37d78e699e38ca\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logics/LiquidationLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {IFutureValueVault} from \\\"../../interfaces/IFutureValueVault.sol\\\";\\nimport {ILiquidationReceiver} from \\\"../../interfaces/ILiquidationReceiver.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {FundManagementLogic} from \\\"./FundManagementLogic.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../../storages/LendingMarketControllerStorage.sol\\\";\\n\\nlibrary LiquidationLogic {\\n    using RoundingUint256 for uint256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    error NoDebt(address user, bytes32 ccy, uint256 maturity);\\n    error NoLiquidationAmount(address user, bytes32 ccy);\\n    error InvalidLiquidation();\\n    error InvalidCurrency(bytes32 ccy);\\n    error NotRepaymentPeriod();\\n\\n    struct ExecuteLiquidationVars {\\n        uint256 liquidationAmountInCollateralCcy;\\n        uint256 liquidationAmountInDebtCcy;\\n        uint256 protocolFeeInCollateralCcy;\\n        uint256 liquidatorFeeInCollateralCcy;\\n        bool isDefaultMarket;\\n        uint256 receivedCollateralAmount;\\n    }\\n\\n    event LiquidationExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 debtAmount\\n    );\\n\\n    event ForcedRepaymentExecuted(\\n        address indexed user,\\n        bytes32 collateralCcy,\\n        bytes32 indexed debtCcy,\\n        uint256 indexed debtMaturity,\\n        uint256 debtAmount\\n    );\\n\\n    function executeLiquidation(\\n        address _liquidator,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity\\n    ) external {\\n        if (!AddressResolverLib.currencyController().currencyExists(_collateralCcy)) {\\n            revert InvalidCurrency(_collateralCcy);\\n        }\\n\\n        ExecuteLiquidationVars memory vars;\\n\\n        vars.isDefaultMarket =\\n            Storage.slot().maturityOrderBookIds[_debtCcy][_debtMaturity] ==\\n            Storage.slot().orderBookIdLists[_debtCcy][0];\\n\\n        // In order to liquidate using user collateral, inactive order IDs must be cleaned\\n        // and converted to actual funds first.\\n        FundManagementLogic.cleanUpFunds(_collateralCcy, _user);\\n        FundManagementLogic.cleanUpFunds(_debtCcy, _user);\\n\\n        uint256 debtAmount = FundManagementLogic\\n            .getActualFunds(_debtCcy, _debtMaturity, _user, 0)\\n            .debtAmount;\\n\\n        if (debtAmount == 0) revert NoDebt(_user, _debtCcy, _debtMaturity);\\n\\n        (\\n            vars.liquidationAmountInCollateralCcy,\\n            vars.protocolFeeInCollateralCcy,\\n            vars.liquidatorFeeInCollateralCcy\\n        ) = AddressResolverLib.tokenVault().getLiquidationAmount(\\n            _user,\\n            _collateralCcy,\\n            AddressResolverLib.currencyController().convert(_debtCcy, _collateralCcy, debtAmount)\\n        );\\n\\n        if (vars.liquidationAmountInCollateralCcy == 0) {\\n            revert NoLiquidationAmount(_user, _collateralCcy);\\n        }\\n\\n        vars.liquidationAmountInDebtCcy = AddressResolverLib.currencyController().convert(\\n            _collateralCcy,\\n            _debtCcy,\\n            vars.liquidationAmountInCollateralCcy\\n        );\\n\\n        // Transfer collateral from users to liquidators and reserve funds.\\n        vars.receivedCollateralAmount =\\n            vars.liquidationAmountInCollateralCcy +\\n            vars.liquidatorFeeInCollateralCcy;\\n\\n        uint256 untransferredAmount = _transferCollateral(\\n            _user,\\n            _liquidator,\\n            _collateralCcy,\\n            vars.receivedCollateralAmount\\n        );\\n\\n        if (untransferredAmount == 0) {\\n            _transferCollateral(\\n                _user,\\n                address(AddressResolverLib.reserveFund()),\\n                _collateralCcy,\\n                vars.protocolFeeInCollateralCcy\\n            );\\n        } else if (untransferredAmount > 0) {\\n            (\\n                uint256 untransferredAmountInDebtCcy,\\n                uint256 receivedCollateralAmountInDebtCcy,\\n                uint256 liquidatorFeeInDebtCcy\\n            ) = _convertLiquidationAmounts(\\n                    _collateralCcy,\\n                    _debtCcy,\\n                    untransferredAmount,\\n                    vars.receivedCollateralAmount,\\n                    vars.liquidatorFeeInCollateralCcy\\n                );\\n\\n            // Use reserve funds to cover insolvent amounts if user does not have collateral in other currencies.\\n            if (\\n                !AddressResolverLib.reserveFund().isPaused() &&\\n                AddressResolverLib.tokenVault().getTotalCollateralAmount(_user) == 0\\n            ) {\\n                untransferredAmountInDebtCcy = _transferPositionsPerMaturity(\\n                    address(AddressResolverLib.reserveFund()),\\n                    _liquidator,\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    untransferredAmountInDebtCcy.toInt256(),\\n                    vars.isDefaultMarket\\n                ).toUint256();\\n            }\\n\\n            // Adjust the liquidation amount for debt.\\n            vars.liquidationAmountInDebtCcy = _calculateTransferredAmount(\\n                receivedCollateralAmountInDebtCcy,\\n                untransferredAmountInDebtCcy,\\n                liquidatorFeeInDebtCcy\\n            );\\n        }\\n\\n        if (_liquidator.code.length > 0) {\\n            if (\\n                ILiquidationReceiver(_liquidator).executeOperationForCollateral(\\n                    _liquidator,\\n                    _user,\\n                    _collateralCcy,\\n                    vars.receivedCollateralAmount - untransferredAmount\\n                ) == false\\n            ) revert ILiquidationReceiver.InvalidOperationExecution();\\n        }\\n\\n        // Transfer the debt from users to liquidators\\n        if (vars.liquidationAmountInDebtCcy > 0) {\\n            _transferPositionsPerMaturity(\\n                _user,\\n                _liquidator,\\n                _debtCcy,\\n                _debtMaturity,\\n                -vars.liquidationAmountInDebtCcy.toInt256(),\\n                vars.isDefaultMarket\\n            );\\n\\n            if (_liquidator.code.length > 0) {\\n                if (\\n                    ILiquidationReceiver(_liquidator).executeOperationForDebt(\\n                        _liquidator,\\n                        _user,\\n                        _collateralCcy,\\n                        vars.receivedCollateralAmount - untransferredAmount,\\n                        _debtCcy,\\n                        _debtMaturity,\\n                        vars.liquidationAmountInDebtCcy\\n                    ) == false\\n                ) revert ILiquidationReceiver.InvalidOperationExecution();\\n            }\\n        }\\n\\n        (bool isEnoughCollateral, ) = AddressResolverLib.tokenVault().isCovered(\\n            _liquidator,\\n            bytes32(0)\\n        );\\n        if (!isEnoughCollateral) revert InvalidLiquidation();\\n\\n        emit LiquidationExecuted(\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            vars.liquidationAmountInDebtCcy\\n        );\\n    }\\n\\n    function executeForcedRepayment(\\n        address _executor,\\n        address _user,\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity\\n    ) external {\\n        if (\\n            AddressResolverLib.currencyController().currencyExists(_debtCcy) ||\\n            block.timestamp < _debtMaturity + 1 weeks\\n        ) {\\n            revert NotRepaymentPeriod();\\n        }\\n\\n        if (!AddressResolverLib.currencyController().currencyExists(_collateralCcy)) {\\n            revert InvalidCurrency(_collateralCcy);\\n        }\\n\\n        // In order to liquidate using user collateral, inactive order IDs must be cleaned\\n        // and converted to actual funds first.\\n        FundManagementLogic.cleanUpFunds(_collateralCcy, _user);\\n        FundManagementLogic.cleanUpFunds(_debtCcy, _user);\\n\\n        FundManagementLogic.ActualFunds memory funds = FundManagementLogic.getActualFunds(\\n            _debtCcy,\\n            _debtMaturity,\\n            _user,\\n            0\\n        );\\n\\n        if (funds.futureValue >= 0) revert NoDebt(_user, _debtCcy, _debtMaturity);\\n\\n        uint256 liquidationAmountInDebtCcy = (-funds.futureValue).toUint256();\\n        uint256 liquidationAmountInCollateralCcy = AddressResolverLib.currencyController().convert(\\n            _debtCcy,\\n            _collateralCcy,\\n            liquidationAmountInDebtCcy\\n        );\\n\\n        (\\n            uint256 protocolFeeInCollateralCcy,\\n            uint256 liquidatorFeeInCollateralCcy\\n        ) = AddressResolverLib.tokenVault().calculateLiquidationFees(\\n                liquidationAmountInCollateralCcy\\n            );\\n\\n        uint256 receivedCollateralAmount = liquidationAmountInCollateralCcy +\\n            liquidatorFeeInCollateralCcy;\\n\\n        uint256 untransferredAmount = _transferCollateral(\\n            _user,\\n            _executor,\\n            _collateralCcy,\\n            receivedCollateralAmount\\n        );\\n\\n        if (untransferredAmount == 0) {\\n            _transferCollateral(\\n                _user,\\n                address(AddressResolverLib.reserveFund()),\\n                _collateralCcy,\\n                protocolFeeInCollateralCcy\\n            );\\n        } else {\\n            (\\n                uint256 untransferredAmountInDebtCcy,\\n                uint256 receivedCollateralAmountInDebtCcy,\\n                uint256 liquidatorFeeInDebtCcy\\n            ) = _convertLiquidationAmounts(\\n                    _collateralCcy,\\n                    _debtCcy,\\n                    untransferredAmount,\\n                    receivedCollateralAmount,\\n                    liquidatorFeeInCollateralCcy\\n                );\\n\\n            // Adjust the liquidation amount for debt.\\n            liquidationAmountInDebtCcy = _calculateTransferredAmount(\\n                receivedCollateralAmountInDebtCcy,\\n                untransferredAmountInDebtCcy,\\n                liquidatorFeeInDebtCcy\\n            );\\n        }\\n\\n        if (_executor.code.length > 0) {\\n            if (\\n                ILiquidationReceiver(_executor).executeOperationForCollateral(\\n                    _executor,\\n                    _user,\\n                    _collateralCcy,\\n                    receivedCollateralAmount - untransferredAmount\\n                ) == false\\n            ) revert ILiquidationReceiver.InvalidOperationExecution();\\n\\n            if (\\n                ILiquidationReceiver(_executor).executeOperationForDebt(\\n                    _executor,\\n                    _user,\\n                    _collateralCcy,\\n                    receivedCollateralAmount - untransferredAmount,\\n                    _debtCcy,\\n                    _debtMaturity,\\n                    liquidationAmountInDebtCcy\\n                ) == false\\n            ) revert ILiquidationReceiver.InvalidOperationExecution();\\n        }\\n\\n        AddressResolverLib.tokenVault().transferFrom(\\n            _debtCcy,\\n            _executor,\\n            _user,\\n            liquidationAmountInDebtCcy\\n        );\\n\\n        uint256 repaymentAmount = FundManagementLogic.executeRepayment(\\n            _debtCcy,\\n            _debtMaturity,\\n            _user,\\n            liquidationAmountInDebtCcy\\n        );\\n\\n        emit ForcedRepaymentExecuted(\\n            _user,\\n            _collateralCcy,\\n            _debtCcy,\\n            _debtMaturity,\\n            repaymentAmount\\n        );\\n    }\\n\\n    function _transferCollateral(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) internal returns (uint256 untransferredAmount) {\\n        untransferredAmount = AddressResolverLib.tokenVault().transferFrom(\\n            _ccy,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n\\n        // If `untransferredAmount` is not 0, the user has not enough deposit in the collateral currency.\\n        // Therefore, the liquidators and the reserve fund obtain zero-coupon bonds instead of the user's collateral.\\n        if (untransferredAmount > 0) {\\n            untransferredAmount = _transferPositionsPerCurrency(\\n                _from,\\n                _to,\\n                _ccy,\\n                untransferredAmount.toInt256()\\n            ).toUint256();\\n        }\\n    }\\n\\n    function _transferPositionsPerCurrency(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) internal returns (int256 untransferredAmount) {\\n        untransferredAmount = _transferGenesisValue(_from, _to, _ccy, _amount);\\n\\n        uint256[] memory maturities = FundManagementLogic.getUsedMaturities(_ccy, _from);\\n\\n        for (uint256 i; i < maturities.length; i++) {\\n            if (untransferredAmount == 0) {\\n                break;\\n            }\\n\\n            untransferredAmount = _transferFutureValues(\\n                _from,\\n                _to,\\n                _ccy,\\n                maturities[i],\\n                untransferredAmount\\n            );\\n        }\\n    }\\n\\n    function _transferPositionsPerMaturity(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _amount,\\n        bool _isDefaultMarket\\n    ) internal returns (int256 untransferredAmount) {\\n        untransferredAmount = _isDefaultMarket\\n            ? _transferGenesisValue(_from, _to, _ccy, _amount)\\n            : _amount;\\n\\n        untransferredAmount = _transferFutureValues(\\n            _from,\\n            _to,\\n            _ccy,\\n            _maturity,\\n            untransferredAmount\\n        );\\n    }\\n\\n    function _transferGenesisValue(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) internal returns (int256 untransferredAmount) {\\n        untransferredAmount = _amount;\\n        bool isDebt = _amount < 0;\\n\\n        int256 userGVAmount = AddressResolverLib.genesisValueVault().getBalance(_ccy, _from);\\n\\n        if ((isDebt && userGVAmount < 0) || (!isDebt && userGVAmount > 0)) {\\n            uint256 currentMaturity = AddressResolverLib.genesisValueVault().getCurrentMaturity(\\n                _ccy\\n            );\\n\\n            int256 gvAmount = AddressResolverLib.genesisValueVault().calculateGVFromFV(\\n                _ccy,\\n                0,\\n                FundManagementLogic.calculateFVFromPV(_ccy, currentMaturity, untransferredAmount)\\n            );\\n\\n            if ((isDebt && userGVAmount > gvAmount) || (!isDebt && userGVAmount < gvAmount)) {\\n                gvAmount = userGVAmount;\\n            }\\n\\n            // Due to the negative genesis value, the liquidator's genesis value is decreased.\\n            AddressResolverLib.genesisValueVault().transferFrom(_ccy, _from, _to, gvAmount);\\n\\n            untransferredAmount -= FundManagementLogic.calculatePVFromFV(\\n                _ccy,\\n                currentMaturity,\\n                AddressResolverLib.genesisValueVault().calculateFVFromGV(_ccy, 0, gvAmount)\\n            );\\n\\n            FundManagementLogic.registerCurrency(_ccy, _to);\\n        }\\n    }\\n\\n    function _transferFutureValues(\\n        address _from,\\n        address _to,\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        int256 _amount\\n    ) internal returns (int256 untransferredAmount) {\\n        untransferredAmount = _amount;\\n        bool isDebt = _amount < 0;\\n\\n        IFutureValueVault futureValueVault = IFutureValueVault(\\n            Storage.slot().futureValueVaults[_ccy]\\n        );\\n        uint8 orderBookId = Storage.slot().maturityOrderBookIds[_ccy][_maturity];\\n\\n        (int256 userFVAmount, ) = futureValueVault.getBalance(orderBookId, _from);\\n\\n        if ((isDebt && userFVAmount < 0) || (!isDebt && userFVAmount > 0)) {\\n            int256 fvAmount = FundManagementLogic.calculateFVFromPV(\\n                _ccy,\\n                _maturity,\\n                untransferredAmount\\n            );\\n\\n            if ((isDebt && userFVAmount > fvAmount) || (!isDebt && userFVAmount < fvAmount)) {\\n                fvAmount = userFVAmount;\\n            }\\n\\n            futureValueVault.transferFrom(orderBookId, _from, _to, fvAmount, _maturity);\\n            untransferredAmount -= FundManagementLogic.calculatePVFromFV(_ccy, _maturity, fvAmount);\\n\\n            FundManagementLogic.registerCurrencyAndMaturity(_ccy, _maturity, _to);\\n        }\\n    }\\n\\n    function _convertLiquidationAmounts(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _untransferredAmount,\\n        uint256 _receivedCollateralAmount,\\n        uint256 _liquidatorFeeInCollateralCcy\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 untransferredAmountInDebtCcy,\\n            uint256 receivedCollateralAmountInDebtCcy,\\n            uint256 liquidatorFeeInDebtCcy\\n        )\\n    {\\n        uint256[] memory amountsInCollateralCcy = new uint256[](3);\\n        amountsInCollateralCcy[0] = _untransferredAmount;\\n        amountsInCollateralCcy[1] = _receivedCollateralAmount;\\n        amountsInCollateralCcy[2] = _liquidatorFeeInCollateralCcy;\\n\\n        uint256[] memory amountsInDebtCcy = AddressResolverLib.currencyController().convert(\\n            _collateralCcy,\\n            _debtCcy,\\n            amountsInCollateralCcy\\n        );\\n\\n        untransferredAmountInDebtCcy = amountsInDebtCcy[0];\\n        receivedCollateralAmountInDebtCcy = amountsInDebtCcy[1];\\n        liquidatorFeeInDebtCcy = amountsInDebtCcy[2];\\n    }\\n\\n    function _calculateTransferredAmount(\\n        uint256 totalAmount,\\n        uint256 untransferredAmount,\\n        uint256 feeAmount\\n    ) internal pure returns (uint256) {\\n        // NOTE: The formula is:\\n        // transferredTotalAmount = totalAmount - untransferredAmount;\\n        // untransferredFeeAmount = feeAmount * (transferredTotalAmount / totalAmount);\\n        uint256 transferredTotalAmount = totalAmount - untransferredAmount;\\n        uint256 untransferredFeeAmount = (feeAmount * transferredTotalAmount).div(totalAmount);\\n\\n        return transferredTotalAmount - untransferredFeeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x904db677611b7f83f63b758765cf896688e1c35bc2fc37ae6f6f37b25f81edfe\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/RoundingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary RoundingInt256 {\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0);\\n\\n        int256 diff = (a * 10) / b - (a / b) * 10;\\n        if (diff >= 5) {\\n            return (a / b) + 1;\\n        } else if (diff <= -5) {\\n            return (a / b) - 1;\\n        } else {\\n            return a / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd1e09736aa5f45e183fa07818694edc6b838f19f87748803f8b7e81afe5b3019\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb063c0e8aa8a0bfc9303bd5a1c1d9f54b19cb85d8859aa505ba4162769fc7306\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AccessControl} from \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @notice Implements functions to add  role-based access control mechanisms.\\n */\\ncontract MixinAccessControl is AccessControl {\\n    error CallerNotOperator();\\n    error NotAllowedAccess(bytes32 role, address account);\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyOperator() {\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) revert CallerNotOperator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the roles.\\n     * @param _admin The address of the admin role\\n     */\\n    function _setupInitialRoles(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Adds a new admin as Operator\\n     * @param admin The address of the new admin\\n     */\\n    function addOperator(address admin) external {\\n        super.grantRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @notice Removes an admin as Operator\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeOperator(address admin) external {\\n        revokeRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function revokeRole(bytes32 role, address account) public override {\\n        if (account == msg.sender) revert NotAllowedAccess(role, account);\\n\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function renounceRole(bytes32 role, address account) public pure override {\\n        revert NotAllowedAccess(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x3f53b204b9e2c8cb571fce0f537f8663a4952efbf19ce237a63d007acc6421ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    error OnlyAcceptedContract(string name);\\n    error ResolverAlreadyRegistered();\\n\\n    modifier onlyLendingMarketController() {\\n        if (msg.sender != address(AddressResolverLib.lendingMarketController()))\\n            revert OnlyAcceptedContract(\\\"LendingMarketController\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        if (address(Storage.slot().resolver) != address(0)) revert ResolverAlreadyRegistered();\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0xd2f09d4b47a54d196ce23a9df1ece821097a9dba7933bbc7c1c05c05e33a660e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinLendingMarketConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// interfaces\\nimport {ILendingMarket} from \\\"../interfaces/ILendingMarket.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n// storages\\nimport {LendingMarketControllerStorage as Storage} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ncontract MixinLendingMarketConfiguration is Ownable {\\n    function _initialize(address _owner) internal {\\n        _transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Gets the order fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @return The order fee rate received by protocol\\n     */\\n    function getOrderFeeRate(bytes32 _ccy) public view returns (uint256) {\\n        return ILendingMarket(Storage.slot().lendingMarkets[_ccy]).getOrderFeeRate();\\n    }\\n\\n    /**\\n     * @notice Gets the limit range in unit price for the circuit breaker\\n     * @param _ccy Currency name in bytes32\\n     * @return The auto-roll fee rate received by protocol\\n     */\\n    function getCircuitBreakerLimitRange(bytes32 _ccy) public view returns (uint256) {\\n        return ILendingMarket(Storage.slot().lendingMarkets[_ccy]).getCircuitBreakerLimitRange();\\n    }\\n\\n    /**\\n     * @notice Updates the order fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @param _orderFeeRate The order fee rate received by protocol\\n     */\\n    function updateOrderFeeRate(bytes32 _ccy, uint256 _orderFeeRate) public onlyOwner {\\n        ILendingMarket(Storage.slot().lendingMarkets[_ccy]).updateOrderFeeRate(_orderFeeRate);\\n    }\\n\\n    /**\\n     * @notice Updates the auto-roll fee rate\\n     * @param _ccy Currency name in bytes32\\n     * @param _cbLimitRange The circuit breaker limit range\\n     */\\n    function updateCircuitBreakerLimitRange(bytes32 _ccy, uint256 _cbLimitRange) public onlyOwner {\\n        ILendingMarket(Storage.slot().lendingMarkets[_ccy]).updateCircuitBreakerLimitRange(\\n            _cbLimitRange\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1a82d9020566196c6ea7c50863642210f65ac761312597d6c31da1080b387834\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256[] heartbeats;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.currencyController\\\")) - 1);\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 ccy => uint256 haircut) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 ccy => uint8 decimals) decimalsCaches;\\n        mapping(bytes32 ccy => PriceFeed priceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5485fa8fc79ac418525aed23300dd0111ecb5403121104ad6bb09d196c8e82f5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.genesisValueVault\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 ccy => bool isInitialized) isInitialized;\\n        mapping(bytes32 ccy => uint256 compoundFactor) initialCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) lendingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) borrowingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 maturity) currentMaturity;\\n        mapping(bytes32 ccy => uint8 decimals) decimals;\\n        mapping(bytes32 ccy => mapping(address user => int256 balance)) balances;\\n        mapping(bytes32 ccy => uint256 amount) totalLendingSupplies;\\n        mapping(bytes32 ccy => uint256 amount) totalBorrowingSupplies;\\n        // Total amount supplied per maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => int256 balance)) maturityBalances;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => AutoRollLog log)) autoRollLogs;\\n        // Maturity when the user receives the balance on the target currency\\n        mapping(bytes32 ccy => mapping(address user => uint256 maturity)) userMaturities;\\n        mapping(bytes32 ccy => uint256 balance) totalLockedBalances;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda77d523b56fbba23ad00d3583a83a829bd715c710f197ba62712fb60ee1dac2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nstruct ZCTokenInfo {\\n    bytes32 ccy;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => address token)) zcTokens;\\n        mapping(address token => ZCTokenInfo) zcTokenInfo;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8811a19e2f51e3fc813292c1ff80d2f24e7951c3c377da84c5f005a8197b07f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {OrderBookLib} from \\\"../libraries/OrderBookLib.sol\\\";\\n\\nstruct ItayoseLog {\\n    uint256 openingUnitPrice;\\n    uint256 lastLendUnitPrice;\\n    uint256 lastBorrowUnitPrice;\\n}\\n\\nlibrary LendingMarketStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarket\\\")) - 1);\\n\\n    struct Storage {\\n        bytes32 ccy;\\n        uint8 lastOrderBookId;\\n        // Order fee rate received by protocol (in basis point)\\n        uint256 orderFeeRate;\\n        // Rate limit range of yield for the circuit breaker\\n        uint256 circuitBreakerLimitRange;\\n        // Mapping from order book id to order book\\n        mapping(uint8 orderBookId => OrderBookLib.OrderBook orderBook) orderBooks;\\n        mapping(uint256 maturity => bool isReady) isReady;\\n        mapping(uint256 maturity => ItayoseLog log) itayoseLogs;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x24513c09dd69dfd90b98650daa4656722f7cd8724c18e6740afa339a7de2b920\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.mixinAddressResolver\\\")) - 1);\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 contractName => address contractAddress) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5663ed356830b742d6f13379afdd7d041ae71e13ad2ea64d8d63ca9e6ef8ab75\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.accessControl\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 role => RoleData roleData) roles;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08de1e22d35fffead0a9c9cc6a1ef53441513d5ba080a5361dd48e5cc5d794c0\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = bytes32(uint256(keccak256(\\\"sf.storage.ownable\\\")) - 1);\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98130c4c3d0014744b194e179bd65b8b7e73cac9cd33a470d194072e1a06b94e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/access/IAccessControl.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../storages/utils/AccessControlStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return AccessControlStorage.slot().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return AccessControlStorage.slot().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        AccessControlStorage.slot().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac33e516f59b08a69d11a73b73ce2dd13856dee8b9bf969069f513d072da130\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/LockAndMsgSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ncontract LockAndMsgSender {\\n    error ContractLocked();\\n\\n    address internal constant NOT_LOCKED_FLAG = address(0);\\n    address internal lockedBy;\\n\\n    modifier isNotLocked() {\\n        if (msg.sender != address(this)) {\\n            if (lockedBy != NOT_LOCKED_FLAG) revert ContractLocked();\\n            lockedBy = msg.sender;\\n            _;\\n            lockedBy = NOT_LOCKED_FLAG;\\n        } else {\\n            _;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23e3281c2e662b44032a8ea46c9f8793777e79765df7f88e1df2e391df5e7f10\",\"license\":\"MIT\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd735ea20ce4e86d574ab372eb79a46510c7be3b12b62f3948bb68dd2bea710ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Gets the revision number of the contract\\n     * @return The revision number\\n     */\\n    function getRevision() external pure virtual returns (uint256) {\\n        return 0x1;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x9a8871621917fe5a0c7175217c5504dab4f935612dff0dadaff62c2d4da87412\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "$bfa1fc126f9f960b1bd3bae8c14d9c594e$__90632097fb89906064015b60006040518083038186803b15801561101157600080fd5b505af4158015611025573d6000803e3d6000fd5b505050506001925050506110396001600055565b92915050565b60006001600160e01b03198216637965db0b60e01b148061103957506301ffc9a760e01b6001600160e01b0319831614611039565b6040805180820190915260008082526020820152611090613d87565b600092835260020160209081526040928390208351808501909452805484526001015460ff16908301525090565b604051620f324960e61b815260048101849052602481018390526001600160a01b038216604482015260009073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__906303cc924090606401602060405180830381865af4158015611126573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a9190614a74565b90505b9392505050565b600061115e613d87565b6000838152600591909101602090815260409182902054825163128e5b8560e01b815292516001600160a01b039091169263128e5b859260048083019391928290030181865afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110399190614a74565b60006111e4613db5565b546001600160a01b0316919050565b60405163018ba8a560e21b815260048101849052602481018390526001600160a01b0382166044820152600090819073__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063062ea294906064016040805180830381865af415801561125d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112819190614a8d565b90969095509350505050565b6000611297613d2e565b85856112a38282611990565b156112c1576040516318f4d05960e31b815260040160405180910390fd5b6112c96133e3565b156112e7576040516319a90b2f60e21b815260040160405180910390fd5b6112ef613de3565b6040516396994e3760e01b8152336004820152602481018a9052604481018790526001600160a01b0391909116906396994e379034906064016000604051808303818588803b15801561134157600080fd5b505af1158015611355573d6000803e3d6000fd5b505060405163606c3acd60e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__935063606c3acd925061139b91508b908b9033908c908c908c90600401614ad3565b60006040518083038186803b1580156113b357600080fd5b505af41580156113c7573d6000803e3d6000fd5b505050506001925050506113db6001600055565b95945050505050565b600154610100900460ff161580801561140157506001805460ff16105b8061141a5750303b15801561141a57506001805460ff16145b6114825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6001805460ff19168117905580156114a4576001805461ff0019166101001790555b60006114ae613df2565b6001600160a01b03160361150f5760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b6064820152608401611479565b81611518613d87565b5561152284613bb4565b61152b84613e1a565b61153483613e3d565b8015611579576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60405163b55c692f60e01b815260009073__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063b55c692f906115bf908690859087908290600401614b11565b61016060405180830381865af41580156115dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116019190614bca565b519392505050565b6000611613613e99565b600092835260205250604090206001015490565b61166f60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61169d8461167b613d87565b6001600160a01b0386166000908152600d919091016020526040902090613ec7565b1561114d576116e56040518060e00160405280600080191681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051639349fb4160e01b8152600481018790526001600160a01b03861660248201528251604482015260208301516064820152908201516084820152606082015160a4820152608082015160c482015260a082015160e482015260c0820151610104820152610124810184905273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90639349fb41906101440161010060405180830381865af4158015611792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b69190614c5d565b91505061114d565b60408051808201909152600080825260208201526117da613d87565b6001600160a01b039092166000908152601092909201602090815260409283902083518085019094528054845260010154908301525090565b600061181d611bf6565b905060005b815181101561198c57600082828151811061183f5761183f614ced565b602002602001015190506000611853613db5565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd916118c491869190605d01614d03565b602060405180830381865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190614d1c565b905080611910613db5565b6000848152600191909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a15050808061198490614d4f565b915050611822565b5050565b600061199a613d87565b6000938452600a01602090815260408085209385529290525090205460ff161590565b6000806119c8611bf6565b905060005b8151811015611ae65760008282815181106119ea576119ea614ced565b602002602001015190506119fc613db5565b600082815260019190910160205260409020546001600160a01b0316611a20613db5565b546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a72190602401602060405180830381865afa158015611a67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8b9190614d1c565b6001600160a01b0316141580611ac457506000611aa6613db5565b600083815260019190910160205260409020546001600160a01b0316145b15611ad3576000935050505090565b5080611ade81614d4f565b9150506119cd565b50600191505090565b6000611af9613d87565b6000928352600801602052506040902054151590565b6000611b19613d2e565b8585611b258282611990565b15611b43576040516318f4d05960e31b815260040160405180910390fd5b611b4b6133e3565b15611b69576040516319a90b2f60e21b815260040160405180910390fd5b60405163aeb2d5bd60e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__9063aeb2d5bd9061139b908b908b9033908c908c908c90600401614ad3565b611bb382611609565b611bbc81613edf565b611bc68383613ee9565b505050565b604051631eb5512b60e31b8152600481018390526001600160a01b0382166024820152604401611479565b60408051600580825260c082019092526060916020820160a080368337019050509050742132b0b1b7b7283937bc3ca1b7b73a3937b63632b960591b81600081518110611c4557611c45614ced565b6020026020010181815250507121bab93932b731bca1b7b73a3937b63632b960711b81600181518110611c7a57611c7a614ced565b6020026020010181815250507011d95b995cda5cd5985b1d5955985d5b1d607a1b81600281518110611cae57611cae614ced565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b81600381518110611cdc57611cdc614ced565b60200260200101818152505069151bdad95b95985d5b1d60b21b81600481518110611d0957611d09614ced565b60200260200101818152505090565b6000611d226133e3565b15611d40576040516319a90b2f60e21b815260040160405180910390fd5b611d586000805160206158a983398151915233612974565b611d755760405163a5523ee560e01b815260040160405180910390fd5b60405163428c3a8160e01b81526004810183905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063428c3a81906024015b60006040518083038186803b158015611dc157600080fd5b505af4158015611dd5573d6000803e3d6000fd5b50505050600190505b919050565b6000611ded613d2e565b8383611df98282611990565b15611e17576040516318f4d05960e31b815260040160405180910390fd5b611e1f6133e3565b15611e3d576040516319a90b2f60e21b815260040160405180910390fd5b611e45613d87565b600087815260059190910160205260409020546001600160a01b031663f3f7f452611e6e613d87565b6000898152600a91909101602090815260408083208a84529091529081902054905160e083901b6001600160e01b031916815260ff909116600482015233602482015265ffffffffffff87166044820152606401600060405180830381600087803b158015611edc57600080fd5b505af1158015611ef0573d6000803e3d6000fd5b5050505060019250505061114d6001600055565b6000611f0e613d87565b60008381526005919091016020908152604091829020548251631e25031760e01b815292516001600160a01b0390911692631e2503179260048083019391928290030181865afa1580156111b6573d6000803e3d6000fd5b611f6e6133e3565b15611f8c576040516319a90b2f60e21b815260040160405180910390fd5b33611f9561296a565b6001600160a01b031614611fbb5760405162461bcd60e51b815260040161147990614d68565b604051634ebeb04960e01b815260048101849052602481018390526044810182905273__$53b43b4bdeb2460d1113627ef627de0cf6$__90634ebeb0499060640160006040518083038186803b15801561201457600080fd5b505af4158015612028573d6000803e3d6000fd5b50505050505050565b600061203b613d87565b600092835260070160205250604090205490565b612057613d2e565b61205f6133e3565b1561207d576040516319a90b2f60e21b815260040160405180910390fd5b6040516353571ee760e01b81526004810182905273__$53b43b4bdeb2460d1113627ef627de0cf6$__906353571ee79060240160006040518083038186803b1580156120c857600080fd5b505af41580156120dc573d6000803e3d6000fd5b5050505073__$e7d72ce98f1dce1f33c815a57604cff5ab$__639519832b82612103613f60565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865af415801561214d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121719190614a74565b5061217c6001600055565b50565b6000612189613d87565b600092835260030160205250604090205490565b336121a661296a565b6001600160a01b0316146121cc5760405162461bcd60e51b815260040161147990614d68565b6121d4613d87565b6000838152600591909101602052604090819020549051636aa65aaf60e01b8152600481018390526001600160a01b0390911690636aa65aaf906024015b600060405180830381600087803b15801561222c57600080fd5b505af1158015612240573d6000803e3d6000fd5b505050505050565b6000612252613d2e565b61225a6133e3565b15612278576040516319a90b2f60e21b815260040160405180910390fd5b604051631a88ea5760e21b81526004810184905260248101839052600090819073__$53b43b4bdeb2460d1113627ef627de0cf6$__90636a23a95c9060440161010060405180830381865af41580156122d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f99190614e17565b6040516305ed050d60e51b8152919350915073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__9063bda0a1a09061233c90889088906000908890600401614e4d565b60006040518083038186803b15801561235457600080fd5b505af4158015612368573d6000803e3d6000fd5b50506040516305ed050d60e51b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__925063bda0a1a09150610ff990889088906001908790600401614e4d565b60405163386320d360e11b8152600481018390526001600160a01b03821660248201526000908190819073__$e7d72ce98f1dce1f33c815a57604cff5ab$__906370c641a690604401606060405180830381865af4158015612410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124349190614ea9565b9250925092509250925092565b3361244a61296a565b6001600160a01b0316146124705760405162461bcd60e51b815260040161147990614d68565b61247a6000613f6a565b565b6000612486613d87565b54919050565b3361249561296a565b6001600160a01b0316146124bb5760405162461bcd60e51b815260040161147990614d68565b6124c3613d87565b6000838152600591909101602052604090819020549051636c5d6df160e01b8152600481018390526001600160a01b0390911690636c5d6df190602401612212565b600061250f613d87565b6000938452600a01602090815260408085209385529290525090205460ff1690565b600061253b613d87565b60009283526006016020525060409020546001600160a01b031690565b6000612562613d2e565b60405163104d68fd60e31b81526001600160a01b038316600482015273__$e7d72ce98f1dce1f33c815a57604cff5ab$__9063826b47e89060240160006040518083038186803b1580156125b557600080fd5b505af41580156125c9573d6000803e3d6000fd5b5050505060019050611dde6001600055565b336125e461296a565b6001600160a01b03161461260a5760405162461bcd60e51b815260040161147990614d68565b60405163083c2b5f60e41b8152600481018390526024810182905273__$53b43b4bdeb2460d1113627ef627de0cf6$__906383c2b5f0906044015b60006040518083038186803b15801561265d57600080fd5b505af4158015612240573d6000803e3d6000fd5b600033301461279f576001546201000090046001600160a01b0316156126aa576040516337affdbf60e11b815260040160405180910390fd5b6001805462010000600160b01b03191633620100000217905583836126cf8282611990565b156126ed576040516318f4d05960e31b815260040160405180910390fd5b6126f56133e3565b15612713576040516319a90b2f60e21b815260040160405180910390fd5b604051633099b3fd60e21b815273__$ddd42798825952179f0fb056787c1ba3b9$__9063c266cff49061275290339088908c908c908c90600401614ed7565b60006040518083038186803b15801561276a57600080fd5b505af415801561277e573d6000803e3d6000fd5b505050506001925050506001805462010000600160b01b0319169055612865565b83836127ab8282611990565b156127c9576040516318f4d05960e31b815260040160405180910390fd5b6127d16133e3565b156127ef576040516319a90b2f60e21b815260040160405180910390fd5b604051633099b3fd60e21b815273__$ddd42798825952179f0fb056787c1ba3b9$__9063c266cff49061282e90339088908c908c908c90600401614ed7565b60006040518083038186803b15801561284657600080fd5b505af415801561285a573d6000803e3d6000fd5b505050506001925050505b949350505050565b60006128776133e3565b80156110395750612886613d87565b6001600160a01b0383166000908152600e91909101602052604090205460ff161592915050565b60006128b7613d2e565b82826128c38282611990565b156128e1576040516318f4d05960e31b815260040160405180910390fd5b6128e96133e3565b15612907576040516319a90b2f60e21b815260040160405180910390fd5b6040516332b3123760e11b8152600481018690526024810185905233604482015273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90636566246e90606401610ff9565b6000612956613d87565b600092835260080160205250604090205490565b60006111e4613fd7565b600061297e613e99565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b60006129b2613d2e565b6129ba6133e3565b6129d7576040516304d824a560e41b815260040160405180910390fd5b604051635dd3a2c160e01b815233600482015273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90635dd3a2c19060240160006040518083038186803b158015612a2157600080fd5b505af4158015612a35573d6000803e3d6000fd5b5050505060019050612a476001600055565b90565b6000612a54613d2e565b604051639519832b60e01b8152600481018490526001600160a01b038316602482015273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90639519832b90604401602060405180830381865af4158015612ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad79190614a74565b90506110396001600055565b61217c6000805160206158a983398151915282611baa565b612b4a6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516345f1848f60e11b81526001600160a01b0386166004820152843560248201526020850135604482015290840135606482015260608401356084820152608084013560a482015260a084013560c482015260c084013560e4820152610104810183905273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90638be3091e906101240161012060405180830381865af4158015612bef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114a9190614f08565b6000612c1d613d87565b60009283526005016020525060409020546001600160a01b031690565b6060612c44613d87565b600083815260059190910160205260409020546001600160a01b03166338b05852612c6d613d87565b6000858152600491820160205260409081902090516001600160e01b031960e085901b168152612c9d9201614f83565b600060405180830381865afa158015612cba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110399190810190615564565b612cea613d2e565b8115801590612cfe5750612cfe8383611990565b15612d1c576040516318f4d05960e31b815260040160405180910390fd5b60405163e21bd62360e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__9063e21bd62390612d59908690869033908790600401614b11565b60006040518083038186803b158015612d7157600080fd5b505af4158015612d85573d6000803e3d6000fd5b50505050611bc66001600055565b600080612d9e613d87565b6001600160a01b0384166000908152600d919091016020526040812091505b612dc682614005565b811015612efc576000612dd9838361400f565b9050600073__$e7d72ce98f1dce1f33c815a57604cff5ab$__63b55c692f8360008960006040518563ffffffff1660e01b8152600401612e1c9493929190614b11565b61016060405180830381865af4158015612e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5e9190614bca565b519050612e6961401b565b604051633c7f634960e11b815260048101849052602481018390526001600160a01b0391909116906378fec69290604401602060405180830381865afa158015612eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edb9190614a74565b612ee5908661560a565b945050508080612ef490614d4f565b915050612dbd565b5050919050565b600080600080600080600073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__63724160ad896040518263ffffffff1660e01b8152600401612f459190615640565b60e060405180830381865af4158015612f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8691906156c4565b959e949d50929b5090995097509550909350915050565b61217c6000805160206158a9833981519152826133f8565b60608167ffffffffffffffff811115612fd057612fd0614b35565b60405190808252806020026020018201604052801561300357816020015b6060815260200190600190039081612fee5790505b50905060005b828110156130a3576130733085858481811061302757613027614ced565b90506020028101906130399190615724565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061402592505050565b82828151811061308557613085614ced565b6020026020010181905250808061309b90614d4f565b915050613009565b5092915050565b60006130b4613d2e565b82826130c08282611990565b156130de576040516318f4d05960e31b815260040160405180910390fd5b6130e66133e3565b15613104576040516319a90b2f60e21b815260040160405180910390fd5b6040516301402dfb60e31b815273__$e7d72ce98f1dce1f33c815a57604cff5ab$__90630a016fd89061314290889088903390600090600401614b11565b602060405180830381865af415801561315f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131839190614a74565b506001925050506110396001600055565b600061319e613d87565b6000938452600f0160209081526040808520938552929052509020546001600160a01b031690565b6131ce6133e3565b156131ec576040516319a90b2f60e21b815260040160405180910390fd5b336131f561296a565b6001600160a01b03161461321b5760405162461bcd60e51b815260040161147990614d68565b73__$53b43b4bdeb2460d1113627ef627de0cf6$__63b8f117cd6040518163ffffffff1660e01b815260040160006040518083038186803b15801561325f57600080fd5b505af4158015611579573d6000803e3d6000fd5b6000333014613354576001546201000090046001600160a01b0316156132ac576040516337affdbf60e11b815260040160405180910390fd5b6001805462010000600160b01b03191633620100000217905583836132d18282611990565b156132ef576040516318f4d05960e31b815260040160405180910390fd5b6132f76133e3565b15613315576040516319a90b2f60e21b815260040160405180910390fd5b604051635436151f60e11b815273__$ddd42798825952179f0fb056787c1ba3b9$__9063a86c2a3e9061275290339088908c908c908c90600401614ed7565b83836133608282611990565b1561337e576040516318f4d05960e31b815260040160405180910390fd5b6133866133e3565b156133a4576040516319a90b2f60e21b815260040160405180910390fd5b604051635436151f60e11b815273__$ddd42798825952179f0fb056787c1ba3b9$__9063a86c2a3e9061282e90339088908c908c908c90600401614ed7565b6000806133ee613d87565b6001015411905090565b336001600160a01b0382160361343357604051631eb5512b60e31b8152600481018390526001600160a01b0382166024820152604401611479565b61198c828261404a565b6000613447613d2e565b85856134538282611990565b15613471576040516318f4d05960e31b815260040160405180910390fd5b6134796133e3565b15613497576040516319a90b2f60e21b815260040160405180910390fd5b61349f613de3565b6040516396994e3760e01b8152336004820152602481018a9052604481018790526001600160a01b0391909116906396994e379034906064016000604051808303818588803b1580156134f157600080fd5b505af1158015613505573d6000803e3d6000fd5b505060405163aeb2d5bd60e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__935063aeb2d5bd925061139b91508b908b9033908c908c908c90600401614ad3565b6000613555613d2e565b89896135618282611990565b1561357f576040516318f4d05960e31b815260040160405180910390fd5b6135876133e3565b156135a5576040516319a90b2f60e21b815260040160405180910390fd5b6135ad613de3565b6001600160a01b03166360819025338e8c8b8b8b8b6040518863ffffffff1660e01b81526004016135e49796959493929190615772565b600060405180830381600087803b1580156135fe57600080fd5b505af1158015613612573d6000803e3d6000fd5b5050505073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__63606c3acd8d8d338e8e8e6040518763ffffffff1660e01b815260040161365796959493929190614ad3565b60006040518083038186803b15801561366f57600080fd5b505af4158015613683573d6000803e3d6000fd5b505050506001925050506136976001600055565b9998505050505050505050565b6136ac6133e3565b156136ca576040516319a90b2f60e21b815260040160405180910390fd5b336136d361296a565b6001600160a01b0316146136f95760405162461bcd60e51b815260040161147990614d68565b60405163e3a9833360e01b8152600481018390526024810182905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063e3a9833390604401612645565b6060613742613d87565b60040160008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156137be57602002820191906000526020600020906000905b825461010083900a900460ff1681526020600192830181810494850194909303909202910180841161378f5790505b50505050509050919050565b600073__$e7d72ce98f1dce1f33c815a57604cff5ab$__63c59cf0e9836137ef613d87565b6007016000878152602001908152602001600020546040518363ffffffff1660e01b815260040161382a929190918252602082015260400190565b602060405180830381865af4158015613847573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114d9190614a74565b613873613d2e565b61387b6133e3565b15613899576040516319a90b2f60e21b815260040160405180910390fd5b81158015906138ad57506138ad8383611990565b156138cb576040516318f4d05960e31b815260040160405180910390fd5b60405163912da51560e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__9063912da51590612d59908690869033908790600401614b11565b3361391161296a565b6001600160a01b0316146139375760405162461bcd60e51b815260040161147990614d68565b61394086611aef565b1561395d5760405162dc149f60e41b815260040160405180910390fd5b60405163ea57481760e01b8152600481018790526024810186905260448101859052606481018490526084810183905260a4810182905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063ea5748179060c40160006040518083038186803b1580156139cb57600080fd5b505af41580156139df573d6000803e3d6000fd5b50505050505050505050565b60006139f5613d2e565b8989613a018282611990565b15613a1f576040516318f4d05960e31b815260040160405180910390fd5b613a276133e3565b15613a45576040516319a90b2f60e21b815260040160405180910390fd5b613a4d613de3565b6001600160a01b03166360819025338e8c8b8b8b8b6040518863ffffffff1660e01b8152600401613a849796959493929190615772565b600060405180830381600087803b158015613a9e57600080fd5b505af1158015613ab2573d6000803e3d6000fd5b5050505073__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__63aeb2d5bd8d8d338e8e8e6040518763ffffffff1660e01b815260040161365796959493929190614ad3565b6000613b01613d87565b6000938452600901602090815260408085209385529290525090205490565b33613b2961296a565b6001600160a01b031614613b4f5760405162461bcd60e51b815260040161147990614d68565b6001600160a01b038116613bb45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401611479565b61217c81613f6a565b6000613bc7613d2e565b8585613bd38282611990565b15613bf1576040516318f4d05960e31b815260040160405180910390fd5b613bf96133e3565b15613c17576040516319a90b2f60e21b815260040160405180910390fd5b60405163606c3acd60e01b815273__$bfa1fc126f9f960b1bd3bae8c14d9c594e$__9063606c3acd9061139b908b908b9033908c908c908c90600401614ad3565b6000613c626133e3565b15613c80576040516319a90b2f60e21b815260040160405180910390fd5b613c986000805160206158a983398151915233612974565b613cb55760405163a5523ee560e01b815260040160405180910390fd5b60405163f4a0997f60e01b81526004810183905273__$53b43b4bdeb2460d1113627ef627de0cf6$__9063f4a0997f90602401611da9565b6060611039613cfa613d87565b6001600160a01b0384166000908152600d9190910160205260409020614066565b6000613d25613d87565b60010154905090565b600260005403613d805760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401611479565b6002600055565b60008061103960017f8041b8421ebd495cc61f38c788c9eb100daccf9bd36aa0bb920b7a15b2e049656157b0565b60008061103960017f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e41240186157b0565b6000613ded614073565b905090565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6111e4565b613e25600082613ee9565b61217c6000805160206158a983398151915282613ee9565b6000613e47613db5565b546001600160a01b031614613e6f576040516304b79d6360e51b815260040160405180910390fd5b80613e78613db5565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60008061103960017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f96157b0565b6000818152600183016020526040812054151561114d565b61217c813361408b565b613ef38282612974565b61198c576001613f01613e99565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000613ded6140ef565b6000613f74613fd7565b546001600160a01b0316905081613f89613fd7565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061103960017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa6157b0565b6000611039825490565b600061114d8383614108565b6000613ded614132565b606061114d83836040518060600160405280602781526020016158c960279139614152565b61405382611609565b61405c81613edf565b611bc683836141ca565b6060600061114d83614242565b6000613ded69151bdad95b95985d5b1d60b21b61429d565b6140958282612974565b61198c576140ad816001600160a01b031660146142fe565b6140b88360206142fe565b6040516020016140c99291906157c3565b60408051601f198184030181529082905262461bcd60e51b825261147991600401615838565b6000613ded6a14995cd95c9d99519d5b9960aa1b61429d565b600082600001828154811061411f5761411f614ced565b9060005260206000200154905092915050565b6000613ded7121bab93932b731bca1b7b73a3937b63632b960711b61429d565b6060600080856001600160a01b03168560405161416f919061584b565b600060405180830381855af49150503d80600081146141aa576040519150601f19603f3d011682016040523d82523d6000602084013e6141af565b606091505b50915091506141c08683838761449a565b9695505050505050565b6141d48282612974565b1561198c5760006141e3613e99565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156137be57602002820191906000526020600020905b81548152602001906001019080831161427e5750505050509050919050565b6000806142a8613db5565b600084815260019190910160205260409020546001600160a01b03169050806110395760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b825261147991600401615838565b6060600061430d836002615867565b61431890600261587e565b67ffffffffffffffff81111561433057614330614b35565b6040519080825280601f01601f19166020018201604052801561435a576020820181803683370190505b509050600360fc1b8160008151811061437557614375614ced565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106143a4576143a4614ced565b60200101906001600160f81b031916908160001a90535060006143c8846002615867565b6143d390600161587e565b90505b600181111561444b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061440757614407614ced565b1a60f81b82828151811061441d5761441d614ced565b60200101906001600160f81b031916908160001a90535060049490941c9361444481615891565b90506143d6565b50831561114d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401611479565b60608315614509578251600003614502576001600160a01b0385163b6145025760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611479565b5081612865565b612865838381511561451e5781518083602001fd5b8060405162461bcd60e51b81526004016114799190615838565b6000806040838503121561454b57600080fd5b50508035926020909101359150565b60006020828403121561456c57600080fd5b81356001600160e01b03198116811461114d57600080fd5b60006020828403121561459657600080fd5b5035919050565b6001600160a01b038116811461217c57600080fd5b6000806000606084860312156145c757600080fd5b833592506020840135915060408401356145e08161459d565b809150509250925092565b803560028110611dde57600080fd5b600080600080600060a0868803121561461257600080fd5b8535945060208601359350614629604087016145eb565b94979396509394606081013594506080013592915050565b60008060006060848603121561465657600080fd5b83356146618161459d565b925060208401356146718161459d565b929592945050506040919091013590565b6000806040838503121561469557600080fd5b8235915060208301356146a78161459d565b809150509250929050565b6000806000606084860312156146c757600080fd5b8335925060208401356146718161459d565b6000602082840312156146eb57600080fd5b813561114d8161459d565b6020808252825182820181905260009190848201906040850190845b8181101561472e57835183529284019291840191600101614712565b50909695505050505050565b65ffffffffffff8116811461217c57600080fd5b60008060006060848603121561476357600080fd5b833592506020840135915060408401356145e08161473a565b60008060006060848603121561479157600080fd5b505081359360208301359350604090920135919050565b600080600080608085870312156147be57600080fd5b84359350602085013592506040850135915060608501356147de8161459d565b939692955090935050565b600080600083850361012081121561480057600080fd5b843561480b8161459d565b935060e0601f198201121561481f57600080fd5b5060208401915061010084013590509250925092565b6000610100828403121561484857600080fd5b50919050565b6000806020838503121561486157600080fd5b823567ffffffffffffffff8082111561487957600080fd5b818501915085601f83011261488d57600080fd5b81358181111561489c57600080fd5b8660208260051b85010111156148b157600080fd5b60209290920196919550909350505050565b60005b838110156148de5781810151838201526020016148c6565b50506000910152565b600081518084526148ff8160208601602086016148c3565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561496857603f198886030184526149568583516148e7565b9450928501929085019060010161493a565b5092979650505050505050565b60008060008060008060008060006101208a8c03121561499457600080fd5b8935985060208a013597506149ab60408b016145eb565b965060608a0135955060808a0135945060a08a0135935060c08a013560ff811681146149d657600080fd5b8093505060e08a013591506101008a013590509295985092959850929598565b6020808252825182820181905260009190848201906040850190845b8181101561472e57835160ff1683529284019291840191600101614a12565b60008060008060008060c08789031215614a4a57600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b600060208284031215614a8657600080fd5b5051919050565b60008060408385031215614aa057600080fd5b505080516020909101519092909150565b60028110614acf57634e487b7160e01b600052602160045260246000fd5b9052565b868152602081018690526001600160a01b038516604082015260c08101614afd6060830186614ab1565b608082019390935260a00152949350505050565b93845260208401929092526001600160a01b03166040830152606082015260800190565b634e487b7160e01b600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715614b6f57614b6f614b35565b60405290565b604051610120810167ffffffffffffffff81118282101715614b6f57614b6f614b35565b604051601f8201601f1916810167ffffffffffffffff81118282101715614bc257614bc2614b35565b604052919050565b60006101608284031215614bdd57600080fd5b614be5614b4b565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152508091505092915050565b6000610100808385031215614c7157600080fd5b6040519081019067ffffffffffffffff82118183101715614c9457614c94614b35565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b634e487b7160e01b600052603260045260246000fd5b82815260406020820152600061114a60408301846148e7565b600060208284031215614d2e57600080fd5b815161114d8161459d565b634e487b7160e01b600052601160045260246000fd5b600060018201614d6157614d61614d39565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060808284031215614daf57600080fd5b6040516080810181811067ffffffffffffffff82111715614dd257614dd2614b35565b80604052508091508251614de58161473a565b81526020830151614df58161459d565b8060208301525060408301516040820152606083015160608201525092915050565b6000806101008385031215614e2b57600080fd5b614e358484614d9d565b9150614e448460808501614d9d565b90509250929050565b8481526020810184905260e08101614e686040830185614ab1565b825165ffffffffffff1660608381019190915260208401516001600160a01b03166080840152604084015160a08401529092015160c0909101529392505050565b600080600060608486031215614ebe57600080fd5b8351925060208401519150604084015190509250925092565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b60006101208284031215614f1b57600080fd5b614f23614b75565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b60006020808301818452808554614f9e818490815260200190565b60008881526020812094509092505b81601f8201101561522757835460ff8082168552600882901c8116878601526040614fe1818701838560101c1660ff169052565b6060614ff6818801848660181c1660ff169052565b608061500a81890185878d1c1660ff169052565b60a061501f818a01868860281c1660ff169052565b60c0615034818b01878960301c1660ff169052565b60e0615049818c01888a60381c1660ff169052565b60ff88871c8816166101008c015261506c6101208c01888a60481c1660ff169052565b6150816101408c01888a60501c1660ff169052565b6150966101608c01888a60581c1660ff169052565b60ff88861c8816166101808c01526150b96101a08c01888a60681c1660ff169052565b6150ce6101c08c01888a60701c1660ff169052565b6150e36101e08c01888a60781c1660ff169052565b60ff88851c8816166102008c01526151066102208c01888a60881c1660ff169052565b61511b6102408c01888a60901c1660ff169052565b6151306102608c01888a60981c1660ff169052565b60ff88841c8816166102808c01526151536102a08c01888a60a81c1660ff169052565b6151686102c08c01888a60b01c1660ff169052565b61517d6102e08c01888a60b81c1660ff169052565b60ff88831c8816166103008c01526151a06103208c01888a60c81c1660ff169052565b6151b56103408c01888a60d01c1660ff169052565b6151ca6103608c01888a60d81c1660ff169052565b60ff88821c8816166103808c01525050505050506151f36103a08601828460e81c1660ff169052565b6152086103c08601828460f01c1660ff169052565b5060f81c6103e084015260019390930192610400909201918401614fad565b925492818110156152405760ff84168352918401916001015b8181101561525a57600884901c60ff168352918401916001015b8181101561527457601084901c60ff168352918401916001015b8181101561528e57601884901c60ff168352918401916001015b818110156152a65783851c60ff168352918401916001015b818110156152c057602884901c60ff168352918401916001015b818110156152da57603084901c60ff168352918401916001015b818110156152f457603884901c60ff168352918401916001015b8181101561530e57604084901c60ff168352918401916001015b8181101561532857604884901c60ff168352918401916001015b8181101561534257605084901c60ff168352918401916001015b8181101561535c57605884901c60ff168352918401916001015b8181101561537657606084901c60ff168352918401916001015b8181101561539057606884901c60ff168352918401916001015b818110156153aa57607084901c60ff168352918401916001015b818110156153c457607884901c60ff168352918401916001015b818110156153de57608084901c60ff168352918401916001015b818110156153f857608884901c60ff168352918401916001015b8181101561541257609084901c60ff168352918401916001015b8181101561542c57609884901c60ff168352918401916001015b818110156154465760a084901c60ff168352918401916001015b818110156154605760a884901c60ff168352918401916001015b8181101561547a5760b084901c60ff168352918401916001015b818110156154945760b884901c60ff168352918401916001015b818110156154ae5760c084901c60ff168352918401916001015b818110156154c85760c884901c60ff168352918401916001015b818110156154e25760d084901c60ff168352918401916001015b818110156154fc5760d884901c60ff168352918401916001015b818110156155165760e084901c60ff168352918401916001015b818110156155305760e884901c60ff168352918401916001015b8181101561554a5760f084901c60ff168352918401916001015b8181101561472e57505060f89190911c8152019392505050565b6000602080838503121561557757600080fd5b825167ffffffffffffffff8082111561558f57600080fd5b818501915085601f8301126155a357600080fd5b8151818111156155b5576155b5614b35565b8060051b91506155c6848301614b99565b81815291830184019184810190888411156155e057600080fd5b938501935b838510156155fe578451825293850193908501906155e5565b98975050505050505050565b808201828112600083128015821682158216171561562a5761562a614d39565b505092915050565b801515811461217c57600080fd5b8135815260208083013590820152610100810160408301356156618161459d565b6001600160a01b0316604083015261567b606084016145eb565b6156886060840182614ab1565b506080830135608083015260a083013560a083015260c083013560c083015260e08301356156b581615632565b80151560e08401525092915050565b600080600080600080600060e0888a0312156156df57600080fd5b875196506020880151955060408801519450606088015193506080880151925060a0880151915060c088015161571481615632565b8091505092959891949750929550565b6000808335601e1984360301811261573b57600080fd5b83018035915067ffffffffffffffff82111561575657600080fd5b60200191503681900382131561576b57600080fd5b9250929050565b6001600160a01b0397909716875260208701959095526040860193909352606085019190915260ff16608084015260a083015260c082015260e00190565b8181038181111561103957611039614d39565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516157fb8160178501602088016148c3565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161582c8160288401602088016148c3565b01602801949350505050565b60208152600061114d60208301846148e7565b6000825161585d8184602087016148c3565b9190910192915050565b808202811582820484141761103957611039614d39565b8082018082111561103957611039614d39565b6000816158a0576158a0614d39565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ea946036fe7a92761569896ce543b2e1fd66e39e8b4985d2aac32f0e38456a2c64736f6c63430008130033",
  "libraries": {
    "FundManagementLogic": "0xC75560416a5749aECAFEB1e9950071E646762333",
    "LendingMarketOperationLogic": "0xF711f5fC74761c6EF8a13bBcA496c263F28c5278",
    "LendingMarketUserLogic": "0x10B4d625752E921c10135B5F8b8Be4864cb4a47f",
    "LiquidationLogic": "0xD7F3A4E32490e0584f22b12062a0dCdEc9f3571e"
  },
  "implementation": "0x5ec189EaFe5C2F0B755687AE8FeE791c9267b465",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addOperator(address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "calculateFunds(bytes32,address,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_user": "User's address"
        },
        "returns": {
          "funds": "The funds calculated from the user's lending and borrowing order list"
        }
      },
      "calculateTotalFundsInBaseCurrency(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256),uint256)": {
        "params": {
          "_additionalFunds": "The funds to be added for calculating the total funds",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_user": "User's address"
        },
        "returns": {
          "funds": "The total funds calculated from the user's lending and borrowing order list"
        }
      },
      "cancelOrder(bytes32,uint256,uint48)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book",
          "_orderId": "Market order id"
        }
      },
      "cleanUpAllFunds(address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "cleanUpFunds(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "createOrderBook(bytes32,uint256,uint256)": {
        "params": {
          "_ccy": "Main currency for new order book",
          "_openingDate": "The timestamp when the order book opens",
          "_preOpeningDate": "The timestamp when the order book pre-opens"
        }
      },
      "depositAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositAndExecutesPreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositWithPermitAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_deadline": "The deadline timestamp that the permit is valid",
          "_maturity": "The maturity of the selected order book",
          "_permitR": "The R parameter of ERC712 permit sig",
          "_permitS": "The S parameter of ERC712 permit sig",
          "_permitV": "The V parameter of ERC712 permit sig",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositWithPermitAndExecutePreOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_deadline": "The deadline timestamp that the permit is valid",
          "_maturity": "The maturity of the selected order book",
          "_permitR": "The R parameter of ERC712 permit sig",
          "_permitS": "The S parameter of ERC712 permit sig",
          "_permitV": "The V parameter of ERC712 permit sig",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "depositZCToken(bytes32,uint256,uint256)": {
        "params": {
          "_amount": "The amount of ZCToken to burn",
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book"
        }
      },
      "executeEmergencySettlement()": {
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executeForcedRepayment(bytes32,bytes32,uint256,address)": {
        "params": {
          "_collateralCcy": "Currency name to be used as collateral",
          "_debtCcy": "Currency name to be used as debt",
          "_debtMaturity": "The order book maturity of the debt",
          "_user": "User's address"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executeItayoseCall(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the selected order book"
        }
      },
      "executeLiquidationCall(bytes32,bytes32,uint256,address)": {
        "params": {
          "_collateralCcy": "Currency name to be used as collateral",
          "_debtCcy": "Currency name to be used as debt",
          "_debtMaturity": "The order book maturity of the debt",
          "_user": "User's address"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executeOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executePreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "params": {
          "_amount": "Amount of funds the maker wants to borrow/lend",
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book",
          "_side": "Order position type, Borrow or Lend",
          "_unitPrice": "Amount of unit price taker wish to borrow/lend"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "executeRedemption(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book"
        }
      },
      "executeRepayment(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book"
        }
      },
      "getCircuitBreakerLimitRange(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The auto-roll fee rate received by protocol"
        }
      },
      "getCurrentMinDebtUnitPrice(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book"
        },
        "returns": {
          "_0": "The current min debt unit price"
        }
      },
      "getFutureValueVault(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The future value vault address"
        }
      },
      "getGenesisDate(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The genesis date"
        }
      },
      "getGenesisValue(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_user": "User's address"
        },
        "returns": {
          "amount": "The genesis value amount",
          "amountInFV": "The genesis value amount in future value",
          "amountInPV": "The genesis value amount in present value"
        }
      },
      "getLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending market address"
        }
      },
      "getMarketBasePeriod()": {
        "returns": {
          "_0": "The base period"
        }
      },
      "getMaturities(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "Array with the lending market maturity"
        }
      },
      "getMinDebtUnitPrice(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The genesis date"
        }
      },
      "getOrderBookId(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book"
        },
        "returns": {
          "_0": "The order book id"
        }
      },
      "getOrderBookIds(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The array of order book id"
        }
      },
      "getOrderEstimation((bytes32,uint256,address,uint8,uint256,uint256,uint256,bool))": {
        "params": {
          "_params": "The parameters to calculate the order estimation <br> - ccy: Currency name in bytes32 of the selected market <br> - maturity: The maturity of the market <br> - side: Order position type, Borrow or Lend <br> - amount: Amount of funds the maker wants to borrow/lend <br> - unitPrice: Amount of unit price taker wish to borrow/lend <br> - additionalDepositAmount: Additional amount to be deposited with the lending order <br> - ignoreBorrowedAmount: The boolean if the borrowed amount is ignored and not used as collateral or not"
        },
        "returns": {
          "coverage": "The rate of collateral used",
          "filledAmount": "The amount that is filled on the order book",
          "filledAmountInFV": "The amount in the future value that is filled on the order book",
          "isInsufficientDepositAmount": "The boolean if the order amount for lending in the selected currency is insufficient for the deposit amount or not",
          "lastUnitPrice": "The last unit price that is filled on the order book",
          "orderFeeInFV": "The order fee amount in the future value",
          "placedAmount": "The amount that is placed to the order book"
        }
      },
      "getOrderFeeRate(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The order fee rate received by protocol"
        }
      },
      "getPendingOrderAmount(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book"
        },
        "returns": {
          "_0": "The total amount"
        }
      },
      "getPosition(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the selected order book",
          "_user": "User's address"
        },
        "returns": {
          "futureValue": "The future value of the position",
          "presentValue": "The present value of the position"
        }
      },
      "getRevision()": {
        "returns": {
          "_0": "The revision number"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTerminationCollateralRatio(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The ratio"
        }
      },
      "getTerminationCurrencyCache(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The price cached"
        }
      },
      "getTerminationDate()": {
        "returns": {
          "_0": "The termination date"
        }
      },
      "getTotalPresentValue(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32 for Lending Market",
          "_user": "User's address"
        },
        "returns": {
          "totalPresentValue": "The total present value"
        }
      },
      "getTotalPresentValueInBaseCurrency(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalPresentValue": "The total present value in base currency"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The array of the currency"
        }
      },
      "getWithdrawableZCTokenAmount(bytes32,uint256,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book",
          "_user": "User's address"
        },
        "returns": {
          "amount": "The total amount of ZCToken that can be minted"
        }
      },
      "getZCToken(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the selected order book"
        },
        "returns": {
          "_0": "The zcToken address"
        }
      },
      "getZCTokenInfo(address)": {
        "params": {
          "_zcToken": "The zcToken address"
        },
        "returns": {
          "_0": "The zcToken data"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_marketBasePeriod": "The base period for market maturity",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_circuitBreakerLimitRange": "The circuit breaker limit range",
          "_compoundFactor": "The initial compound factor when the initial market is opened",
          "_genesisDate": "The genesis date when the initial market is opened",
          "_orderFeeRate": "The order fee rate received by protocol"
        }
      },
      "isInitializedLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the lending market is initialized or not"
        }
      },
      "isRedemptionRequired(address)": {
        "returns": {
          "_0": "The boolean if the user needs to redeem the funds"
        }
      },
      "isTerminated()": {
        "returns": {
          "_0": "The boolean if the protocol has not been terminated"
        }
      },
      "isValidMaturity(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book"
        },
        "returns": {
          "_0": "The boolean if the maturity is valid"
        }
      },
      "migrateLendingMarket(bytes32,uint256)": {
        "details": "ZCTokens do not exist in markets that were deployed before the contract upgrade, so they must be configured individually. This function can be deleted after executing for all currencies and maturities.",
        "params": {
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the ZCToken"
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Currency for pausing all lending markets"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "removeOperator(address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.",
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "rotateOrderBooks(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected order book"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpauseLendingMarket(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds"
        }
      },
      "unwindPosition(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32 of the selected order book",
          "_maturity": "The maturity of the selected order book"
        }
      },
      "updateCircuitBreakerLimitRange(bytes32,uint256)": {
        "params": {
          "_cbLimitRange": "The circuit breaker limit range",
          "_ccy": "Currency name in bytes32"
        }
      },
      "updateMinDebtUnitPrice(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_minDebtUnitPrice": "The min debt unit price"
        }
      },
      "updateOrderFeeRate(bytes32,uint256)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_orderFeeRate": "The order fee rate received by protocol"
        }
      },
      "withdrawZCToken(bytes32,uint256,uint256)": {
        "params": {
          "_amount": "The amount of ZCToken to mint",
          "_ccy": "Currency name in bytes32",
          "_maturity": "The maturity of the order book"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(address)": {
        "notice": "Adds a new admin as Operator"
      },
      "calculateFunds(bytes32,address,uint256)": {
        "notice": "Gets the funds that are calculated from the user's lending and borrowing order list for the selected currency."
      },
      "calculateTotalFundsInBaseCurrency(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256),uint256)": {
        "notice": "Gets the funds that are calculated from the user's lending and borrowing order list for all currencies in base currency."
      },
      "cancelOrder(bytes32,uint256,uint48)": {
        "notice": "Cancels the own order."
      },
      "cleanUpAllFunds(address)": {
        "notice": "Clean up all funds of the user"
      },
      "cleanUpFunds(bytes32,address)": {
        "notice": "Clean up user funds used for lazy evaluation by the following actions: - Removes order IDs that is already filled on the order book. - Convert Future values that have already been auto-rolled to Genesis values."
      },
      "createOrderBook(bytes32,uint256,uint256)": {
        "notice": "Creates new order book."
      },
      "depositAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Deposits funds and executes an order at the same time."
      },
      "depositAndExecutesPreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Deposits funds and executes a pre-order at the same time."
      },
      "depositWithPermitAndExecuteOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposits funds with transfer approval of asset via permit function and executes an order at the same time."
      },
      "depositWithPermitAndExecutePreOrder(bytes32,uint256,uint8,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposits funds with transfer approval of asset via permit function and executes a pre-order at the same time."
      },
      "depositZCToken(bytes32,uint256,uint256)": {
        "notice": "Deposits ZCToken for the selected currency and maturity. ZC perpetual token can be deposited only when the maturity is 0. This function is not inactivated after the emergency termination to allow users to redeem ZCToken."
      },
      "executeEmergencySettlement()": {
        "notice": "Force settlement of all lending and borrowing positions. This function is executed under the present value as of the termination date."
      },
      "executeEmergencyTermination()": {
        "notice": "Executes an emergency termination to stop the protocol. Once this function is executed, the protocol cannot be run again. Also, users will only be able to redeem and withdraw."
      },
      "executeForcedRepayment(bytes32,bytes32,uint256,address)": {
        "notice": "Execute forced repayment for a borrowing position if repayment date is over."
      },
      "executeItayoseCall(bytes32,uint256)": {
        "notice": "Executes the Itayose call per selected currency."
      },
      "executeLiquidationCall(bytes32,bytes32,uint256,address)": {
        "notice": "Liquidates a lending or borrowing position if the user's coverage is hight."
      },
      "executeOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Executes an order. Takes orders if the order is matched, and places new order if not match it. In addition, converts the future value to the genesis value if there is future value in past maturity before the execution of order creation."
      },
      "executePreOrder(bytes32,uint256,uint8,uint256,uint256)": {
        "notice": "Executes a pre-order. A pre-order will only be accepted from 168 hours (7 days) to 1 hour before the order book opens (Pre-order period). At the end of this period, Itayose will be executed."
      },
      "executeRedemption(bytes32,uint256)": {
        "notice": "Redeem user's lending positions. Redemption can only be executed once the order book has matured after the currency has been delisted."
      },
      "executeRepayment(bytes32,uint256)": {
        "notice": "Repay user's borrowing positions. Repayment can only be executed once the order book has matured after the currency has been delisted."
      },
      "getCircuitBreakerLimitRange(bytes32)": {
        "notice": "Gets the limit range in unit price for the circuit breaker"
      },
      "getCurrentMinDebtUnitPrice(bytes32,uint256)": {
        "notice": "Gets the current min debt unit price. This price fluctuates depending on the current maturity."
      },
      "getFutureValueVault(bytes32)": {
        "notice": "Gets the future value contract address for the selected currency and maturity."
      },
      "getGenesisDate(bytes32)": {
        "notice": "Gets the genesis date when the first market opens for the selected currency."
      },
      "getGenesisValue(bytes32,address)": {
        "notice": "Gets the genesis value of the account."
      },
      "getLendingMarket(bytes32)": {
        "notice": "Gets the lending market contract address for the selected currency."
      },
      "getMarketBasePeriod()": {
        "notice": "Gets the base period for market maturity"
      },
      "getMaturities(bytes32)": {
        "notice": "Gets maturities for the selected currency."
      },
      "getMinDebtUnitPrice(bytes32)": {
        "notice": "Gets the min debt unit price for the selected currency. This price is based on a one-year maturity."
      },
      "getOrderBookId(bytes32,uint256)": {
        "notice": "Gets the order book id for the selected currency and maturity."
      },
      "getOrderBookIds(bytes32)": {
        "notice": "Gets the order book ids."
      },
      "getOrderEstimation((bytes32,uint256,address,uint8,uint256,uint256,uint256,bool))": {
        "notice": "Gets the estimated order result by the calculation of the amount to be filled when executing an order in the order books."
      },
      "getOrderFeeRate(bytes32)": {
        "notice": "Gets the order fee rate"
      },
      "getPendingOrderAmount(bytes32,uint256)": {
        "notice": "Gets the total amount of pending orders that is not cleaned up yet."
      },
      "getPosition(bytes32,uint256,address)": {
        "notice": "Gets user's active position from the future value vault"
      },
      "getRevision()": {
        "notice": "Gets the revision number of the contract"
      },
      "getTerminationCollateralRatio(bytes32)": {
        "notice": "Gets the collateral ratio of each token in TokenVault at the emergency termination."
      },
      "getTerminationCurrencyCache(bytes32)": {
        "notice": "Gets the currency information cached at the emergency termination."
      },
      "getTerminationDate()": {
        "notice": "Gets the date at the emergency termination."
      },
      "getTotalPresentValue(bytes32,address)": {
        "notice": "Gets the total present value of the account for selected currency."
      },
      "getTotalPresentValueInBaseCurrency(address)": {
        "notice": "Gets the total present value of the account converted to base currency."
      },
      "getUsedCurrencies(address)": {
        "notice": "Get all the currencies in which the user has lending positions or orders."
      },
      "getWithdrawableZCTokenAmount(bytes32,uint256,address)": {
        "notice": "Gets the withdrawable ZCToken amount for the selected currency and maturity. ZC perpetual token amount is returned only when the maturity is 0."
      },
      "getZCToken(bytes32,uint256)": {
        "notice": "Gets ZC Token address for the selected currency and maturity."
      },
      "getZCTokenInfo(address)": {
        "notice": "Gets ZC Token info for the selected ZC Token address."
      },
      "initialize(address,address,uint256)": {
        "notice": "Initializes the contract."
      },
      "initializeLendingMarket(bytes32,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize the lending market to set a genesis date and compound factor"
      },
      "isInitializedLendingMarket(bytes32)": {
        "notice": "Gets if the lending market is initialized."
      },
      "isRedemptionRequired(address)": {
        "notice": "Gets if the user needs to redeem the funds."
      },
      "isTerminated()": {
        "notice": "Gets if the protocol has not been terminated."
      },
      "isValidMaturity(bytes32,uint256)": {
        "notice": "Gets if the maturity is valid."
      },
      "migrateLendingMarket(bytes32,uint256)": {
        "notice": "Migrate the lending market to the new version."
      },
      "pauseLendingMarket(bytes32)": {
        "notice": "Pauses the lending market by currency"
      },
      "removeOperator(address)": {
        "notice": "Removes an admin as Operator"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account. This function is disabled by overriding it with a revert."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "rotateOrderBooks(bytes32)": {
        "notice": "Rotates the order books. In this rotation, the following actions are happened. - Updates the maturity at the beginning of the order book array. - Moves the beginning of the order book array to the end of it (Market rotation). - Update the compound factor in this contract using the next order book unit price. (Auto-rolls) - Clean up the reserve fund contract"
      },
      "unpauseLendingMarket(bytes32)": {
        "notice": "Unpauses the lending market by currency"
      },
      "unwindPosition(bytes32,uint256)": {
        "notice": "Unwinds user's lending or borrowing positions by creating an opposite position order."
      },
      "updateCircuitBreakerLimitRange(bytes32,uint256)": {
        "notice": "Updates the auto-roll fee rate"
      },
      "updateMinDebtUnitPrice(bytes32,uint256)": {
        "notice": "Updates the min debt unit price for the selected currency."
      },
      "updateOrderFeeRate(bytes32,uint256)": {
        "notice": "Updates the order fee rate"
      },
      "withdrawZCToken(bytes32,uint256,uint256)": {
        "notice": "Withdraws ZCToken for the selected currency and maturity. ZC perpetual token can be withdrawn only when the maturity is 0."
      }
    },
    "notice": "Implements the module to manage separated lending market contracts per currency. This contract also works as a factory contract that can deploy (start) a new lending market & order book for selected currency and maturity and has the calculation logic for the following user's funds in addition. - Present Value(PV) - Future Value(FV) - Genesis Value(GV) Once the order book is created, it will be rotated and reused once it reaches its maturity date. At the time of rotation, a new maturity date is set and the compound factor is updated. The users mainly call this contract to execute orders to lend or borrow funds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1618,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1445,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 1448,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 51708,
        "contract": "contracts/protocol/LendingMarketController.sol:LendingMarketController",
        "label": "lockedBy",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}