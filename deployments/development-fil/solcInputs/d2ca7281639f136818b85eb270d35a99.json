{
  "language": "Solidity",
  "sources": {
    "contracts/dependencies/chainlink/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorInterface.sol)\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n    function latestAnswer() external view returns (int256);\n\n    function latestTimestamp() external view returns (uint256);\n\n    function latestRound() external view returns (uint256);\n\n    function getAnswer(uint256 roundId) external view returns (int256);\n\n    function getTimestamp(uint256 roundId) external view returns (uint256);\n\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "contracts/dependencies/chainlink/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV2V3Interface.sol)\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "contracts/dependencies/chainlink/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(\n        uint80 _roundId\n    )\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/external/oracles/interfaces/IParasailAggregator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.19;\n\ninterface IParasailAggregator {\n    function getAggregatedPrice() external view returns (uint256);\n}\n"
    },
    "contracts/external/oracles/interfaces/IWPFIL.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.19;\n\ninterface IWPFIL {\n    function getPFILByWPFIL(uint256 _wpFILAmount) external view returns (uint256);\n}\n"
    },
    "contracts/external/oracles/ParasailWPFILAggregator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.19;\n\nimport {IParasailAggregator} from \"./interfaces/IParasailAggregator.sol\";\nimport {IWPFIL} from \"./interfaces/IWPFIL.sol\";\nimport {AggregatorV2V3Interface} from \"../../dependencies/chainlink/AggregatorV2V3Interface.sol\";\n\ncontract ParasailWPFILAggregator is AggregatorV2V3Interface {\n    IWPFIL wpfil;\n    IParasailAggregator aggregator;\n\n    constructor(address _aggregator, address _wpfil) {\n        aggregator = IParasailAggregator(_aggregator);\n        wpfil = IWPFIL(_wpfil);\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    function description() public pure returns (string memory) {\n        return \"wpFIL / FIL\";\n    }\n\n    function version() public pure returns (uint256) {\n        return 1;\n    }\n\n    function latestAnswer() public view returns (int256) {\n        return int256(wpfil.getPFILByWPFIL(aggregator.getAggregatedPrice()));\n    }\n\n    function latestTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function latestRound() public view returns (uint256) {\n        return latestTimestamp();\n    }\n\n    function getAnswer(uint256) public view returns (int256) {\n        return latestAnswer();\n    }\n\n    function getTimestamp(uint256) external view returns (uint256) {\n        return latestTimestamp();\n    }\n\n    function getRoundData(\n        uint80 _roundId\n    )\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        uint256 timestamp = latestTimestamp();\n        return (_roundId, latestAnswer(), timestamp, timestamp, uint80(timestamp));\n    }\n\n    function latestRoundData()\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        uint256 timestamp = latestTimestamp();\n        roundId = uint80(timestamp);\n        return (roundId, latestAnswer(), timestamp, timestamp, roundId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}