{
  "address": "0x84F6ba66ED9CD9c92881D55C1C919BD7534444E0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pyth",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pyth",
      "outputs": [
        {
          "internalType": "contract IPyth",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "priceUpdateData",
          "type": "bytes[]"
        }
      ],
      "name": "updateFeeds",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc90a4edecd479d5912ac7505546b2f1d3fd2f8b1a2b87cf8e91e6a1ee3e13341",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x84F6ba66ED9CD9c92881D55C1C919BD7534444E0",
    "transactionIndex": 2,
    "gasUsed": "60725952",
    "logsBloom": "0xb6975d9ff1f0c8550b13d1e6f5d9f77d4c5feecded730c78fb8de8512a6e4a3f8fe736521af896d273bbb13ae4cb8ddedfe5bece9f75a5e245e2d0c306e734effb1ae7ceff658efe4efd6249bf7e8e7f0e3f3c868fefaffd66aff938be5ef3bb78f6deca17d16e9f271651c536282fa226c47ffe4577f652ef3c26f7efdef45dd6f38665d9fb0be157d876ff5ec646bf4bf5fb65b3d5f7f2bfe24d09ccea29785f45fceefef7a98f76c3b5ba78dfadda35b7d78679d9c731efbec93be742ecdb7e763eaaf87419b27dbc6ce33fa4f49e23b77989b7cf3a4f46a297efd01e7a6ae676c87edb3cc1d42bd2150aa23a3d6c2ad211f067d6997cf3cf1da33de1dffe",
    "blockHash": "0x05f434eee616e16e350c506aa77cfc22fd2ed9c0de248e9b4992a8f9a16b1ac7",
    "transactionHash": "0xc90a4edecd479d5912ac7505546b2f1d3fd2f8b1a2b87cf8e91e6a1ee3e13341",
    "logs": [],
    "blockNumber": 1518738,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA2aa501b19aff244D90cc15a4Cf739D2725B5729",
    "0x150ac9b959aee0051e4091f0ef5216d941f590e1c5e7f91cf7635b5c11628c0e",
    "tFIL / USD"
  ],
  "numDeployments": 30,
  "solcInputHash": "16efa0a5b1b11ce8668c2fd16ebcb816",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pyth\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pyth\",\"outputs\":[{\"internalType\":\"contract IPyth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"priceUpdateData\",\"type\":\"bytes[]\"}],\"name\":\"updateFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"A Chainlink-based aggregator contract powered by pyth network feeds\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract always uses the price publish time as the round id, as pyth network does not have a concept of rounds.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/external/oracles/PythAggregator.sol\":\"PythAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./PythStructs.sol\\\";\\nimport \\\"./IPythEvents.sol\\\";\\n\\n/// @title Consume prices from the Pyth Network (https://pyth.network/).\\n/// @dev Please refer to the guidance at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how to consume prices safely.\\n/// @author Pyth Data Association\\ninterface IPyth is IPythEvents {\\n    /// @notice Returns the period (in seconds) that a price feed is considered valid since its publish time\\n    function getValidTimePeriod() external view returns (uint validTimePeriod);\\n\\n    /// @notice Returns the price and confidence interval.\\n    /// @dev Reverts if the price has not been updated within the last `getValidTimePeriod()` seconds.\\n    /// @param id The Pyth Price Feed ID of which to fetch the price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price and confidence interval.\\n    /// @dev Reverts if the EMA price is not available.\\n    /// @param id The Pyth Price Feed ID of which to fetch the EMA price and confidence interval.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPrice(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price of a price feed without any sanity checks.\\n    /// @dev This function returns the most recent price update in this contract without any recency checks.\\n    /// This function is unsafe as the returned price update may be arbitrarily far in the past.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getPrice` or `getPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the price that is no older than `age` seconds of the current time.\\n    /// @dev This function is a sanity-checked version of `getPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\\n    /// @dev This function returns the same price as `getEmaPrice` in the case where the price is available.\\n    /// However, if the price is not recent this function returns the latest available price.\\n    ///\\n    /// The returned price can be from arbitrarily far in the past; this function makes no guarantees that\\n    /// the returned price is recent or useful for any particular application.\\n    ///\\n    /// Users of this function should check the `publishTime` in the price to ensure that the returned price is\\n    /// sufficiently recent for their application. If you are considering using this function, it may be\\n    /// safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceUnsafe(\\n        bytes32 id\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Returns the exponentially-weighted moving average price that is no older than `age` seconds\\n    /// of the current time.\\n    /// @dev This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in\\n    /// applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently\\n    /// recently.\\n    /// @return price - please read the documentation of PythStructs.Price to understand how to use this safely.\\n    function getEmaPriceNoOlderThan(\\n        bytes32 id,\\n        uint age\\n    ) external view returns (PythStructs.Price memory price);\\n\\n    /// @notice Update price feeds with given update messages.\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    /// Prices will be updated if they are more recent than the current stored prices.\\n    /// The call will succeed even if the update is not the most recent.\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    function updatePriceFeeds(bytes[] calldata updateData) external payable;\\n\\n    /// @notice Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is\\n    /// necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the\\n    /// given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    /// `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime\\n    /// of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have\\n    /// a newer or equal publish time than the given publish time, it will reject the transaction to save gas.\\n    /// Otherwise, it calls updatePriceFeeds method to update the prices.\\n    ///\\n    /// @dev Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param publishTimes Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\\n    function updatePriceFeedsIfNecessary(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64[] calldata publishTimes\\n    ) external payable;\\n\\n    /// @notice Returns the required fee to update an array of price updates.\\n    /// @param updateData Array of price update data.\\n    /// @return feeAmount The required fee in Wei.\\n    function getUpdateFee(\\n        bytes[] calldata updateData\\n    ) external view returns (uint feeAmount);\\n\\n    /// @notice Parse `updateData` and return price feeds of the given `priceIds` if they are all published\\n    /// within `minPublishTime` and `maxPublishTime`.\\n    ///\\n    /// You can use this method if you want to use a Pyth price at a fixed time and not the most recent price;\\n    /// otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    /// This method requires the caller to pay a fee in wei; the required fee can be computed by calling\\n    /// `getUpdateFee` with the length of the `updateData` array.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdates(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n\\n    /// @notice Similar to `parsePriceFeedUpdates` but ensures the updates returned are\\n    /// the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp,\\n    /// this method will return the first update. This method may store the price updates on-chain, if they\\n    /// are more recent than the current stored prices.\\n    ///\\n    ///\\n    /// @dev Reverts if the transferred fee is not sufficient or the updateData is invalid or there is\\n    /// no update for any of the given `priceIds` within the given time range and uniqueness condition.\\n    /// @param updateData Array of price update data.\\n    /// @param priceIds Array of price ids.\\n    /// @param minPublishTime minimum acceptable publishTime for the given `priceIds`.\\n    /// @param maxPublishTime maximum acceptable publishTime for the given `priceIds`.\\n    /// @return priceFeeds Array of the price feeds corresponding to the given `priceIds` (with the same order).\\n    function parsePriceFeedUpdatesUnique(\\n        bytes[] calldata updateData,\\n        bytes32[] calldata priceIds,\\n        uint64 minPublishTime,\\n        uint64 maxPublishTime\\n    ) external payable returns (PythStructs.PriceFeed[] memory priceFeeds);\\n}\\n\",\"keccak256\":\"0xe06dbd61ccf409fffc0a2449eb8bb6c2d245609698c3c6eddad7cd0f3822d215\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title IPythEvents contains the events that Pyth contract emits.\\n/// @dev This interface can be used for listening to the updates for off-chain and testing purposes.\\ninterface IPythEvents {\\n    /// @dev Emitted when the price feed with `id` has received a fresh update.\\n    /// @param id The Pyth Price Feed ID.\\n    /// @param publishTime Publish time of the given price update.\\n    /// @param price Price of the given price update.\\n    /// @param conf Confidence interval of the given price update.\\n    event PriceFeedUpdate(\\n        bytes32 indexed id,\\n        uint64 publishTime,\\n        int64 price,\\n        uint64 conf\\n    );\\n}\\n\",\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\"},\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ncontract PythStructs {\\n    // A price with a degree of uncertainty, represented as a price +- a confidence interval.\\n    //\\n    // The confidence interval roughly corresponds to the standard error of a normal distribution.\\n    // Both the price and confidence are stored in a fixed-point numeric representation,\\n    // `x * (10^expo)`, where `expo` is the exponent.\\n    //\\n    // Please refer to the documentation at https://docs.pyth.network/documentation/pythnet-price-feeds/best-practices for how\\n    // to how this price safely.\\n    struct Price {\\n        // Price\\n        int64 price;\\n        // Confidence interval around the price\\n        uint64 conf;\\n        // Price exponent\\n        int32 expo;\\n        // Unix timestamp describing when the price was published\\n        uint publishTime;\\n    }\\n\\n    // PriceFeed represents a current aggregate price from pyth publisher feeds.\\n    struct PriceFeed {\\n        // The price ID.\\n        bytes32 id;\\n        // Latest available price\\n        Price price;\\n        // Latest available exponentially-weighted moving average price\\n        Price emaPrice;\\n    }\\n}\\n\",\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\"},\"contracts/dependencies/chainlink/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorInterface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n\\n    function latestTimestamp() external view returns (uint256);\\n\\n    function latestRound() external view returns (uint256);\\n\\n    function getAnswer(uint256 roundId) external view returns (int256);\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n    event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n    event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xbb2b4659b80693d9cd9ad70461fc60a3feefda606d689ec07103dfdcd45aa9b1\",\"license\":\"MIT\"},\"contracts/dependencies/chainlink/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV2V3Interface.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xffe9988b76235bc1bfc9a791b7942bec59db005318909880d2ed2c84a8557ad5\",\"license\":\"MIT\"},\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/external/oracles/PythAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {PythStructs} from \\\"@pythnetwork/pyth-sdk-solidity/PythStructs.sol\\\";\\nimport {IPyth} from \\\"@pythnetwork/pyth-sdk-solidity/IPyth.sol\\\";\\nimport {AggregatorV2V3Interface} from \\\"../../dependencies/chainlink/AggregatorV2V3Interface.sol\\\";\\n\\n/**\\n * @title A Chainlink-based aggregator contract powered by pyth network feeds\\n * @notice This contract always uses the price publish time as the round id,\\n * as pyth network does not have a concept of rounds.\\n */\\ncontract PythAggregator is AggregatorV2V3Interface {\\n    bytes32 public priceId;\\n    IPyth public pyth;\\n    string public description;\\n\\n    constructor(address _pyth, bytes32 _priceId, string memory _description) {\\n        priceId = _priceId;\\n        pyth = IPyth(_pyth);\\n        description = _description;\\n    }\\n\\n    function updateFeeds(bytes[] calldata priceUpdateData) public payable {\\n        // Update the prices to the latest available values and pay the required fee for it. The `priceUpdateData` data\\n        // should be retrieved from our off-chain Price Service API using the `pyth-evm-js` package.\\n        // See section \\\"How Pyth Works on EVM Chains\\\" below for more information.\\n        uint fee = pyth.getUpdateFee(priceUpdateData);\\n        pyth.updatePriceFeeds{value: fee}(priceUpdateData);\\n\\n        // refund remaining eth\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"PythAggregator: REFUND_FAILED\\\");\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return uint8(-1 * int8(price.expo));\\n    }\\n\\n    function version() public pure returns (uint256) {\\n        return 1;\\n    }\\n\\n    function latestAnswer() public view virtual returns (int256) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return int256(price.price);\\n    }\\n\\n    function latestTimestamp() public view returns (uint256) {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return price.publishTime;\\n    }\\n\\n    function latestRound() public view returns (uint256) {\\n        // use timestamp as the round id\\n        return latestTimestamp();\\n    }\\n\\n    function getAnswer(uint256) public view returns (int256) {\\n        return latestAnswer();\\n    }\\n\\n    function getTimestamp(uint256) external view returns (uint256) {\\n        return latestTimestamp();\\n    }\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        return (\\n            _roundId,\\n            int256(price.price),\\n            price.publishTime,\\n            price.publishTime,\\n            uint80(price.publishTime)\\n        );\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        PythStructs.Price memory price = pyth.getPriceUnsafe(priceId);\\n        roundId = uint80(price.publishTime);\\n        return (roundId, int256(price.price), price.publishTime, price.publishTime, roundId);\\n    }\\n}\\n\",\"keccak256\":\"0xe16943b5f16ecba73710cd7c7bfbbcb1c20595ae4762490691f799f074874005\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000dc038038062000dc0833981016040819052620000349162000082565b6000829055600180546001600160a01b0319166001600160a01b038516179055600262000062828262000210565b50505050620002dc565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156200009857600080fd5b83516001600160a01b0381168114620000b057600080fd5b60208581015160408701519295509350906001600160401b0380821115620000d757600080fd5b818701915087601f830112620000ec57600080fd5b8151818111156200010157620001016200006c565b604051601f8201601f19908116603f011681019083821181831017156200012c576200012c6200006c565b816040528281528a868487010111156200014557600080fd5b600093505b828410156200016957848401860151818501870152928501926200014a565b60008684830101528096505050505050509250925092565b600181811c908216806200019657607f821691505b602082108103620001b757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020b57600081815260208120601f850160051c81016020861015620001e65750805b601f850160051c820191505b818110156200020757828155600101620001f2565b5050505b505050565b81516001600160401b038111156200022c576200022c6200006c565b62000244816200023d845462000181565b84620001bd565b602080601f8311600181146200027c5760008415620002635750858301515b600019600386901b1c1916600185901b17855562000207565b600085815260208120601f198616915b82811015620002ad578886015182559484019460019091019084016200028c565b5085821015620002cc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610ad480620002ec6000396000f3fe6080604052600436106100c25760003560e01c80638205bf6a1161007f578063b633620c11610059578063b633620c14610203578063bc36c0a914610223578063f98d06f014610238578063feaf968c1461027057600080fd5b80638205bf6a146101775780639a6fc8f51461018c578063b5ab58dc146101e357600080fd5b806331189334146100c7578063313ce567146100f057806350d25bcd1461011757806354fd4d501461012c578063668a0f02146101405780637284e41614610155575b600080fd5b3480156100d357600080fd5b506100dd60005481565b6040519081526020015b60405180910390f35b3480156100fc57600080fd5b50610105610285565b60405160ff90911681526020016100e7565b34801561012357600080fd5b506100dd610315565b34801561013857600080fd5b5060016100dd565b34801561014c57600080fd5b506100dd610395565b34801561016157600080fd5b5061016a6103a4565b6040516100e79190610783565b34801561018357600080fd5b506100dd610432565b34801561019857600080fd5b506101ac6101a73660046107d1565b6104b2565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e7565b3480156101ef57600080fd5b506100dd6101fe366004610804565b61054f565b34801561020f57600080fd5b506100dd61021e366004610804565b61055f565b61023661023136600461081d565b610569565b005b34801561024457600080fd5b50600154610258906001600160a01b031681565b6040516001600160a01b0390911681526020016100e7565b34801561027c57600080fd5b506101ac6106e6565b600154600080546040516396834ad360e01b81526004810191909152909182916001600160a01b03909116906396834ad390602401608060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb91906108c1565b9050806040015160001961030f9190610951565b91505090565b600154600080546040516396834ad360e01b81526004810191909152909182916001600160a01b03909116906396834ad390602401608060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906108c1565b5160070b92915050565b600061039f610432565b905090565b600280546103b190610986565b80601f01602080910402602001604051908101604052809291908181526020018280546103dd90610986565b801561042a5780601f106103ff5761010080835404028352916020019161042a565b820191906000526020600020905b81548152906001019060200180831161040d57829003601f168201915b505050505081565b600154600080546040516396834ad360e01b81526004810191909152909182916001600160a01b03909116906396834ad390602401608060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a891906108c1565b6060015192915050565b600154600080546040516396834ad360e01b815260048101919091529091829182918291829182916001600160a01b03909116906396834ad390602401608060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053091906108c1565b8051606090910151979860079190910b97965086955085945092505050565b6000610559610315565b92915050565b6000610559610432565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed459061059c90869086906004016109e9565b602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190610a85565b600154604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e2890839061061290879087906004016109e9565b6000604051808303818588803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b5050604051600093503392504791508381818185875af1925050503d8060008114610686576040519150601f19603f3d011682016040523d82523d6000602084013e61068b565b606091505b50509050806106e05760405162461bcd60e51b815260206004820152601d60248201527f5079746841676772656761746f723a20524546554e445f4641494c4544000000604482015260640160405180910390fd5b50505050565b600154600080546040516396834ad360e01b815260048101919091529091829182918291829182916001600160a01b03909116906396834ad390602401608060405180830381865afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906108c1565b60608101519051909760079190910b9650879550859450849350915050565b600060208083528351808285015260005b818110156107b057858101830151858201604001528201610794565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156107e357600080fd5b813569ffffffffffffffffffff811681146107fd57600080fd5b9392505050565b60006020828403121561081657600080fd5b5035919050565b6000806020838503121561083057600080fd5b823567ffffffffffffffff8082111561084857600080fd5b818501915085601f83011261085c57600080fd5b81358181111561086b57600080fd5b8660208260051b850101111561088057600080fd5b60209290920196919550909350505050565b805167ffffffffffffffff811681146108aa57600080fd5b919050565b8051600381900b81146108aa57600080fd5b6000608082840312156108d357600080fd5b6040516080810181811067ffffffffffffffff8211171561090457634e487b7160e01b600052604160045260246000fd5b6040528251600781900b811461091957600080fd5b815261092760208401610892565b6020820152610938604084016108af565b6040820152606083015160608201528091505092915050565b60008260000b8260000b028060000b915080821461097f57634e487b7160e01b600052601160045260246000fd5b5092915050565b600181811c9082168061099a57607f821691505b6020821081036109ba57634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b87811015610a7857868403603f190183528135368a9003601e19018112610a2e57600080fd5b8901858101903567ffffffffffffffff811115610a4a57600080fd5b803603821315610a5957600080fd5b610a648682846109c0565b955050509184019190840190600101610a08565b5091979650505050505050565b600060208284031215610a9757600080fd5b505191905056fea264697066735822122041389079740c1b6d2ef373ecf2945e9e5e4a1e549fa0c993dd13e9de93aa22cf64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638205bf6a1161007f578063b633620c11610059578063b633620c14610203578063bc36c0a914610223578063f98d06f014610238578063feaf968c1461027057600080fd5b80638205bf6a146101775780639a6fc8f51461018c578063b5ab58dc146101e357600080fd5b806331189334146100c7578063313ce567146100f057806350d25bcd1461011757806354fd4d501461012c578063668a0f02146101405780637284e41614610155575b600080fd5b3480156100d357600080fd5b506100dd60005481565b6040519081526020015b60405180910390f35b3480156100fc57600080fd5b50610105610285565b60405160ff90911681526020016100e7565b34801561012357600080fd5b506100dd610315565b34801561013857600080fd5b5060016100dd565b34801561014c57600080fd5b506100dd610395565b34801561016157600080fd5b5061016a6103a4565b6040516100e79190610783565b34801561018357600080fd5b506100dd610432565b34801561019857600080fd5b506101ac6101a73660046107d1565b6104b2565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100e7565b3480156101ef57600080fd5b506100dd6101fe366004610804565b61054f565b34801561020f57600080fd5b506100dd61021e366004610804565b61055f565b61023661023136600461081d565b610569565b005b34801561024457600080fd5b50600154610258906001600160a01b031681565b6040516001600160a01b0390911681526020016100e7565b34801561027c57600080fd5b506101ac6106e6565b600154600080546040516396834ad360e01b81526004810191909152909182916001600160a01b03909116906396834ad390602401608060405180830381865afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb91906108c1565b9050806040015160001961030f9190610951565b91505090565b600154600080546040516396834ad360e01b81526004810191909152909182916001600160a01b03909116906396834ad390602401608060405180830381865afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b91906108c1565b5160070b92915050565b600061039f610432565b905090565b600280546103b190610986565b80601f01602080910402602001604051908101604052809291908181526020018280546103dd90610986565b801561042a5780601f106103ff5761010080835404028352916020019161042a565b820191906000526020600020905b81548152906001019060200180831161040d57829003601f168201915b505050505081565b600154600080546040516396834ad360e01b81526004810191909152909182916001600160a01b03909116906396834ad390602401608060405180830381865afa158015610484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a891906108c1565b6060015192915050565b600154600080546040516396834ad360e01b815260048101919091529091829182918291829182916001600160a01b03909116906396834ad390602401608060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053091906108c1565b8051606090910151979860079190910b97965086955085945092505050565b6000610559610315565b92915050565b6000610559610432565b60015460405163d47eed4560e01b81526000916001600160a01b03169063d47eed459061059c90869086906004016109e9565b602060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190610a85565b600154604051631df3cbc560e31b81529192506001600160a01b03169063ef9e5e2890839061061290879087906004016109e9565b6000604051808303818588803b15801561062b57600080fd5b505af115801561063f573d6000803e3d6000fd5b5050604051600093503392504791508381818185875af1925050503d8060008114610686576040519150601f19603f3d011682016040523d82523d6000602084013e61068b565b606091505b50509050806106e05760405162461bcd60e51b815260206004820152601d60248201527f5079746841676772656761746f723a20524546554e445f4641494c4544000000604482015260640160405180910390fd5b50505050565b600154600080546040516396834ad360e01b815260048101919091529091829182918291829182916001600160a01b03909116906396834ad390602401608060405180830381865afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906108c1565b60608101519051909760079190910b9650879550859450849350915050565b600060208083528351808285015260005b818110156107b057858101830151858201604001528201610794565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156107e357600080fd5b813569ffffffffffffffffffff811681146107fd57600080fd5b9392505050565b60006020828403121561081657600080fd5b5035919050565b6000806020838503121561083057600080fd5b823567ffffffffffffffff8082111561084857600080fd5b818501915085601f83011261085c57600080fd5b81358181111561086b57600080fd5b8660208260051b850101111561088057600080fd5b60209290920196919550909350505050565b805167ffffffffffffffff811681146108aa57600080fd5b919050565b8051600381900b81146108aa57600080fd5b6000608082840312156108d357600080fd5b6040516080810181811067ffffffffffffffff8211171561090457634e487b7160e01b600052604160045260246000fd5b6040528251600781900b811461091957600080fd5b815261092760208401610892565b6020820152610938604084016108af565b6040820152606083015160608201528091505092915050565b60008260000b8260000b028060000b915080821461097f57634e487b7160e01b600052601160045260246000fd5b5092915050565b600181811c9082168061099a57607f821691505b6020821081036109ba57634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208082528181018390526000906040600585901b8401810190840186845b87811015610a7857868403603f190183528135368a9003601e19018112610a2e57600080fd5b8901858101903567ffffffffffffffff811115610a4a57600080fd5b803603821315610a5957600080fd5b610a648682846109c0565b955050509184019190840190600101610a08565b5091979650505050505050565b600060208284031215610a9757600080fd5b505191905056fea264697066735822122041389079740c1b6d2ef373ecf2945e9e5e4a1e549fa0c993dd13e9de93aa22cf64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "A Chainlink-based aggregator contract powered by pyth network feeds",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract always uses the price publish time as the round id, as pyth network does not have a concept of rounds.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 452,
        "contract": "contracts/external/oracles/PythAggregator.sol:PythAggregator",
        "label": "priceId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 455,
        "contract": "contracts/external/oracles/PythAggregator.sol:PythAggregator",
        "label": "pyth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPyth)136"
      },
      {
        "astId": 457,
        "contract": "contracts/external/oracles/PythAggregator.sol:PythAggregator",
        "label": "description",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPyth)136": {
        "encoding": "inplace",
        "label": "contract IPyth",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}