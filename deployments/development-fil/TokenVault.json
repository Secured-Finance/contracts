{
  "address": "0xB781E215664E565a08972f99D86a0870b2CCD35f",
  "abi": [
    {
      "inputs": [],
      "name": "AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotBaseCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCurrency",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFullLiquidationThresholdRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationProtocolFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidationThresholdRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLiquidatorFeeRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketTerminated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NotAllowedAccess",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OnlyAcceptedContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedemptionIsRequired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnregisteredCurrency",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CurrencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "FullLiquidationThresholdRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidationProtocolFeeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidationThresholdRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "LiquidatorFeeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "ccy",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "workingLendOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "workingBorrowOrdersAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowedAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILendingMarketController.AdditionalFunds",
          "name": "_additionalFunds",
          "type": "tuple"
        }
      ],
      "name": "calculateCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInsufficientDepositAmount",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateLiquidationFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "cleanUpUsedCurrencies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_permitV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_permitR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_permitS",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermitFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_permitV",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_permitR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_permitS",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermitTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getBorrowableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCollateralDetail",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUsedCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_liquidationCcy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationAmountMaximum",
          "type": "uint256"
        }
      ],
      "name": "getLiquidationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationConfiguration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationThresholdRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getTotalDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnusedCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUsedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getWithdrawableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fullLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nativeToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_ccys",
          "type": "bytes32[]"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "isCollateralCurrencies",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_orderCcy",
          "type": "bytes32"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEnoughCollateral",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isEnoughDepositInOrderCcy",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isRegisteredCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "registerCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "untransferredAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isCollateral",
          "type": "bool"
        }
      ],
      "name": "updateCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fullLiquidationThresholdRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationProtocolFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidatorFeeRate",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x08fe06cee6c6aa14acf57d05954bb0d9e08bba3ac5f2b601d0e68e2ab2f6d6e3",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xFBE0017Ce3320781B403B44F6e513c4931F7Cdb8",
    "transactionIndex": 3,
    "gasUsed": "126557124",
    "logsBloom": "0x
    "blockHash": "0x5bafc3c2f735c43a3341234b40f9b9fb5b90756ab657b6401074bf688fb88322",
    "transactionHash": "0x08fe06cee6c6aa14acf57d05954bb0d9e08bba3ac5f2b601d0e68e2ab2f6d6e3",
    "logs": [],
    "blockNumber": 3005576,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "73110a1d619bc32510b17543e7136645",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotBaseCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCurrency\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFullLiquidationThresholdRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationProtocolFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationThresholdRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidatorFeeRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketTerminated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotAllowedAccess\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OnlyAcceptedContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedemptionIsRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisteredCurrency\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CurrencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"FullLiquidationThresholdRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidationProtocolFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidationThresholdRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"LiquidatorFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"workingLendOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"workingBorrowOrdersAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILendingMarketController.AdditionalFunds\",\"name\":\"_additionalFunds\",\"type\":\"tuple\"}],\"name\":\"calculateCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInsufficientDepositAmount\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidationFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"cleanUpUsedCurrencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_permitS\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_permitV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_permitR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_permitS\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermitTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"executeForcedReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getBorrowableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollateralDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUsedCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_liquidationCcy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationAmountMaximum\",\"type\":\"uint256\"}],\"name\":\"getLiquidationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationConfiguration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatorFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationThresholdRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getTotalDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnusedCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUsedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getWithdrawableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fullLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_ccys\",\"type\":\"bytes32[]\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"isCollateralCurrencies\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_orderCcy\",\"type\":\"bytes32\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEnoughCollateral\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnoughDepositInOrderCcy\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isRegisteredCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"registerCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"untransferredAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isCollateral\",\"type\":\"bool\"}],\"name\":\"updateCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fullLiquidationThresholdRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationProtocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addDepositAmount(address,bytes32,uint256)\":{\"details\":\"Adds deposit amount.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"addOperator(address)\":{\"params\":{\"admin\":\"The address of the new admin\"}},\"calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_additionalFunds\":\"Additional funds for calculating the coverage\",\"_user\":\"User's address\"},\"returns\":{\"coverage\":\"The rate of collateral used\",\"isInsufficientDepositAmount\":\"The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not\"}},\"calculateLiquidationFees(uint256)\":{\"params\":{\"_amount\":\"Liquidation amount\"},\"returns\":{\"liquidatorFee\":\"Liquidation fee amount received by liquidators\",\"protocolFee\":\"Liquidation fee amount received by protocol\"}},\"cleanUpUsedCurrencies(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"deposit(bytes32,uint256)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\"}},\"depositFrom(address,bytes32,uint256)\":{\"details\":\"Deposits funds by the `from` into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"Address of the user\"}},\"depositTo(bytes32,uint256,address)\":{\"details\":\"Deposits funds by the caller into collateral.\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_onBehalfOf\":\"The beneficiary of the supplied deposits\"}},\"depositWithPermitFrom(address,bytes32,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Deposits funds by the `from` into collateral with transfer approval of asset via permit function\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_deadline\":\"The deadline timestamp that the permit is valid\",\"_from\":\"Address of the user\",\"_permitR\":\"The R parameter of ERC712 permit sig\",\"_permitS\":\"The S parameter of ERC712 permit sig\",\"_permitV\":\"The V parameter of ERC712 permit sig\"}},\"depositWithPermitTo(bytes32,uint256,address,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Deposits funds by the caller into collateral with transfer approval of asset via permit function\",\"params\":{\"_amount\":\"Amount of funds to deposit\",\"_ccy\":\"Currency name in bytes32\",\"_deadline\":\"The deadline timestamp that the permit is valid\",\"_onBehalfOf\":\"The beneficiary of the supplied deposits\",\"_permitR\":\"The R parameter of ERC712 permit sig\",\"_permitS\":\"The S parameter of ERC712 permit sig\",\"_permitV\":\"The V parameter of ERC712 permit sig\"}},\"executeForcedReset(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"getBorrowableAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"amount The borrowable amount\"}},\"getCollateralAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"amount\":\"The collateral amount\"}},\"getCollateralCurrencies()\":{\"returns\":{\"_0\":\"Array of the currency accepted as collateral\"}},\"getCollateralDetail(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalCollateral\":\"The total collateral amount in the base currency\",\"totalDeposit\":\"The total deposit amount in the base currency\",\"totalUsedCollateral\":\"The total used collateral amount in the base currency\"}},\"getCoverage(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The rate of collateral used\"}},\"getDepositAmount(address,bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The deposited amount\"}},\"getLiquidationAmount(address,bytes32,uint256)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"liquidationAmount\":\"The the amount to be liquidated\"}},\"getLiquidationConfiguration()\":{\"details\":\"Gets the liquidation configuration\",\"returns\":{\"fullLiquidationThresholdRate\":\"The full liquidation threshold rate\",\"liquidationProtocolFeeRate\":\"The liquidation fee received by liquidators\",\"liquidationThresholdRate\":\"The liquidation threshold rate\",\"liquidatorFeeRate\":\"The liquidation protocol fee received by protocol\"}},\"getLiquidationThresholdRate()\":{\"returns\":{\"rate\":\"The liquidation threshold rate\"}},\"getRevision()\":{\"returns\":{\"_0\":\"The revision number\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTokenAddress(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The token contract address\"}},\"getTotalCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"totalCollateralAmount\":\"The total collateral amount in the base currency\"}},\"getTotalDepositAmount(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The total deposited amount\"}},\"getTotalUnusedCollateralAmount(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The total amount of unused collateral\"}},\"getUsedCurrencies(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The currency names in bytes32\"}},\"getWithdrawableCollateral(address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of the base currency that can be withdrawn\"}},\"getWithdrawableCollateral(bytes32,address)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"Maximum amount of the selected currency that can be withdrawn\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_fullLiquidationThresholdRate\":\"The full liquidation threshold rate\",\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\",\"_nativeToken\":\"The address of wrapped token of native currency\",\"_owner\":\"The address of the contract owner\",\"_resolver\":\"The address of the Address Resolver contract\"}},\"isCollateral(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"isCollateral(bytes32[])\":{\"params\":{\"_ccys\":\"Currency name list in bytes32\"},\"returns\":{\"isCollateralCurrencies\":\"Array of the boolean if the currency has been registered or not\"}},\"isCovered(address,bytes32)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"isEnoughCollateral\":\"The boolean if the user has enough collateral or not\",\"isEnoughDepositInOrderCcy\":\"The boolean if the user has enough deposit in the order currency or not\"}},\"isRegisteredCurrency(bytes32)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\"},\"returns\":{\"_0\":\"The boolean if the currency has been registered or not\"}},\"multicall(bytes[])\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Receives and executes a batch of function calls on this contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"registerCurrency(bytes32,address,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\",\"_tokenAddress\":\"Token contract address of the selected currency\"}},\"removeDepositAmount(address,bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\",\"_user\":\"User's address\"}},\"removeOperator(address)\":{\"params\":{\"admin\":\"The address of the admin to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.\",\"params\":{\"account\":\"The address of the account to revoke the role from\",\"role\":\"The role to be revoked\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferFrom(bytes32,address,address,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to sent\",\"_ccy\":\"Currency name in bytes32\",\"_from\":\"Sender's address\",\"_to\":\"Receiver's address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrency(bytes32,bool)\":{\"params\":{\"_ccy\":\"Currency name in bytes32\",\"_isCollateral\":\"Boolean if the selected currency is acceptable as collateral.\"}},\"updateLiquidationConfiguration(uint256,uint256,uint256,uint256)\":{\"details\":\"Update the liquidation configuration\",\"params\":{\"_liquidationProtocolFeeRate\":\"The liquidation fee rate received by protocol\",\"_liquidationThresholdRate\":\"The liquidation threshold rate\",\"_liquidatorFeeRate\":\"The liquidation fee rate received by liquidators\"}},\"withdraw(bytes32,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to withdraw.\",\"_ccy\":\"Currency name in bytes32\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOperator(address)\":{\"notice\":\"Adds a new admin as Operator\"},\"calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"Calculates the collateral rate used when additional funds are had by the user.\"},\"calculateLiquidationFees(uint256)\":{\"notice\":\"Gets the actual fee amounts calculated by rates.\"},\"cleanUpUsedCurrencies(address,bytes32)\":{\"notice\":\"Clean up the used currencies of the user.\"},\"executeForcedReset(address,bytes32)\":{\"notice\":\"Forces a reset of the user's deposit amount.\"},\"getBorrowableAmount(address,bytes32)\":{\"notice\":\"Gets the borrowable amount in the selected currency.\"},\"getCollateralAmount(address,bytes32)\":{\"notice\":\"Gets the total collateral amount of the selected currency.\"},\"getCollateralCurrencies()\":{\"notice\":\"Gets the currencies accepted as collateral\"},\"getCollateralDetail(address)\":{\"notice\":\"Gets the collateral detail.\"},\"getCoverage(address)\":{\"notice\":\"Gets the rate of collateral used.\"},\"getDepositAmount(address,bytes32)\":{\"notice\":\"Gets the amount deposited in the user's collateral.\"},\"getLiquidationAmount(address,bytes32,uint256)\":{\"notice\":\"Gets the amount to be liquidated.\"},\"getLiquidationThresholdRate()\":{\"notice\":\"Gets the liquidation threshold rate.\"},\"getRevision()\":{\"notice\":\"Gets the revision number of the contract\"},\"getTokenAddress(bytes32)\":{\"notice\":\"Gets the token contract address\"},\"getTotalCollateralAmount(address)\":{\"notice\":\"Gets the total collateral amount.\"},\"getTotalDepositAmount(bytes32)\":{\"notice\":\"Gets the total amount deposited of the selected currency\"},\"getTotalUnusedCollateralAmount(address)\":{\"notice\":\"Gets the total amount of the unused collateral in the base currency\"},\"getUsedCurrencies(address)\":{\"notice\":\"Gets the currencies that the user used as collateral.\"},\"getWithdrawableCollateral(address)\":{\"notice\":\"Gets the maximum amount of the base currency that can be withdrawn from user collateral.\"},\"getWithdrawableCollateral(bytes32,address)\":{\"notice\":\"Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\"},\"initialize(address,address,uint256,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes the contract.\"},\"isCollateral(bytes32)\":{\"notice\":\"Gets if the currency is acceptable as collateral\"},\"isCollateral(bytes32[])\":{\"notice\":\"Gets if the currencies are acceptable as collateral\"},\"isCovered(address,bytes32)\":{\"notice\":\"Gets if the collateral is sufficient or not\"},\"isRegisteredCurrency(bytes32)\":{\"notice\":\"Gets if the currency has been registered\"},\"pause()\":{\"notice\":\"Pauses the token vault.\"},\"registerCurrency(bytes32,address,bool)\":{\"notice\":\"Registers new currency and sets if it is acceptable as collateral.\"},\"removeDepositAmount(address,bytes32,uint256)\":{\"notice\":\"Removes deposit amount.\"},\"removeOperator(address)\":{\"notice\":\"Removes an admin as Operator\"},\"renounceRole(bytes32,address)\":{\"notice\":\"Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"transferFrom(bytes32,address,address,uint256)\":{\"notice\":\"Transfers the token from sender to receiver.\"},\"unpause()\":{\"notice\":\"Unpauses the token vault.\"},\"updateCurrency(bytes32,bool)\":{\"notice\":\"Updates the currency if it is acceptable as collateral.\"},\"updateLiquidationConfiguration(uint256,uint256,uint256,uint256)\":{\"notice\":\"Triggers only be contract owner\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws funds by the caller from unused collateral.\"}},\"notice\":\"Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the liquidation   - Liquidation threshold rate   - Liquidation fee rate received by protocol   - Liquidation fee rate received by liquidators\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/TokenVault.sol\":\"TokenVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xbc9ec150e13091594dfd8b1cd6016c962f3b1c681072f3c3fa989fdfa587d42f\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xb13e7a56a0af42137a3e04dccb39c6bd4233d5e5c324197af9d71c3f7af5359c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44e8974f420f05be7bf27220ef8e694d803a281eb0824a2c0d8960d864780bdf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Multicall.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Provides a function to batch together multiple calls in a single external call.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract Multicall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n        }\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xface9a29da6448061decb3506735c0c37aae8820ffaacfea982b1a8633be20d4\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfa76bf4fcc900c3a9ddff36dc639af871c463d9e0f69320d33cd916ab3f8efec\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/protocol/TokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {IERC20Permit} from \\\"../dependencies/openzeppelin/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {EnumerableSet} from \\\"../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\nimport {Multicall} from \\\"../dependencies/openzeppelin/utils/Multicall.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\nimport {Constants} from \\\"./libraries/Constants.sol\\\";\\nimport {TransferHelper} from \\\"./libraries/TransferHelper.sol\\\";\\nimport {DepositManagementLogic} from \\\"./libraries/logics/DepositManagementLogic.sol\\\";\\n// interfaces\\nimport {ITokenVault} from \\\"./interfaces/ITokenVault.sol\\\";\\nimport {ILendingMarketController} from \\\"./interfaces/ILendingMarketController.sol\\\";\\n// mixins\\nimport {MixinAccessControl} from \\\"./mixins/MixinAccessControl.sol\\\";\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\nimport {MixinLiquidationConfiguration} from \\\"./mixins/MixinLiquidationConfiguration.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Ownable} from \\\"./utils/Ownable.sol\\\";\\nimport {Pausable} from \\\"./utils/Pausable.sol\\\";\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"./storages/TokenVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the token in each currency for users.\\n *\\n * This contract manages the following data related to tokens.\\n * - Deposited token amount as the collateral\\n * - Parameters related to the liquidation\\n *   - Liquidation threshold rate\\n *   - Liquidation fee rate received by protocol\\n *   - Liquidation fee rate received by liquidators\\n */\\ncontract TokenVault is\\n    ITokenVault,\\n    MixinLiquidationConfiguration,\\n    MixinAccessControl,\\n    MixinAddressResolver,\\n    Pausable,\\n    Proxyable,\\n    Multicall\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Modifier to check if currency hasn't been registered yet\\n     * @param _ccy Currency name in bytes32\\n     */\\n    modifier onlyRegisteredCurrency(bytes32 _ccy) {\\n        if (!isRegisteredCurrency(_ccy)) revert UnregisteredCurrency();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Modifier to check if the protocol is active.\\n     */\\n    modifier ifActive() {\\n        if (lendingMarketController().isTerminated()) revert MarketTerminated();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _owner The address of the contract owner\\n     * @param _resolver The address of the Address Resolver contract\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _fullLiquidationThresholdRate  The full liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @param _nativeToken The address of wrapped token of native currency\\n     */\\n    function initialize(\\n        address _owner,\\n        address _resolver,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _fullLiquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate,\\n        address _nativeToken\\n    ) public initializer onlyProxy {\\n        _transferOwnership(_owner);\\n        registerAddressResolver(_resolver);\\n\\n        TransferHelper.initialize(_nativeToken);\\n        MixinAccessControl._setupInitialRoles(_owner);\\n        MixinLiquidationConfiguration._initialize(\\n            _owner,\\n            _liquidationThresholdRate,\\n            _fullLiquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](3);\\n        contracts[0] = Contracts.CURRENCY_CONTROLLER;\\n        contracts[1] = Contracts.LENDING_MARKET_CONTROLLER;\\n        contracts[2] = Contracts.RESERVE_FUND;\\n    }\\n\\n    receive() external payable {\\n        if (!TransferHelper.isNative(msg.sender)) {\\n            revert CallerNotBaseCurrency({caller: msg.sender});\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the collateral is sufficient or not\\n     * @param _user User's address\\n     * @return isEnoughCollateral The boolean if the user has enough collateral or not\\n     * @return isEnoughDepositInOrderCcy The boolean if the user has enough deposit in the order currency or not\\n     */\\n    function isCovered(\\n        address _user,\\n        bytes32 _orderCcy\\n    ) public view override returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy) {\\n        return DepositManagementLogic.isCovered(_user, _orderCcy);\\n    }\\n\\n    /**\\n     * @notice Gets if the currency is acceptable as collateral\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isCollateral(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().collateralCurrencies.contains(_ccy);\\n    }\\n\\n    /**\\n     * @notice Gets if the currencies are acceptable as collateral\\n     * @param _ccys Currency name list in bytes32\\n     * @return isCollateralCurrencies Array of the boolean if the currency has been registered or not\\n     */\\n    function isCollateral(\\n        bytes32[] calldata _ccys\\n    ) external view override returns (bool[] memory isCollateralCurrencies) {\\n        uint256 length = _ccys.length;\\n        isCollateralCurrencies = new bool[](length);\\n        for (uint256 i; i < length; i++) {\\n            isCollateralCurrencies[i] = isCollateral(_ccys[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets if the currency has been registered\\n     * @param _ccy Currency name in bytes32\\n     * @return The boolean if the currency has been registered or not\\n     */\\n    function isRegisteredCurrency(bytes32 _ccy) public view override returns (bool) {\\n        return Storage.slot().tokenAddresses[_ccy] != address(0);\\n    }\\n\\n    // @inheritdoc Proxyable\\n    function getRevision() external pure override returns (uint256) {\\n        return 0x2;\\n    }\\n\\n    /**\\n     * @notice Gets the token contract address\\n     * @param _ccy Currency name in bytes32\\n     * @return The token contract address\\n     */\\n    function getTokenAddress(bytes32 _ccy) public view override returns (address) {\\n        return Storage.slot().tokenAddresses[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the currencies accepted as collateral\\n     * @return Array of the currency accepted as collateral\\n     */\\n    function getCollateralCurrencies() external view override returns (bytes32[] memory) {\\n        return Storage.slot().collateralCurrencies.values();\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of the base currency that can be withdrawn from user collateral.\\n     * @param _user User's address\\n     * @return Maximum amount of the base currency that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the maximum amount of the selected currency that can be withdrawn from user collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _user User's address\\n     * @return Maximum amount of the selected currency that can be withdrawn\\n     */\\n    function getWithdrawableCollateral(\\n        bytes32 _ccy,\\n        address _user\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getWithdrawableCollateral(_ccy, _user);\\n    }\\n\\n    /**\\n     * @notice Gets the rate of collateral used.\\n     * @param _user User's address\\n     * @return The rate of collateral used\\n     */\\n    function getCoverage(address _user) external view override returns (uint256) {\\n        return DepositManagementLogic.getCoverage(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of the unused collateral in the base currency\\n     * @param _user User's address\\n     * @return The total amount of unused collateral\\n     */\\n    function getTotalUnusedCollateralAmount(\\n        address _user\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getTotalUnusedCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount.\\n     * @param _user User's address\\n     * @return totalCollateralAmount The total collateral amount in the base currency\\n     */\\n    function getTotalCollateralAmount(\\n        address _user\\n    ) external view override returns (uint256 totalCollateralAmount) {\\n        (totalCollateralAmount, , ) = DepositManagementLogic.getTotalCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the collateral detail.\\n     * @param _user User's address\\n     * @return totalCollateral The total collateral amount in the base currency\\n     * @return totalUsedCollateral The total used collateral amount in the base currency\\n     * @return totalDeposit The total deposit amount in the base currency\\n     */\\n    function getCollateralDetail(\\n        address _user\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        (totalCollateral, totalUsedCollateral, totalDeposit) = DepositManagementLogic\\n            .getTotalCollateralAmount(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the total collateral amount of the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return amount The collateral amount\\n     */\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _ccy\\n    ) external view override returns (uint256 amount) {\\n        (amount, , ) = DepositManagementLogic.getCollateralAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowable amount in the selected currency.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return amount The borrowable amount\\n     */\\n    function getBorrowableAmount(\\n        address _user,\\n        bytes32 _ccy\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getBorrowableAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the amount to be liquidated.\\n     * @param _user User's address\\n     * @return liquidationAmount The the amount to be liquidated\\n     */\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    )\\n        external\\n        view\\n        override\\n        returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee)\\n    {\\n        return\\n            DepositManagementLogic.getLiquidationAmount(\\n                _user,\\n                _liquidationCcy,\\n                _liquidationAmountMaximum\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the total amount deposited of the selected currency\\n     * @param _ccy Currency name in bytes32\\n     * @return The total deposited amount\\n     */\\n    function getTotalDepositAmount(bytes32 _ccy) external view override returns (uint256) {\\n        return Storage.slot().totalDepositAmount[_ccy];\\n    }\\n\\n    /**\\n     * @notice Gets the amount deposited in the user's collateral.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @return The deposited amount\\n     */\\n    function getDepositAmount(\\n        address _user,\\n        bytes32 _ccy\\n    ) external view override returns (uint256) {\\n        return DepositManagementLogic.getDepositAmount(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Gets the currencies that the user used as collateral.\\n     * @param _user User's address\\n     * @return The currency names in bytes32\\n     */\\n    function getUsedCurrencies(address _user) public view override returns (bytes32[] memory) {\\n        return DepositManagementLogic.getUsedCurrencies(_user);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation threshold rate.\\n     * @return rate The liquidation threshold rate\\n     */\\n    function getLiquidationThresholdRate() public view override returns (uint256 rate) {\\n        (rate, , , ) = getLiquidationConfiguration();\\n    }\\n\\n    /**\\n     * @notice Calculates the collateral rate used when additional funds are had by the user.\\n     * @param _user User's address\\n     * @param _additionalFunds Additional funds for calculating the coverage\\n     * @return coverage The rate of collateral used\\n     * @return isInsufficientDepositAmount The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not\\n     */\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) external view override returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        return DepositManagementLogic.calculateCoverage(_user, _additionalFunds);\\n    }\\n\\n    /**\\n     * @notice Gets the actual fee amounts calculated by rates.\\n     * @param _amount Liquidation amount\\n     * @return protocolFee Liquidation fee amount received by protocol\\n     * @return liquidatorFee Liquidation fee amount received by liquidators\\n     */\\n    function calculateLiquidationFees(\\n        uint256 _amount\\n    ) external view override returns (uint256 protocolFee, uint256 liquidatorFee) {\\n        return DepositManagementLogic.calculateLiquidationFees(_amount);\\n    }\\n\\n    /**\\n     * @notice Registers new currency and sets if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _tokenAddress Token contract address of the selected currency\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function registerCurrency(\\n        bytes32 _ccy,\\n        address _tokenAddress,\\n        bool _isCollateral\\n    ) external override ifActive onlyOwner {\\n        if (!currencyController().currencyExists(_ccy) || isRegisteredCurrency(_ccy)) {\\n            revert InvalidCurrency();\\n        }\\n\\n        if (_tokenAddress == address(0)) {\\n            revert InvalidToken();\\n        }\\n\\n        Storage.slot().tokenAddresses[_ccy] = _tokenAddress;\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        }\\n\\n        emit CurrencyRegistered(_ccy, _tokenAddress, _isCollateral);\\n    }\\n\\n    /**\\n     * @notice Updates the currency if it is acceptable as collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _isCollateral Boolean if the selected currency is acceptable as collateral.\\n     */\\n    function updateCurrency(\\n        bytes32 _ccy,\\n        bool _isCollateral\\n    ) external override ifActive onlyOwner onlyRegisteredCurrency(_ccy) {\\n        if (_isCollateral) {\\n            Storage.slot().collateralCurrencies.add(_ccy);\\n        } else {\\n            Storage.slot().collateralCurrencies.remove(_ccy);\\n        }\\n\\n        emit CurrencyUpdated(_ccy, _isCollateral);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function deposit(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override ifActive whenNotPaused onlyRegisteredCurrency(_ccy) {\\n        _deposit(msg.sender, _ccy, _amount, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     * @param _onBehalfOf The beneficiary of the supplied deposits\\n     */\\n    function depositTo(\\n        bytes32 _ccy,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) external payable override ifActive whenNotPaused onlyRegisteredCurrency(_ccy) {\\n        _deposit(msg.sender, _ccy, _amount, _onBehalfOf);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the `from` into collateral.\\n     * @param _from Address of the user\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     */\\n    function depositFrom(\\n        address _from,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external payable override ifActive whenNotPaused onlyLendingMarketController {\\n        _deposit(_from, _ccy, _amount, _from);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the caller into collateral with transfer approval of asset via permit function\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     * @param _onBehalfOf The beneficiary of the supplied deposits\\n     * @param _deadline The deadline timestamp that the permit is valid\\n     * @param _permitV The V parameter of ERC712 permit sig\\n     * @param _permitR The R parameter of ERC712 permit sig\\n     * @param _permitS The S parameter of ERC712 permit sig\\n     */\\n    function depositWithPermitTo(\\n        bytes32 _ccy,\\n        uint256 _amount,\\n        address _onBehalfOf,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external override ifActive whenNotPaused onlyRegisteredCurrency(_ccy) {\\n        IERC20Permit(getTokenAddress(_ccy)).permit(\\n            msg.sender,\\n            address(this),\\n            _amount,\\n            _deadline,\\n            _permitV,\\n            _permitR,\\n            _permitS\\n        );\\n\\n        _deposit(msg.sender, _ccy, _amount, _onBehalfOf);\\n    }\\n\\n    /**\\n     * @dev Deposits funds by the `from` into collateral with transfer approval of asset via permit function\\n     * @param _from Address of the user\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to deposit\\n     * @param _deadline The deadline timestamp that the permit is valid\\n     * @param _permitV The V parameter of ERC712 permit sig\\n     * @param _permitR The R parameter of ERC712 permit sig\\n     * @param _permitS The S parameter of ERC712 permit sig\\n     */\\n    function depositWithPermitFrom(\\n        address _from,\\n        bytes32 _ccy,\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external override ifActive whenNotPaused onlyLendingMarketController {\\n        IERC20Permit(getTokenAddress(_ccy)).permit(\\n            _from,\\n            address(this),\\n            _amount,\\n            _deadline,\\n            _permitV,\\n            _permitR,\\n            _permitS\\n        );\\n\\n        _deposit(_from, _ccy, _amount, _from);\\n    }\\n\\n    /**\\n     * @notice Withdraws funds by the caller from unused collateral.\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function withdraw(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyRegisteredCurrency(_ccy) {\\n        _withdraw(msg.sender, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @dev Adds deposit amount.\\n     * @param _user User's address\\n     * @param _amount Amount of funds to deposit\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function addDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyLendingMarketController onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.addDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Removes deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     * @param _amount Amount of funds to withdraw.\\n     */\\n    function removeDepositAmount(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external override whenNotPaused onlyLendingMarketController onlyRegisteredCurrency(_ccy) {\\n        DepositManagementLogic.removeDepositAmount(_user, _ccy, _amount);\\n    }\\n\\n    /**\\n     * @notice Clean up the used currencies of the user.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function cleanUpUsedCurrencies(\\n        address _user,\\n        bytes32 _ccy\\n    ) external override whenNotPaused onlyLendingMarketController {\\n        DepositManagementLogic.cleanUpUsedCurrencies(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's deposit amount.\\n     * @param _user User's address\\n     * @param _ccy Currency name in bytes32\\n     */\\n    function executeForcedReset(\\n        address _user,\\n        bytes32 _ccy\\n    ) external override onlyLendingMarketController onlyRegisteredCurrency(_ccy) returns (uint256) {\\n        return DepositManagementLogic.executeForcedReset(_user, _ccy);\\n    }\\n\\n    /**\\n     * @notice Transfers the token from sender to receiver.\\n     * @param _ccy Currency name in bytes32\\n     * @param _from Sender's address\\n     * @param _to Receiver's address\\n     * @param _amount Amount of funds to sent\\n     */\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        onlyLendingMarketController\\n        onlyRegisteredCurrency(_ccy)\\n        returns (uint256 untransferredAmount)\\n    {\\n        untransferredAmount = DepositManagementLogic.transferFrom(_ccy, _from, _to, _amount);\\n        emit Transfer(_ccy, _from, _to, _amount - untransferredAmount);\\n    }\\n\\n    /**\\n     * @notice Pauses the token vault.\\n     */\\n    function pause() external override onlyOperator {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpauses the token vault.\\n     */\\n    function unpause() external override onlyOperator {\\n        _unpause();\\n    }\\n\\n    function _deposit(\\n        address _caller,\\n        bytes32 _ccy,\\n        uint256 _amount,\\n        address _onBehalfOf\\n    ) internal {\\n        if (_amount == 0) revert AmountIsZero();\\n\\n        address tokenAddress = Storage.slot().tokenAddresses[_ccy];\\n        if (\\n            (TransferHelper.isNative(tokenAddress) && msg.value != _amount) ||\\n            (!TransferHelper.isNative(tokenAddress) && msg.value != 0)\\n        ) {\\n            revert InvalidAmount(_ccy, _amount, msg.value);\\n        }\\n\\n        DepositManagementLogic.deposit(_caller, _ccy, _amount, _onBehalfOf);\\n\\n        emit Deposit(_onBehalfOf, _ccy, _amount, _caller);\\n    }\\n\\n    function _withdraw(address _user, bytes32 _ccy, uint256 _amount) internal {\\n        if (_amount == 0) revert AmountIsZero();\\n        if (lendingMarketController().isRedemptionRequired(_user)) revert RedemptionIsRequired();\\n\\n        lendingMarketController().cleanUpFunds(_ccy, _user);\\n        uint256 withdrawableAmount = DepositManagementLogic.withdraw(_user, _ccy, _amount);\\n\\n        emit Withdraw(_user, _ccy, withdrawableAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xabc853b67a5f7cccd90f791da770a24d817da2ae3cd379c806f183687a844eb2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function getNames() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x902589cadb08c09a44c5cdbe7ed8ba57a93f7e2700681177ef57c47c40e2e161\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function setZCTokenImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n\\n    function deployZCToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address asset,\\n        uint256 maturity\\n    ) external returns (address futureValueToken);\\n}\\n\",\"keccak256\":\"0xec921fdea2288f812ed78ec9439e53f6bf751a582719618fa8fc8cd88d0b6920\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidDecimals(address priceFeed, uint8 decimals);\\n    error InvalidPriceFeedInputs();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) external view returns (int256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256 price);\\n\\n    function getAggregatedLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x2d1e477a53ca03307d2f2ec206028963e99ff4dcf1e719e3b59845f6acb3ee93\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n    error InsufficientBalance();\\n    error InsufficientLockedBalance();\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n    event BalanceLocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n    event BalanceUnlocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n\\n    function isAutoRolled(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user, uint256 maturity) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(\\n        bytes32 ccy,\\n        uint256 maturity\\n    ) external view returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function getTotalLockedBalance(bytes32 ccy) external view returns (uint256);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function updateDecimals(bytes32 _ccy, uint8 _decimals) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function lock(\\n        bytes32 ccy,\\n        address user,\\n        uint256 amount\\n    ) external returns (uint256 lockedAmount);\\n\\n    function unlock(bytes32 ccy, address user, uint256 amount) external;\\n\\n    function transferFrom(bytes32 ccy, address sender, address receiver, int256 amount) external;\\n\\n    function cleanUpBalance(bytes32 ccy, address user, uint256 maturity) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0xfd1673a34386b847d75edc51873437f19f71a01017cb730824959b2b2c85ed34\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ZCTokenInfo, TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error MarketTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 unallocatedCollateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationFromFVParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amountInFV;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isValidMaturity(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    // function getOrderEstimationFromFV(\\n    //     GetOrderEstimationFromFVParams calldata _params\\n    // )\\n    //     external\\n    //     view\\n    //     returns (\\n    //         uint256 lastUnitPrice,\\n    //         uint256 filledAmount,\\n    //         uint256 filledAmountInFV,\\n    //         uint256 orderFeeInFV,\\n    //         uint256 coverage,\\n    //         bool isInsufficientDepositAmount\\n    //     );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(\\n        bytes32 ccy,\\n        address user\\n    ) external view returns (int256 amount, int256 amountInPV, int256 amountInFV);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getZCToken(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getZCTokenInfo(address zcToken) external view returns (ZCTokenInfo memory);\\n\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecutePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function unwindPositionWithCap(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 maxFutureValue\\n    ) external returns (uint256 filledAmount, uint256 filledAmountInFV, uint256 feeInFV);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n\\n    function withdrawZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n\\n    function depositZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x896d2ffbec09fc0e4a51b40030a1e5f364cb97ec926206ed789c8aa9b5941b27\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/INativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface INativeToken is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x421a18a404723799ac6878c4f710de9e71b2f90877d027a18c8bc42950796b70\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf201bba61d7527343057038ab254ba2e9b70e355ccfb71143f96068727bece48\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount, address caller);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy\\n    ) external view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralDetail(\\n        address user\\n    )\\n        external\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositTo(bytes32 ccy, uint256 amount, address onBehalfOf) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositWithPermitTo(\\n        bytes32 ccy,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function depositWithPermitFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function cleanUpUsedCurrencies(address user, bytes32 ccy) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function getLiquidationThresholdRate() external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x0d46845175ea03d23c7c2b614483e8c8d26f54f817666ee5e40136737dea490d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x5cfce5841b4784484d127b5292c3ca0caa167257522e358570d5955656b7a71f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Constants {\\n    /// @dev Used for price digits in the basis (10000 -> 1)\\n    uint256 internal constant PRICE_DIGIT = 10000;\\n\\n    /// @dev Used for percentage digits in the basis (10000 -> 100%)\\n    uint256 internal constant PCT_DIGIT = 10000;\\n\\n    /// @dev Used for seconds in year (60 * 60 * 24 * 365)\\n    uint256 internal constant SECONDS_IN_YEAR = 31536000;\\n\\n    /// @dev Used for maximum order count per currency\\n    uint256 internal constant MAXIMUM_ORDER_COUNT = 20;\\n}\\n\",\"keccak256\":\"0x21443c5b15f48894fc2ab2f1ea266a01d59e7808f50c569bf5556f6bb298f5d6\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n    bytes32 internal constant ZC_TOKEN = \\\"ZCToken\\\";\\n}\\n\",\"keccak256\":\"0x0e5ed5826808f2caca98c73eb744d0c5774392b9451cf468652938721d210d7c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {INativeToken} from \\\"../interfaces/INativeToken.sol\\\";\\nimport {TransferHelperStorage as Storage} from \\\"../storages/libraries/TransferHelperStorage.sol\\\";\\n\\nlibrary TransferHelper {\\n    function initialize(address _nativeToken) internal {\\n        require(Storage.slot().nativeToken == address(0), \\\"TransferHelper: Already initialized\\\");\\n        Storage.slot().nativeToken = _nativeToken;\\n    }\\n\\n    function nativeToken() internal view returns (address) {\\n        return Storage.slot().nativeToken;\\n    }\\n\\n    function isNative(address _token) internal view returns (bool) {\\n        return _token == Storage.slot().nativeToken;\\n    }\\n\\n    function depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertToWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function withdrawAssets(address _token, address _receiver, uint256 _amount) internal {\\n        if (address(_token) == Storage.slot().nativeToken) {\\n            convertFromWrappedToken(_receiver, _amount);\\n        } else {\\n            safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function convertToWrappedToken(address _receiver, uint256 _amount) internal {\\n        require(address(this).balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        INativeToken(Storage.slot().nativeToken).deposit{value: _amount}();\\n        safeTransfer(Storage.slot().nativeToken, _receiver, _amount);\\n    }\\n\\n    function convertFromWrappedToken(address _receiver, uint256 _amount) internal {\\n        uint256 balance = INativeToken(Storage.slot().nativeToken).balanceOf(address(this));\\n        require(balance >= _amount, \\\"TransferHelper: Insufficient balance\\\");\\n\\n        if (balance > 0) {\\n            INativeToken(Storage.slot().nativeToken).withdraw(_amount);\\n            safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function safeApprove(address token, address to, uint256 value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x97dfaed51a29cfeea6deb451a2f7d66adfa16ac2574c7fdafc79a3f002812cdd\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/logics/DepositManagementLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {EnumerableSet} from \\\"../../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n// interfaces\\nimport {ILendingMarketController} from \\\"../../interfaces/ILendingMarketController.sol\\\";\\n// libraries\\nimport {AddressResolverLib} from \\\"../AddressResolverLib.sol\\\";\\nimport {TransferHelper} from \\\"../TransferHelper.sol\\\";\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {RoundingUint256} from \\\"../math/RoundingUint256.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../../storages/TokenVaultStorage.sol\\\";\\n\\nlibrary DepositManagementLogic {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using RoundingUint256 for uint256;\\n\\n    error NotEnoughDeposit(bytes32 ccy);\\n    error ProtocolIsInsolvent(bytes32 ccy);\\n\\n    struct CalculatedFundVars {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    function isCovered(\\n        address _user,\\n        bytes32 _orderCcy\\n    ) public view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy) {\\n        ILendingMarketController.AdditionalFunds memory _funds;\\n        _funds.ccy = _orderCcy;\\n\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            ,\\n            bool isInsufficientDepositAmount\\n        ) = _calculateCollateral(_user, _funds);\\n\\n        isEnoughDepositInOrderCcy = !isInsufficientDepositAmount;\\n        isEnoughCollateral =\\n            totalUsedCollateral == 0 ||\\n            (totalCollateral * Constants.PCT_DIGIT >=\\n                totalUsedCollateral * Storage.slot().liquidationThresholdRate);\\n    }\\n\\n    function getUsedCurrencies(address _user) public view returns (bytes32[] memory) {\\n        return Storage.slot().usedCurrencies[_user].values();\\n    }\\n\\n    function getDepositAmount(address _user, bytes32 _ccy) public view returns (uint256) {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        return\\n            Storage.slot().depositAmounts[_user][_ccy] +\\n            funds.borrowedAmount -\\n            funds.lentAmount -\\n            funds.workingLendOrdersAmount;\\n    }\\n\\n    function getTotalCollateralAmount(\\n        address _user\\n    )\\n        public\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        ILendingMarketController.AdditionalFunds memory _funds;\\n        (totalCollateral, totalUsedCollateral, totalDeposit, ) = _calculateCollateral(\\n            _user,\\n            _funds\\n        );\\n    }\\n\\n    function getCollateralAmount(\\n        address _user,\\n        bytes32 _ccy\\n    )\\n        public\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit)\\n    {\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, Storage.slot().liquidationThresholdRate);\\n\\n        uint256 plusDeposit = Storage.slot().depositAmounts[_user][_ccy] + funds.borrowedAmount;\\n        uint256 minusDeposit = funds.workingLendOrdersAmount + funds.lentAmount;\\n        uint256 plusCollateral = plusDeposit + funds.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = funds.workingBorrowOrdersAmount + funds.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getCoverage(address _user) external view returns (uint256 coverage) {\\n        ILendingMarketController.AdditionalFunds memory _emptyAdditionalFunds;\\n        (coverage, ) = calculateCoverage(_user, _emptyAdditionalFunds);\\n    }\\n\\n    function getTotalUnusedCollateralAmount(address _user) public view returns (uint256) {\\n        (uint256 totalCollateral, uint256 totalUsedCollateral, ) = getTotalCollateralAmount(_user);\\n\\n        return totalCollateral > totalUsedCollateral ? totalCollateral - totalUsedCollateral : 0;\\n    }\\n\\n    function getBorrowableAmount(address _user, bytes32 _ccy) external view returns (uint256) {\\n        uint256[] memory amounts = new uint256[](2);\\n        (amounts[0], amounts[1], ) = getTotalCollateralAmount(_user);\\n        amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(_ccy, amounts);\\n\\n        uint256 totalCollateralAmount = amounts[0];\\n        uint256 totalUsedCollateral = amounts[1];\\n        uint256 liquidationThresholdRate = Storage.slot().liquidationThresholdRate;\\n\\n        ILendingMarketController.CalculatedFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateFunds(_ccy, _user, liquidationThresholdRate);\\n\\n        uint256 unusedCollateralAmount = funds.claimableAmount > funds.collateralAmount\\n            ? funds.claimableAmount - funds.collateralAmount\\n            : 0;\\n\\n        uint256 borrowableAmount = ((totalCollateralAmount + unusedCollateralAmount) *\\n            Constants.PCT_DIGIT).div(liquidationThresholdRate);\\n\\n        return borrowableAmount > totalUsedCollateral ? borrowableAmount - totalUsedCollateral : 0;\\n    }\\n\\n    function calculateCoverage(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _additionalFunds\\n    ) public view returns (uint256 coverage, bool isInsufficientDepositAmount) {\\n        uint256 totalCollateral;\\n        uint256 totalUsedCollateral;\\n\\n        (\\n            totalCollateral,\\n            totalUsedCollateral,\\n            ,\\n            isInsufficientDepositAmount\\n        ) = _calculateCollateral(_user, _additionalFunds);\\n\\n        if (totalCollateral == 0) {\\n            coverage = totalUsedCollateral == 0 ? 0 : type(uint256).max;\\n        } else {\\n            coverage = (totalUsedCollateral * Constants.PCT_DIGIT) / totalCollateral;\\n        }\\n    }\\n\\n    function _calculateCollateral(\\n        address _user,\\n        ILendingMarketController.AdditionalFunds memory _funds\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit,\\n            bool isInsufficientDepositAmount\\n        )\\n    {\\n        CalculatedFundVars memory vars;\\n\\n        ILendingMarketController.CalculatedTotalFunds memory funds = AddressResolverLib\\n            .lendingMarketController()\\n            .calculateTotalFundsInBaseCurrency(\\n                _user,\\n                _funds,\\n                Storage.slot().liquidationThresholdRate\\n            );\\n\\n        vars.plusDepositAmountInAdditionalFundsCcy = funds.plusDepositAmountInAdditionalFundsCcy;\\n        vars.minusDepositAmountInAdditionalFundsCcy = funds.minusDepositAmountInAdditionalFundsCcy;\\n        vars.workingLendOrdersAmount = funds.workingLendOrdersAmount;\\n        vars.collateralAmount = funds.collateralAmount;\\n        vars.lentAmount = funds.lentAmount;\\n        vars.workingBorrowOrdersAmount = funds.workingBorrowOrdersAmount;\\n        vars.debtAmount = funds.debtAmount;\\n        vars.borrowedAmount = funds.borrowedAmount;\\n\\n        // Check if the user has enough deposit amount in the selected currency.\\n        if (\\n            vars.plusDepositAmountInAdditionalFundsCcy +\\n                Storage.slot().depositAmounts[_user][_funds.ccy] <\\n            vars.minusDepositAmountInAdditionalFundsCcy\\n        ) {\\n            isInsufficientDepositAmount = true;\\n        }\\n\\n        uint256 totalInternalDepositAmount = _getTotalInternalDepositAmountInBaseCurrency(_user);\\n\\n        uint256 plusDeposit = totalInternalDepositAmount + vars.borrowedAmount;\\n        uint256 minusDeposit = vars.workingLendOrdersAmount + vars.lentAmount;\\n        uint256 plusCollateral = plusDeposit + vars.collateralAmount;\\n\\n        totalCollateral = plusCollateral >= minusDeposit ? plusCollateral - minusDeposit : 0;\\n        totalUsedCollateral = vars.workingBorrowOrdersAmount + vars.debtAmount;\\n        totalDeposit = plusDeposit >= minusDeposit ? plusDeposit - minusDeposit : 0;\\n    }\\n\\n    function getWithdrawableCollateral(address _user) public view returns (uint256) {\\n        (\\n            uint256 totalCollateral,\\n            uint256 totalUsedCollateral,\\n            uint256 totalDeposit\\n        ) = getTotalCollateralAmount(_user);\\n\\n        if (totalUsedCollateral == 0) {\\n            return totalDeposit;\\n        } else if (\\n            totalCollateral * Constants.PCT_DIGIT >\\n            totalUsedCollateral * Storage.slot().liquidationThresholdRate\\n        ) {\\n            // NOTE: The formula is:\\n            // maxWithdraw = totalCollateral - (totalUsedCollateral * liquidationThresholdRate)\\n            uint256 maxWithdraw = (totalCollateral *\\n                Constants.PCT_DIGIT -\\n                totalUsedCollateral *\\n                Storage.slot().liquidationThresholdRate).div(Constants.PCT_DIGIT);\\n\\n            return maxWithdraw >= totalDeposit ? totalDeposit : maxWithdraw;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getWithdrawableCollateral(\\n        bytes32 _ccy,\\n        address _user\\n    ) public view returns (uint256 withdrawableAmount) {\\n        uint256 depositAmount = getDepositAmount(_user, _ccy);\\n        if (Storage.slot().collateralCurrencies.contains(_ccy)) {\\n            uint256 maxWithdrawInBaseCurrency = getWithdrawableCollateral(_user);\\n            uint256 maxWithdraw = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n                _ccy,\\n                maxWithdrawInBaseCurrency\\n            );\\n\\n            withdrawableAmount = depositAmount >= maxWithdraw ? maxWithdraw : depositAmount;\\n        } else {\\n            withdrawableAmount = depositAmount;\\n        }\\n    }\\n\\n    function addDepositAmount(address _user, bytes32 _ccy, uint256 _amount) public {\\n        Storage.slot().depositAmounts[_user][_ccy] += _amount;\\n        Storage.slot().usedCurrencies[_user].add(_ccy);\\n    }\\n\\n    function removeDepositAmount(address _user, bytes32 _ccy, uint256 _amount) public {\\n        if (Storage.slot().depositAmounts[_user][_ccy] < _amount) {\\n            revert NotEnoughDeposit({ccy: _ccy});\\n        }\\n\\n        Storage.slot().depositAmounts[_user][_ccy] -= _amount;\\n    }\\n\\n    function executeForcedReset(\\n        address _user,\\n        bytes32 _ccy\\n    ) external returns (uint256 removedAmount) {\\n        removedAmount = Storage.slot().depositAmounts[_user][_ccy];\\n        Storage.slot().depositAmounts[_user][_ccy] = 0;\\n\\n        Storage.slot().usedCurrencies[_user].remove(_ccy);\\n    }\\n\\n    function deposit(address _caller, bytes32 _ccy, uint256 _amount, address _onBehalfOf) public {\\n        TransferHelper.depositAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _caller,\\n            address(this),\\n            _amount\\n        );\\n\\n        addDepositAmount(_onBehalfOf, _ccy, _amount);\\n        Storage.slot().totalDepositAmount[_ccy] += _amount;\\n    }\\n\\n    function withdraw(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) public returns (uint256 withdrawableAmount) {\\n        withdrawableAmount = getWithdrawableCollateral(_ccy, _user);\\n        withdrawableAmount = _amount > withdrawableAmount ? withdrawableAmount : _amount;\\n\\n        if (Storage.slot().totalDepositAmount[_ccy] < withdrawableAmount) {\\n            revert ProtocolIsInsolvent({ccy: _ccy});\\n        }\\n\\n        Storage.slot().totalDepositAmount[_ccy] -= withdrawableAmount;\\n        removeDepositAmount(_user, _ccy, withdrawableAmount);\\n\\n        TransferHelper.withdrawAssets(\\n            Storage.slot().tokenAddresses[_ccy],\\n            _user,\\n            withdrawableAmount\\n        );\\n\\n        return withdrawableAmount;\\n    }\\n\\n    function getLiquidationAmount(\\n        address _user,\\n        bytes32 _liquidationCcy,\\n        uint256 _liquidationAmountMaximum\\n    ) public view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee) {\\n        (\\n            uint256 totalCollateralInBaseCcy,\\n            uint256 totalUsedCollateralInBaseCcy,\\n\\n        ) = getTotalCollateralAmount(_user);\\n\\n        if (totalUsedCollateralInBaseCcy == 0) {\\n            return (0, 0, 0);\\n        }\\n\\n        (uint256 collateralAmount, , ) = getCollateralAmount(_user, _liquidationCcy);\\n\\n        if (collateralAmount == 0) {\\n            return (0, 0, 0);\\n        }\\n\\n        uint256 liquidationAmountInBaseCcy = 0;\\n        uint256 coveredRatio = (totalCollateralInBaseCcy * Constants.PCT_DIGIT).div(\\n            totalUsedCollateralInBaseCcy\\n        );\\n\\n        if (coveredRatio < Storage.slot().fullLiquidationThresholdRate) {\\n            liquidationAmountInBaseCcy = totalUsedCollateralInBaseCcy;\\n        } else if (coveredRatio < Storage.slot().liquidationThresholdRate) {\\n            liquidationAmountInBaseCcy = totalUsedCollateralInBaseCcy.div(2);\\n        }\\n\\n        uint256[] memory amountsInBaseCcy = new uint256[](2);\\n        amountsInBaseCcy[0] = liquidationAmountInBaseCcy;\\n        amountsInBaseCcy[1] = totalCollateralInBaseCcy;\\n\\n        uint256[] memory amounts = AddressResolverLib.currencyController().convertFromBaseCurrency(\\n            _liquidationCcy,\\n            amountsInBaseCcy\\n        );\\n\\n        liquidationAmount = amounts[0];\\n        uint256 totalCollateralAmount = amounts[1];\\n\\n        if (liquidationAmount > _liquidationAmountMaximum) {\\n            liquidationAmount = _liquidationAmountMaximum;\\n        }\\n\\n        (protocolFee, liquidatorFee) = calculateLiquidationFees(liquidationAmount);\\n\\n        uint256 liquidationTotalAmount = liquidationAmount + protocolFee + liquidatorFee;\\n\\n        // NOTE: If `totalCollateralAmount > collateralAmount` is true, it means that a user has collateral in other currencies\\n        // In this case, this liquidation is not covered by the reserve fund.\\n        // Therefore, we need to keep the total liquidation amount within the maximum amount.\\n        if (liquidationTotalAmount > collateralAmount && totalCollateralAmount > collateralAmount) {\\n            liquidationTotalAmount = collateralAmount;\\n            uint256 liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n            uint256 liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n\\n            protocolFee = (liquidationTotalAmount * liquidationProtocolFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidatorFee = (liquidationTotalAmount * liquidatorFeeRate).div(\\n                Constants.PCT_DIGIT + liquidatorFeeRate + liquidationProtocolFeeRate\\n            );\\n            liquidationAmount = liquidationTotalAmount - protocolFee - liquidatorFee;\\n        }\\n    }\\n\\n    function calculateLiquidationFees(\\n        uint256 _amount\\n    ) public view returns (uint256 protocolFee, uint256 liquidatorFee) {\\n        protocolFee = (_amount * Storage.slot().liquidationProtocolFeeRate).div(\\n            Constants.PCT_DIGIT\\n        );\\n        liquidatorFee = (_amount * Storage.slot().liquidatorFeeRate).div(Constants.PCT_DIGIT);\\n    }\\n\\n    function transferFrom(\\n        bytes32 _ccy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256 untransferredAmount) {\\n        uint256 depositAmount = getDepositAmount(_from, _ccy);\\n        uint256 amount = depositAmount >= _amount ? _amount : depositAmount;\\n        untransferredAmount = _amount - amount;\\n\\n        removeDepositAmount(_from, _ccy, amount);\\n        addDepositAmount(_to, _ccy, amount);\\n    }\\n\\n    function cleanUpUsedCurrencies(address _user, bytes32 _ccy) external {\\n        if (Storage.slot().depositAmounts[_user][_ccy] == 0) {\\n            Storage.slot().usedCurrencies[_user].remove(_ccy);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the total of amount deposited in the user's collateral of all currencies\\n     *  in this contract by converting it to ETH.\\n     * @param _user Address of collateral user\\n     * @return totalDepositAmount The total deposited amount in the base currency\\n     */\\n    function _getTotalInternalDepositAmountInBaseCurrency(\\n        address _user\\n    ) internal view returns (uint256 totalDepositAmount) {\\n        EnumerableSet.Bytes32Set storage currencies = Storage.slot().usedCurrencies[_user];\\n        uint256 length = currencies.length();\\n\\n        for (uint256 i; i < length; i++) {\\n            bytes32 ccy = currencies.at(i);\\n            if (Storage.slot().collateralCurrencies.contains(ccy)) {\\n                uint256 depositAmount = Storage.slot().depositAmounts[_user][ccy];\\n                totalDepositAmount += AddressResolverLib.currencyController().convertToBaseCurrency(\\n                    ccy,\\n                    depositAmount\\n                );\\n            }\\n        }\\n\\n        return totalDepositAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x701c88db974e2bce11ca0a85ef9b5cd6d1f39fa5de6e90b736626d055aeae265\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/math/RoundingUint256.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary RoundingUint256 {\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0);\\n\\n        if ((a * 10) / b - (a / b) * 10 < 5) {\\n            return a / b;\\n        } else {\\n            return (a / b) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb063c0e8aa8a0bfc9303bd5a1c1d9f54b19cb85d8859aa505ba4162769fc7306\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AccessControl} from \\\"../utils/AccessControl.sol\\\";\\n\\n/**\\n * @notice Implements functions to add  role-based access control mechanisms.\\n */\\ncontract MixinAccessControl is AccessControl {\\n    error CallerNotOperator();\\n    error NotAllowedAccess(bytes32 role, address account);\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    /**\\n     * @dev Throws if called by any account other than the admin.\\n     */\\n    modifier onlyOperator() {\\n        if (!hasRole(OPERATOR_ROLE, msg.sender)) revert CallerNotOperator();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the roles.\\n     * @param _admin The address of the admin role\\n     */\\n    function _setupInitialRoles(address _admin) internal {\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(OPERATOR_ROLE, _admin);\\n    }\\n\\n    /**\\n     * @notice Adds a new admin as Operator\\n     * @param admin The address of the new admin\\n     */\\n    function addOperator(address admin) external {\\n        super.grantRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @notice Removes an admin as Operator\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeOperator(address admin) external {\\n        revokeRole(OPERATOR_ROLE, admin);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function revokeRole(bytes32 role, address account) public override {\\n        if (account == msg.sender) revert NotAllowedAccess(role, account);\\n\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @notice Revokes `role` from the calling account. This function is disabled by overriding it with a revert.\\n     * @param role The role to be revoked\\n     * @param account The address of the account to revoke the role from\\n     */\\n    function renounceRole(bytes32 role, address account) public pure override {\\n        revert NotAllowedAccess(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x3f53b204b9e2c8cb571fce0f537f8663a4952efbf19ce237a63d007acc6421ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    error OnlyAcceptedContract(string name);\\n    error ResolverAlreadyRegistered();\\n\\n    modifier onlyLendingMarketController() {\\n        if (msg.sender != address(AddressResolverLib.lendingMarketController()))\\n            revert OnlyAcceptedContract(\\\"LendingMarketController\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        if (address(Storage.slot().resolver) != address(0)) revert ResolverAlreadyRegistered();\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0xd2f09d4b47a54d196ce23a9df1ece821097a9dba7933bbc7c1c05c05e33a660e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinLiquidationConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// libraries\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n// utils\\nimport {Ownable} from \\\"../utils/Ownable.sol\\\";\\n// storages\\nimport {TokenVaultStorage as Storage} from \\\"../storages/TokenVaultStorage.sol\\\";\\n\\ncontract MixinLiquidationConfiguration is Ownable {\\n    error InvalidLiquidationThresholdRate();\\n    error InvalidFullLiquidationThresholdRate();\\n    error InvalidLiquidationProtocolFeeRate();\\n    error InvalidLiquidatorFeeRate();\\n\\n    event LiquidationThresholdRateUpdated(uint256 previousRate, uint256 ratio);\\n    event FullLiquidationThresholdRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidationProtocolFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n    event LiquidatorFeeRateUpdated(uint256 previousRate, uint256 ratio);\\n\\n    function _initialize(\\n        address _owner,\\n        uint256 _liquidationThresholdRate,\\n        uint256 _fullLiquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) internal {\\n        _transferOwnership(_owner);\\n        _updateLiquidationConfiguration(\\n            _liquidationThresholdRate,\\n            _fullLiquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation configuration\\n     * @return liquidationThresholdRate The liquidation threshold rate\\n     * @return fullLiquidationThresholdRate The full liquidation threshold rate\\n     * @return liquidationProtocolFeeRate The liquidation fee received by liquidators\\n     * @return liquidatorFeeRate The liquidation protocol fee received by protocol\\n     */\\n    function getLiquidationConfiguration()\\n        public\\n        view\\n        returns (\\n            uint256 liquidationThresholdRate,\\n            uint256 fullLiquidationThresholdRate,\\n            uint256 liquidationProtocolFeeRate,\\n            uint256 liquidatorFeeRate\\n        )\\n    {\\n        liquidationThresholdRate = Storage.slot().liquidationThresholdRate;\\n        fullLiquidationThresholdRate = Storage.slot().fullLiquidationThresholdRate;\\n        liquidationProtocolFeeRate = Storage.slot().liquidationProtocolFeeRate;\\n        liquidatorFeeRate = Storage.slot().liquidatorFeeRate;\\n    }\\n\\n    /**\\n     * @dev Update the liquidation configuration\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function updateLiquidationConfiguration(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _fullLiquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) external onlyOwner {\\n        _updateLiquidationConfiguration(\\n            _liquidationThresholdRate,\\n            _fullLiquidationThresholdRate,\\n            _liquidationProtocolFeeRate,\\n            _liquidatorFeeRate\\n        );\\n    }\\n\\n    /**\\n     * @dev Update the liquidation configuration\\n     * @param _liquidationThresholdRate The liquidation threshold rate\\n     * @param _liquidationProtocolFeeRate The liquidation fee rate received by protocol\\n     * @param _liquidatorFeeRate The liquidation fee rate received by liquidators\\n     * @notice Triggers only be contract owner\\n     */\\n    function _updateLiquidationConfiguration(\\n        uint256 _liquidationThresholdRate,\\n        uint256 _fullLiquidationThresholdRate,\\n        uint256 _liquidationProtocolFeeRate,\\n        uint256 _liquidatorFeeRate\\n    ) private {\\n        if (_liquidationThresholdRate <= Constants.PCT_DIGIT)\\n            revert InvalidLiquidationThresholdRate();\\n        if (\\n            _fullLiquidationThresholdRate <= Constants.PCT_DIGIT ||\\n            _fullLiquidationThresholdRate > _liquidationThresholdRate\\n        ) revert InvalidFullLiquidationThresholdRate();\\n        if (_liquidationProtocolFeeRate > Constants.PCT_DIGIT)\\n            revert InvalidLiquidationProtocolFeeRate();\\n        if (_liquidatorFeeRate > Constants.PCT_DIGIT) revert InvalidLiquidatorFeeRate();\\n\\n        if (_liquidationThresholdRate != Storage.slot().liquidationThresholdRate) {\\n            emit LiquidationThresholdRateUpdated(\\n                Storage.slot().liquidationThresholdRate,\\n                _liquidationThresholdRate\\n            );\\n            Storage.slot().liquidationThresholdRate = _liquidationThresholdRate;\\n        }\\n\\n        if (_fullLiquidationThresholdRate != Storage.slot().fullLiquidationThresholdRate) {\\n            emit FullLiquidationThresholdRateUpdated(\\n                Storage.slot().fullLiquidationThresholdRate,\\n                _fullLiquidationThresholdRate\\n            );\\n            Storage.slot().fullLiquidationThresholdRate = _fullLiquidationThresholdRate;\\n        }\\n\\n        if (_liquidationProtocolFeeRate != Storage.slot().liquidationProtocolFeeRate) {\\n            emit LiquidationProtocolFeeRateUpdated(\\n                Storage.slot().liquidationProtocolFeeRate,\\n                _liquidationProtocolFeeRate\\n            );\\n            Storage.slot().liquidationProtocolFeeRate = _liquidationProtocolFeeRate;\\n        }\\n\\n        if (_liquidatorFeeRate != Storage.slot().liquidatorFeeRate) {\\n            emit LiquidatorFeeRateUpdated(Storage.slot().liquidatorFeeRate, _liquidatorFeeRate);\\n            Storage.slot().liquidatorFeeRate = _liquidatorFeeRate;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1d45fda61c236b98b99f972809d13af6008837c95561accf252a1c00b9f52e82\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256[] heartbeats;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.currencyController\\\")) - 1);\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 ccy => uint256 haircut) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 ccy => uint8 decimals) decimalsCaches;\\n        mapping(bytes32 ccy => PriceFeed priceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5485fa8fc79ac418525aed23300dd0111ecb5403121104ad6bb09d196c8e82f5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.genesisValueVault\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 ccy => bool isInitialized) isInitialized;\\n        mapping(bytes32 ccy => uint256 compoundFactor) initialCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) lendingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) borrowingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 maturity) currentMaturity;\\n        mapping(bytes32 ccy => uint8 decimals) decimals;\\n        mapping(bytes32 ccy => mapping(address user => int256 balance)) balances;\\n        mapping(bytes32 ccy => uint256 amount) totalLendingSupplies;\\n        mapping(bytes32 ccy => uint256 amount) totalBorrowingSupplies;\\n        // Total amount supplied per maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => int256 balance)) maturityBalances;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => AutoRollLog log)) autoRollLogs;\\n        // Maturity when the user receives the balance on the target currency\\n        mapping(bytes32 ccy => mapping(address user => uint256 maturity)) userMaturities;\\n        mapping(bytes32 ccy => uint256 balance) totalLockedBalances;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda77d523b56fbba23ad00d3583a83a829bd715c710f197ba62712fb60ee1dac2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nstruct ZCTokenInfo {\\n    bytes32 ccy;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => address token)) zcTokens;\\n        mapping(address token => ZCTokenInfo) zcTokenInfo;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8811a19e2f51e3fc813292c1ff80d2f24e7951c3c377da84c5f005a8197b07f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/TokenVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {EnumerableSet} from \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary TokenVaultStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.tokenVault\\\")) - 1);\\n\\n    struct Storage {\\n        // Liquidation threshold rate (in basis point)\\n        uint256 liquidationThresholdRate;\\n        // Liquidation fee rate received by protocol (in basis point)\\n        uint256 liquidationProtocolFeeRate;\\n        // Liquidation fee rate received by liquidators (in basis point)\\n        uint256 liquidatorFeeRate;\\n        // Currencies accepted as collateral\\n        EnumerableSet.Bytes32Set collateralCurrencies;\\n        mapping(bytes32 ccy => address tokenAddress) tokenAddresses;\\n        // List of currency that the user has deposit amounts\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(bytes32 ccy => uint256 totalDepositAmount) totalDepositAmount;\\n        mapping(address user => mapping(bytes32 currency => uint256 depositAmount)) depositAmounts;\\n        // Full liquidation threshold rate (in basis point)\\n        uint256 fullLiquidationThresholdRate;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae5d4aa31af9ac4d98d384aa3203a88356fdda8e61e9958bd06e5ac1112dc607\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/libraries/TransferHelperStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary TransferHelperStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.transferHelper\\\")) - 1);\\n\\n    struct Storage {\\n        address nativeToken;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8b1860e468280ebdccca0a4276fd31b58e0a84addb320f5d62372d644173f72\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.mixinAddressResolver\\\")) - 1);\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 contractName => address contractAddress) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5663ed356830b742d6f13379afdd7d041ae71e13ad2ea64d8d63ca9e6ef8ab75\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct RoleData {\\n    mapping(address => bool) members;\\n    bytes32 adminRole;\\n}\\n\\nlibrary AccessControlStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.accessControl\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 role => RoleData roleData) roles;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08de1e22d35fffead0a9c9cc6a1ef53441513d5ba080a5361dd48e5cc5d794c0\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary OwnableStorage {\\n    bytes32 internal constant STORAGE_SLOT = bytes32(uint256(keccak256(\\\"sf.storage.ownable\\\")) - 1);\\n\\n    struct Storage {\\n        address owner;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98130c4c3d0014744b194e179bd65b8b7e73cac9cd33a470d194072e1a06b94e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/utils/PausableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary PausableStorage {\\n    bytes32 internal constant STORAGE_SLOT = bytes32(uint256(keccak256(\\\"sf.storage.pausable\\\")) - 1);\\n\\n    struct Storage {\\n        bool paused;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06c8468a3d15b11bce83fd587937ee3d1cc5cdb5c9240f2567d524d83a61a997\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/access/IAccessControl.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/Strings.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/introspection/ERC165.sol\\\";\\nimport \\\"../storages/utils/AccessControlStorage.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return AccessControlStorage.slot().roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return AccessControlStorage.slot().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(\\n        bytes32 role,\\n        address account\\n    ) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        AccessControlStorage.slot().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            AccessControlStorage.slot().roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac33e516f59b08a69d11a73b73ce2dd13856dee8b9bf969069f513d072da130\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/OwnableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return OwnableStorage.slot().owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = OwnableStorage.slot().owner;\\n        OwnableStorage.slot().owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd735ea20ce4e86d574ab372eb79a46510c7be3b12b62f3948bb68dd2bea710ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/Context.sol\\\";\\nimport \\\"../storages/utils/PausableStorage.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return PausableStorage.slot().paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage.slot().paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage.slot().paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x9265d3457f2bd6d979b6fc0c249cd3295e773e584f35e2335615d18dcf228149\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Gets the revision number of the contract\\n     * @return The revision number\\n     */\\n    function getRevision() external pure virtual returns (uint256) {\\n        return 0x1;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x9a8871621917fe5a0c7175217c5504dab4f935612dff0dadaff62c2d4da87412\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614525806100206000396000f3fe60806040526004361061038f5760003560e01c80635bffeb66116101dc5780639870d7fe11610102578063d5e190d0116100a0578063f5b541a61161006f578063f5b541a614610aad578063f7ef28d414610acf578063fb7bd3b414610b06578063fc70081014610b2657600080fd5b8063d5e190d014610a30578063ed6dd51414610a45578063f2fde38b14610a7a578063f4040abe14610a9a57600080fd5b8063ac9650d8116100dc578063ac9650d8146109a3578063b12e4410146109d0578063ca423031146109f0578063d547741f14610a1057600080fd5b80639870d7fe1461094e578063a217fddf1461096e578063ac8a584a1461098357600080fd5b80637d44828e1161017a5780638e19aff3116101495780638e19aff3146108db57806391d14854146108fb578063948060dd1461091b57806396994e371461093b57600080fd5b80637d44828e1461087157806383a5041c146108915780638456cb59146108b15780638da5cb5b146108c657600080fd5b806360819025116101b657806360819025146107fc5780636a3db9c61461081c578063715018a61461083c5780637d044b431461085157600080fd5b80635bffeb66146107a75780635c975abb146107c75780635d95df8a146107dc57600080fd5b80632e44b3f9116102c15780633f90a08e1161025f5780635257ed671161022e5780635257ed671461071257806354821c21146107325780635575fba714610752578063590472001461077257600080fd5b80633f90a08e146106855780634ba0c9b5146106b25780634c6aa99c146106d2578063500d2f6d146106f257600080fd5b806337ebbf691161029b57806337ebbf691461060e578063392d43011461062e5780633d03b9da1461064e5780633f4ba83a1461067057600080fd5b80632e44b3f9146105b95780632f2ff15d146105ce57806336568abe146105ee57600080fd5b80631316529d1161032e578063248a9ca311610308578063248a9ca31461054f57806325a890321461056f57806329985e5a1461058f5780632af64bd3146105a457600080fd5b80631316529d146104ed57806315c0dc20146105015780631de26e161461053c57600080fd5b8063040cf0201161036a578063040cf0201461046057806304f3bcec146104805780630cf7505d146104ad5780630eadd244146104cd57600080fd5b8062fcf262146103c857806301ffc9a7146104025780630253cd7e1461043257600080fd5b366103c35761039d33610b46565b6103c15760405163efd4e4e160e01b81523360048201526024015b60405180910390fd5b005b600080fd5b3480156103d457600080fd5b506103e86103e3366004613a61565b610b67565b604080519283526020830191909152015b60405180910390f35b34801561040e57600080fd5b5061042261041d366004613a7a565b610be6565b60405190151581526020016103f9565b34801561043e57600080fd5b5061045261044d366004613ab9565b610c1d565b6040519081526020016103f9565b34801561046c57600080fd5b506103c161047b366004613ae5565b610cab565b34801561048c57600080fd5b50610495610cea565b6040516001600160a01b0390911681526020016103f9565b3480156104b957600080fd5b506104226104c8366004613a61565b610d03565b3480156104d957600080fd5b506104526104e8366004613b07565b610d31565b3480156104f957600080fd5b506002610452565b34801561050d57600080fd5b5061052161051c366004613b37565b610d7b565b604080519384526020840192909252908201526060016103f9565b6103c161054a366004613ae5565b610e0b565b34801561055b57600080fd5b5061045261056a366004613a61565b610ecd565b34801561057b57600080fd5b5061045261058a366004613b37565b610eeb565b34801561059b57600080fd5b506103c1610f6b565b3480156105b057600080fd5b506104226110e8565b3480156105c557600080fd5b5061045261121a565b3480156105da57600080fd5b506103c16105e9366004613b07565b61122d565b3480156105fa57600080fd5b506103c1610609366004613b07565b611249565b34801561061a57600080fd5b506103c1610629366004613b54565b611274565b34801561063a57600080fd5b506103c1610649366004613ab9565b6112b5565b34801561065a57600080fd5b5061066361136c565b6040516103f99190613b86565b34801561067c57600080fd5b506103c161142e565b34801561069157600080fd5b506106a56106a0366004613c0f565b61146d565b6040516103f99190613c51565b3480156106be57600080fd5b506103c16106cd366004613c8b565b61151d565b3480156106de57600080fd5b506104526106ed366004613a61565b6115f6565b3480156106fe57600080fd5b5061045261070d366004613cc0565b611614565b34801561071e57600080fd5b5061052161072d366004613c8b565b611766565b34801561073e57600080fd5b5061045261074d366004613b37565b6117f6565b34801561075e57600080fd5b5061045261076d366004613ab9565b61187e565b34801561077e57600080fd5b5061079261078d366004613d78565b6118c8565b604080519283529015156020830152016103f9565b3480156107b357600080fd5b506103c16107c2366004613e11565b611998565b3480156107d357600080fd5b50610422611bc2565b3480156107e857600080fd5b506104226107f7366004613a61565b611bd5565b34801561080857600080fd5b506103c1610817366004613e69565b611bec565b34801561082857600080fd5b506103c1610837366004613ece565b611d3b565b34801561084857600080fd5b506103c1611e6f565b34801561085d57600080fd5b5061045261086c366004613ab9565b611ea8565b34801561087d57600080fd5b5061045261088c366004613ab9565b611f97565b34801561089d57600080fd5b506103c16108ac366004613f17565b612027565b3480156108bd57600080fd5b506103c16121d2565b3480156108d257600080fd5b5061049561220f565b3480156108e757600080fd5b506103c16108f6366004613f89565b612219565b34801561090757600080fd5b50610422610916366004613b07565b61235c565b34801561092757600080fd5b50610452610936366004613b37565b612390565b6103c1610949366004613c8b565b6123d3565b34801561095a57600080fd5b506103c1610969366004613b37565b6124a7565b34801561097a57600080fd5b50610452600081565b34801561098f57600080fd5b506103c161099e366004613b37565b6124c2565b3480156109af57600080fd5b506109c36109be366004613c0f565b6124da565b6040516103f99190613ffe565b3480156109dc57600080fd5b506104956109eb366004613a61565b6125c8565b3480156109fc57600080fd5b50610452610a0b366004613b37565b6125ef565b348015610a1c57600080fd5b506103c1610a2b366004613b07565b612632565b348015610a3c57600080fd5b50610663612677565b348015610a5157600080fd5b50610a5a612691565b6040805194855260208501939093529183015260608201526080016103f9565b348015610a8657600080fd5b506103c1610a95366004613b37565b6126d2565b6103c1610aa8366004614060565b61276f565b348015610ab957600080fd5b506104526000805160206144a983398151915281565b348015610adb57600080fd5b50610aef610aea366004613ab9565b612831565b6040805192151583529015156020830152016103f9565b348015610b1257600080fd5b506103c1610b21366004613c8b565b6128b8565b348015610b3257600080fd5b50610663610b41366004613b37565b61295b565b6000610b506129de565b546001600160a01b03928316921691909114919050565b604051627e793160e11b815260048101829052600090819073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9062fcf262906024016040805180830381865af4158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd919061408e565b91509150915091565b60006001600160e01b03198216637965db0b60e01b1480610c1757506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90630253cd7e906044015b602060405180830381865af4158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca491906140b2565b9392505050565b610cb3612a0c565b81610cbd81610d03565b610cda57604051630f4a6ccd60e21b815260040160405180910390fd5b610ce5338484612a54565b505050565b6000610cf4612c51565b546001600160a01b0316919050565b600080610d0e612c7f565b60009384526005016020526040909220546001600160a01b031690911415919050565b6040516303ab749160e21b8152600481018390526001600160a01b038216602482015260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90630eadd24490604401610c63565b6040516354821c2160e01b81526001600160a01b03821660048201526000908190819073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e906354821c2190602401606060405180830381865af4158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe91906140cb565b9196909550909350915050565b610e13612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7491906140f9565b15610e92576040516319a90b2f60e21b815260040160405180910390fd5b610e9a612a0c565b81610ea481610d03565b610ec157604051630f4a6ccd60e21b815260040160405180910390fd5b610ce533848433612cb7565b6000610ed7612e33565b600092835260205250604090206001015490565b6040516312d4481960e11b81526001600160a01b038216600482015260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e906325a89032906024015b602060405180830381865af4158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1791906140b2565b6000610f7561136c565b905060005b81518110156110e4576000828281518110610f9757610f97614116565b602002602001015190506000610fab612c51565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161101c91869190605d0161412c565b602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190614145565b905080611068612c51565b6000848152600191909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a1505080806110dc90614178565b915050610f7a565b5050565b6000806110f361136c565b905060005b815181101561121157600082828151811061111557611115614116565b60200260200101519050611127612c51565b600082815260019190910160205260409020546001600160a01b031661114b612c51565b546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a72190602401602060405180830381865afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b69190614145565b6001600160a01b03161415806111ef575060006111d1612c51565b600083815260019190910160205260409020546001600160a01b0316145b156111fe576000935050505090565b508061120981614178565b9150506110f8565b50600191505090565b6000611224612691565b50919392505050565b61123682610ecd565b61123f81612e61565b610ce58383612e6b565b604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016103b8565b3361127d61220f565b6001600160a01b0316146112a35760405162461bcd60e51b81526004016103b890614191565b6112af84848484612ee2565b50505050565b6112bd612a0c565b6112c5613104565b6001600160a01b0316336001600160a01b0316146112f657604051637b3f42c160e01b81526004016103b8906141c6565b60405163392d430160e01b81526001600160a01b03831660048201526024810182905273bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063392d43019060440160006040518083038186803b15801561135057600080fd5b505af4158015611364573d6000803e3d6000fd5b505050505050565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b816000815181106113b7576113b7614116565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816001815181106113f1576113f1614116565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160028151811061141f5761141f614116565b60200260200101818152505090565b6114466000805160206144a98339815191523361235c565b6114635760405163a5523ee560e01b815260040160405180910390fd5b61146b613129565b565b6060818067ffffffffffffffff81111561148957611489613d08565b6040519080825280602002602001820160405280156114b2578160200160208202803683370190505b50915060005b81811015611515576114e18585838181106114d5576114d5614116565b90506020020135611bd5565b8382815181106114f3576114f3614116565b911515602092830291909101909101528061150d81614178565b9150506114b8565b505092915050565b611525612a0c565b61152d613104565b6001600160a01b0316336001600160a01b03161461155e57604051637b3f42c160e01b81526004016103b8906141c6565b8161156881610d03565b61158557604051630f4a6ccd60e21b815260040160405180910390fd5b604051634ba0c9b560e01b815273bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90634ba0c9b5906115c0908790879087906004016141f7565b60006040518083038186803b1580156115d857600080fd5b505af41580156115ec573d6000803e3d6000fd5b5050505050505050565b6000611600612c7f565b600092835260070160205250604090205490565b600061161e612a0c565b611626613104565b6001600160a01b0316336001600160a01b03161461165757604051637b3f42c160e01b81526004016103b8906141c6565b8461166181610d03565b61167e57604051630f4a6ccd60e21b815260040160405180910390fd5b60405163500d2f6d60e01b8152600481018790526001600160a01b038087166024830152851660448201526064810184905273bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063500d2f6d90608401602060405180830381865af41580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171091906140b2565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc15061174c8688614218565b60405190815260200160405180910390a450949350505050565b600080600073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e635257ed678787876040518463ffffffff1660e01b81526004016117a6939291906141f7565b606060405180830381865af41580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906140cb565b92509250925093509350939050565b6040516354821c2160e01b81526001600160a01b038216600482015260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e906354821c2190602401606060405180830381865af4158015611851573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187591906140cb565b50909392505050565b604051635575fba760e01b81526001600160a01b03831660048201526024810182905260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90635575fba790604401610c63565b60408051632910ae9d60e01b81526001600160a01b0384166004820152825160248201526020830151604482015290820151606482015260608201516084820152608082015160a482015260a082015160c482015260c082015160e4820152600090819073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90632910ae9d90610104016040805180830381865af4158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c919061422b565b915091505b9250929050565b6119a0612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0191906140f9565b15611a1f576040516319a90b2f60e21b815260040160405180910390fd5b33611a2861220f565b6001600160a01b031614611a4e5760405162461bcd60e51b81526004016103b890614191565b611a5661318a565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b8152600401611a8391815260200190565b602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac491906140f9565b1580611ad45750611ad483610d03565b15611af257604051631eb3268560e31b815260040160405180910390fd5b6001600160a01b038216611b195760405163c1ab6dc160e01b815260040160405180910390fd5b81611b22612c7f565b60008581526005919091016020526040902080546001600160a01b0319166001600160a01b03929092169190911790558015611b6f57611b6d83611b64612c7f565b60030190613194565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b6000611bcc6131a0565b5460ff16919050565b6000610c1782611be3612c7f565b600301906131ce565b611bf4612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5591906140f9565b15611c73576040516319a90b2f60e21b815260040160405180910390fd5b611c7b612a0c565b611c83613104565b6001600160a01b0316336001600160a01b031614611cb457604051637b3f42c160e01b81526004016103b8906141c6565b611cbd866125c8565b6001600160a01b031663d505accf883088888888886040518863ffffffff1660e01b8152600401611cf49796959493929190614250565b600060405180830381600087803b158015611d0e57600080fd5b505af1158015611d22573d6000803e3d6000fd5b50505050611d328787878a612cb7565b50505050505050565b611d43612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da491906140f9565b15611dc2576040516319a90b2f60e21b815260040160405180910390fd5b611dca612a0c565b86611dd481610d03565b611df157604051630f4a6ccd60e21b815260040160405180910390fd5b611dfa886125c8565b6001600160a01b031663d505accf33308a898989896040518863ffffffff1660e01b8152600401611e319796959493929190614250565b600060405180830381600087803b158015611e4b57600080fd5b505af1158015611e5f573d6000803e3d6000fd5b505050506115ec33898989612cb7565b33611e7861220f565b6001600160a01b031614611e9e5760405162461bcd60e51b81526004016103b890614191565b61146b60006131e6565b6000611eb2613104565b6001600160a01b0316336001600160a01b031614611ee357604051637b3f42c160e01b81526004016103b8906141c6565b81611eed81610d03565b611f0a57604051630f4a6ccd60e21b815260040160405180910390fd5b604051637d044b4360e01b81526001600160a01b03851660048201526024810184905273bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90637d044b4390604401602060405180830381865af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d91906140b2565b91505b5092915050565b604051633ea2414760e11b81526001600160a01b03831660048201526024810182905260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90637d44828e90604401606060405180830381865af4158015611ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201d91906140cb565b5090949350505050565b600054610100900460ff16158080156120475750600054600160ff909116105b806120615750303b158015612061575060005460ff166001145b6120c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b8565b6000805460ff1916600117905580156120e7576000805461ff0019166101001790555b60006120f1613253565b6001600160a01b0316036121525760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084016103b8565b61215b886131e6565b6121648761327b565b61216d826132d7565b6121768861334d565b6121838887878787613370565b80156115ec576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050505050565b6121ea6000805160206144a98339815191523361235c565b6122075760405163a5523ee560e01b815260040160405180910390fd5b61146b61338c565b6000610cf46133d4565b612221612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa15801561225e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228291906140f9565b156122a0576040516319a90b2f60e21b815260040160405180910390fd5b336122a961220f565b6001600160a01b0316146122cf5760405162461bcd60e51b81526004016103b890614191565b816122d981610d03565b6122f657604051630f4a6ccd60e21b815260040160405180910390fd5b811561230e5761230883611b64612c7f565b50612325565b6123238361231a612c7f565b60030190613402565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf819101611bb5565b6000612366612e33565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b60405163948060dd60e01b81526001600160a01b038216600482015260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063948060dd90602401610f2a565b6123db612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c91906140f9565b1561245a576040516319a90b2f60e21b815260040160405180910390fd5b612462612a0c565b61246a613104565b6001600160a01b0316336001600160a01b03161461249b57604051637b3f42c160e01b81526004016103b8906141c6565b610ce583838386612cb7565b6124bf6000805160206144a98339815191528261122d565b50565b6124bf6000805160206144a983398151915282612632565b60608167ffffffffffffffff8111156124f5576124f5613d08565b60405190808252806020026020018201604052801561252857816020015b60608152602001906001900390816125135790505b50905060005b82811015611f90576125983085858481811061254c5761254c614116565b905060200281019061255e9190614291565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061340e92505050565b8282815181106125aa576125aa614116565b602002602001018190525080806125c090614178565b91505061252e565b60006125d2612c7f565b60009283526005016020525060409020546001600160a01b031690565b60405163ca42303160e01b81526001600160a01b038216600482015260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063ca42303190602401610f2a565b336001600160a01b0382160361266d57604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016103b8565b6110e48282613433565b606061268c612684612c7f565b60030161344f565b905090565b60008060008061269f612c7f565b5493506126aa612c7f565b6009015492506126b8612c7f565b6001015491506126c6612c7f565b60020154905090919293565b336126db61220f565b6001600160a01b0316146127015760405162461bcd60e51b81526004016103b890614191565b6001600160a01b0381166127665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b8565b6124bf816131e6565b612777612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d891906140f9565b156127f6576040516319a90b2f60e21b815260040160405180910390fd5b6127fe612a0c565b8261280881610d03565b61282557604051630f4a6ccd60e21b815260040160405180910390fd5b6112af33858585612cb7565b604051633dfbca3560e21b81526001600160a01b038316600482015260248101829052600090819073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063f7ef28d4906044016040805180830381865af4158015612894573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906142d8565b6128c0612a0c565b6128c8613104565b6001600160a01b0316336001600160a01b0316146128f957604051637b3f42c160e01b81526004016103b8906141c6565b8161290381610d03565b61292057604051630f4a6ccd60e21b815260040160405180910390fd5b604051633edef4ed60e21b815273bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063fb7bd3b4906115c0908790879087906004016141f7565b604051630fc7008160e41b81526001600160a01b038216600482015260609073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063fc70081090602401600060405180830381865af41580156129b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c179190810190614307565b600080610c1760017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b614218565b612a14611bc2565b1561146b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b8565b80600003612a75576040516310eb483f60e21b815260040160405180910390fd5b612a7d612cad565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e590602401602060405180830381865afa158015612ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae991906140f9565b15612b0757604051631f6d627d60e11b815260040160405180910390fd5b612b0f612cad565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b906044016020604051808303816000875af1158015612b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8491906140b2565b5060405163148b8b9d60e11b815260009073bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e90632917173a90612bc3908790879087906004016141f7565b602060405180830381865af4158015612be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0491906140b2565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b600080610c1760017f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018614218565b600080610c1760017f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a8317614218565b600061268c613104565b81600003612cd8576040516310eb483f60e21b815260040160405180910390fd5b6000612ce2612c7f565b600085815260059190910160205260409020546001600160a01b03169050612d0981610b46565b8015612d155750823414155b80612d305750612d2481610b46565b158015612d3057503415155b15612d5e57604051631471902b60e01b815260048101859052602481018490523460448201526064016103b8565b60405163aa5974d360e01b81526001600160a01b03808716600483015260248201869052604482018590528316606482015273bd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e9063aa5974d39060840160006040518083038186803b158015612dc757600080fd5b505af4158015612ddb573d6000803e3d6000fd5b505060408051878152602081018790526001600160a01b0389811682840152915191861693507fddcff2534e44ab893ab86cadbfcf556c7c257bd657d168b0bfed850311dfe4f8925081900360600190a25050505050565b600080610c1760017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f9614218565b6124bf813361345c565b612e75828261235c565b6110e4576001612e83612e33565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6127108411612f0457604051630821f57960e31b815260040160405180910390fd5b61271083111580612f1457508383115b15612f32576040516374cea83b60e11b815260040160405180910390fd5b612710821115612f55576040516370a4af3d60e01b815260040160405180910390fd5b612710811115612f7857604051631da7276f60e01b815260040160405180910390fd5b612f80612c7f565b548414612fd3577fb6b557cee4263a37fd3d5628283cf80f163f642348be22b584f987f624ee710c612fb0612c7f565b5460408051918252602082018790520160405180910390a183612fd1612c7f565b555b612fdb612c7f565b600901548314613037577fbd5d5ae34f2dd641ea43162200c0f86567cbf1b92441fef559df6aa00dd4f2ab61300e612c7f565b6009015460408051918252602082018690520160405180910390a182613032612c7f565b600901555b61303f612c7f565b60010154821461309b577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f613072612c7f565b6001015460408051918252602082018590520160405180910390a181613096612c7f565b600101555b6130a3612c7f565b6002015481146112af577f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd956130d6612c7f565b6002015460408051918252602082018490520160405180910390a1806130fa612c7f565b6002015550505050565b600061268c762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6134c0565b613131613521565b600061313b6131a0565b805460ff19169115159190911790557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061268c61356c565b6000610ca4838361358c565b600080610c1760017f9c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f3614218565b60008181526001830160205260408120541515610ca4565b60006131f06133d4565b546001600160a01b03169050816132056133d4565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610cf4565b6000613285612c51565b546001600160a01b0316146132ad576040516304b79d6360e51b815260040160405180910390fd5b806132b6612c51565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60006132e16129de565b546001600160a01b0316146133445760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b60648201526084016103b8565b806132b66129de565b613358600082612e6b565b6124bf6000805160206144a983398151915282612e6b565b613379856131e6565b61338584848484612ee2565b5050505050565b613394612a0c565b600161339e6131a0565b805460ff19169115159190911790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583361316d565b600080610c1760017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa614218565b6000610ca483836135db565b6060610ca483836040518060600160405280602781526020016144c9602791396136ce565b61343c82610ecd565b61344581612e61565b610ce58383613746565b60606000610ca4836137be565b613466828261235c565b6110e45761347e816001600160a01b0316601461381a565b61348983602061381a565b60405160200161349a9291906143ad565b60408051601f198184030181529082905262461bcd60e51b82526103b891600401614422565b6000806134cb612c51565b600084815260019190910160205260409020546001600160a01b0316905080610c175760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b82526103b891600401614422565b613529611bc2565b61146b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103b8565b600061268c7121bab93932b731bca1b7b73a3937b63632b960711b6134c0565b60008181526001830160205260408120546135d357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c17565b506000610c17565b600081815260018301602052604081205480156136c45760006135ff600183614218565b855490915060009061361390600190614218565b905081811461367857600086600001828154811061363357613633614116565b906000526020600020015490508087600001848154811061365657613656614116565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061368957613689614435565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c17565b6000915050610c17565b6060600080856001600160a01b0316856040516136eb919061444b565b600060405180830381855af49150503d8060008114613726576040519150601f19603f3d011682016040523d82523d6000602084013e61372b565b606091505b509150915061373c868383876139b6565b9695505050505050565b613750828261235c565b156110e457600061375f612e33565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561380e57602002820191906000526020600020905b8154815260200190600101908083116137fa575b50505050509050919050565b60606000613829836002614467565b61383490600261447e565b67ffffffffffffffff81111561384c5761384c613d08565b6040519080825280601f01601f191660200182016040528015613876576020820181803683370190505b509050600360fc1b8160008151811061389157613891614116565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106138c0576138c0614116565b60200101906001600160f81b031916908160001a90535060006138e4846002614467565b6138ef90600161447e565b90505b6001811115613967576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061392357613923614116565b1a60f81b82828151811061393957613939614116565b60200101906001600160f81b031916908160001a90535060049490941c9361396081614491565b90506138f2565b508315610ca45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103b8565b60608315613a25578251600003613a1e576001600160a01b0385163b613a1e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b8565b5081613a2f565b613a2f8383613a37565b949350505050565b815115613a475781518083602001fd5b8060405162461bcd60e51b81526004016103b89190614422565b600060208284031215613a7357600080fd5b5035919050565b600060208284031215613a8c57600080fd5b81356001600160e01b031981168114610ca457600080fd5b6001600160a01b03811681146124bf57600080fd5b60008060408385031215613acc57600080fd5b8235613ad781613aa4565b946020939093013593505050565b60008060408385031215613af857600080fd5b50508035926020909101359150565b60008060408385031215613b1a57600080fd5b823591506020830135613b2c81613aa4565b809150509250929050565b600060208284031215613b4957600080fd5b8135610ca481613aa4565b60008060008060808587031215613b6a57600080fd5b5050823594602084013594506040840135936060013592509050565b6020808252825182820181905260009190848201906040850190845b81811015613bbe57835183529284019291840191600101613ba2565b50909695505050505050565b60008083601f840112613bdc57600080fd5b50813567ffffffffffffffff811115613bf457600080fd5b6020830191508360208260051b850101111561199157600080fd5b60008060208385031215613c2257600080fd5b823567ffffffffffffffff811115613c3957600080fd5b613c4585828601613bca565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015613bbe578351151583529284019291840191600101613c6d565b600080600060608486031215613ca057600080fd5b8335613cab81613aa4565b95602085013595506040909401359392505050565b60008060008060808587031215613cd657600080fd5b843593506020850135613ce881613aa4565b92506040850135613cf881613aa4565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613d4157613d41613d08565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d7057613d70613d08565b604052919050565b600080828403610100811215613d8d57600080fd5b8335613d9881613aa4565b925060e0601f1982011215613dac57600080fd5b50613db5613d1e565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b80151581146124bf57600080fd5b600080600060608486031215613e2657600080fd5b833592506020840135613e3881613aa4565b91506040840135613e4881613e03565b809150509250925092565b803560ff81168114613e6457600080fd5b919050565b600080600080600080600060e0888a031215613e8457600080fd5b8735613e8f81613aa4565b9650602088013595506040880135945060608801359350613eb260808901613e53565b925060a0880135915060c0880135905092959891949750929550565b600080600080600080600060e0888a031215613ee957600080fd5b87359650602088013595506040880135613f0281613aa4565b945060608801359350613eb260808901613e53565b600080600080600080600060e0888a031215613f3257600080fd5b8735613f3d81613aa4565b96506020880135613f4d81613aa4565b955060408801359450606088013593506080880135925060a0880135915060c0880135613f7981613aa4565b8091505092959891949750929550565b60008060408385031215613f9c57600080fd5b823591506020830135613b2c81613e03565b60005b83811015613fc9578181015183820152602001613fb1565b50506000910152565b60008151808452613fea816020860160208601613fae565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561405357603f19888603018452614041858351613fd2565b94509285019290850190600101614025565b5092979650505050505050565b60008060006060848603121561407557600080fd5b83359250602084013591506040840135613e4881613aa4565b600080604083850312156140a157600080fd5b505080516020909101519092909150565b6000602082840312156140c457600080fd5b5051919050565b6000806000606084860312156140e057600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561410b57600080fd5b8151610ca481613e03565b634e487b7160e01b600052603260045260246000fd5b828152604060208201526000613a2f6040830184613fd2565b60006020828403121561415757600080fd5b8151610ca481613aa4565b634e487b7160e01b600052601160045260246000fd5b60006001820161418a5761418a614162565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601790820152762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b81810381811115610c1757610c17614162565b6000806040838503121561423e57600080fd5b825191506020830151613b2c81613e03565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000808335601e198436030181126142a857600080fd5b83018035915067ffffffffffffffff8211156142c357600080fd5b60200191503681900382131561199157600080fd5b600080604083850312156142eb57600080fd5b82516142f681613e03565b6020840151909250613b2c81613e03565b6000602080838503121561431a57600080fd5b825167ffffffffffffffff8082111561433257600080fd5b818501915085601f83011261434657600080fd5b81518181111561435857614358613d08565b8060051b9150614369848301613d47565b818152918301840191848101908884111561438357600080fd5b938501935b838510156143a157845182529385019390850190614388565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516143e5816017850160208801613fae565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614416816028840160208801613fae565b01602801949350505050565b602081526000610ca46020830184613fd2565b634e487b7160e01b600052603160045260246000fd5b6000825161445d818460208701613fae565b9190910192915050565b8082028115828204841417610c1757610c17614162565b80820180821115610c1757610c17614162565b6000816144a0576144a0614162565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015e672c3dac79df513fce92c7836566daa082ac288fd5a925d2886ccad14190164736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061038f5760003560e01c80635bffeb66116101dc5780639870d7fe11610102578063d5e190d0116100a0578063f5b541a61161006f578063f5b541a614610aad578063f7ef28d414610acf578063fb7bd3b414610b06578063fc70081014610b2657600080fd5b8063d5e190d014610a30578063ed6dd51414610a45578063f2fde38b14610a7a578063f4040abe14610a9a57600080fd5b8063ac9650d8116100dc578063ac9650d8146109a3578063b12e4410146109d0578063ca423031146109f0578063d547741f14610a1057600080fd5b80639870d7fe1461094e578063a217fddf1461096e578063ac8a584a1461098357600080fd5b80637d44828e1161017a5780638e19aff3116101495780638e19aff3146108db57806391d14854146108fb578063948060dd1461091b57806396994e371461093b57600080fd5b80637d44828e1461087157806383a5041c146108915780638456cb59146108b15780638da5cb5b146108c657600080fd5b806360819025116101b657806360819025146107fc5780636a3db9c61461081c578063715018a61461083c5780637d044b431461085157600080fd5b80635bffeb66146107a75780635c975abb146107c75780635d95df8a146107dc57600080fd5b80632e44b3f9116102c15780633f90a08e1161025f5780635257ed671161022e5780635257ed671461071257806354821c21146107325780635575fba714610752578063590472001461077257600080fd5b80633f90a08e146106855780634ba0c9b5146106b25780634c6aa99c146106d2578063500d2f6d146106f257600080fd5b806337ebbf691161029b57806337ebbf691461060e578063392d43011461062e5780633d03b9da1461064e5780633f4ba83a1461067057600080fd5b80632e44b3f9146105b95780632f2ff15d146105ce57806336568abe146105ee57600080fd5b80631316529d1161032e578063248a9ca311610308578063248a9ca31461054f57806325a890321461056f57806329985e5a1461058f5780632af64bd3146105a457600080fd5b80631316529d146104ed57806315c0dc20146105015780631de26e161461053c57600080fd5b8063040cf0201161036a578063040cf0201461046057806304f3bcec146104805780630cf7505d146104ad5780630eadd244146104cd57600080fd5b8062fcf262146103c857806301ffc9a7146104025780630253cd7e1461043257600080fd5b366103c35761039d33610b46565b6103c15760405163efd4e4e160e01b81523360048201526024015b60405180910390fd5b005b600080fd5b3480156103d457600080fd5b506103e86103e3366004613a61565b610b67565b604080519283526020830191909152015b60405180910390f35b34801561040e57600080fd5b5061042261041d366004613a7a565b610be6565b60405190151581526020016103f9565b34801561043e57600080fd5b5061045261044d366004613ab9565b610c1d565b6040519081526020016103f9565b34801561046c57600080fd5b506103c161047b366004613ae5565b610cab565b34801561048c57600080fd5b50610495610cea565b6040516001600160a01b0390911681526020016103f9565b3480156104b957600080fd5b506104226104c8366004613a61565b610d03565b3480156104d957600080fd5b506104526104e8366004613b07565b610d31565b3480156104f957600080fd5b506002610452565b34801561050d57600080fd5b5061052161051c366004613b37565b610d7b565b604080519384526020840192909252908201526060016103f9565b6103c161054a366004613ae5565b610e0b565b34801561055b57600080fd5b5061045261056a366004613a61565b610ecd565b34801561057b57600080fd5b5061045261058a366004613b37565b610eeb565b34801561059b57600080fd5b506103c1610f6b565b3480156105b057600080fd5b506104226110e8565b3480156105c557600080fd5b5061045261121a565b3480156105da57600080fd5b506103c16105e9366004613b07565b61122d565b3480156105fa57600080fd5b506103c1610609366004613b07565b611249565b34801561061a57600080fd5b506103c1610629366004613b54565b611274565b34801561063a57600080fd5b506103c1610649366004613ab9565b6112b5565b34801561065a57600080fd5b5061066361136c565b6040516103f99190613b86565b34801561067c57600080fd5b506103c161142e565b34801561069157600080fd5b506106a56106a0366004613c0f565b61146d565b6040516103f99190613c51565b3480156106be57600080fd5b506103c16106cd366004613c8b565b61151d565b3480156106de57600080fd5b506104526106ed366004613a61565b6115f6565b3480156106fe57600080fd5b5061045261070d366004613cc0565b611614565b34801561071e57600080fd5b5061052161072d366004613c8b565b611766565b34801561073e57600080fd5b5061045261074d366004613b37565b6117f6565b34801561075e57600080fd5b5061045261076d366004613ab9565b61187e565b34801561077e57600080fd5b5061079261078d366004613d78565b6118c8565b604080519283529015156020830152016103f9565b3480156107b357600080fd5b506103c16107c2366004613e11565b611998565b3480156107d357600080fd5b50610422611bc2565b3480156107e857600080fd5b506104226107f7366004613a61565b611bd5565b34801561080857600080fd5b506103c1610817366004613e69565b611bec565b34801561082857600080fd5b506103c1610837366004613ece565b611d3b565b34801561084857600080fd5b506103c1611e6f565b34801561085d57600080fd5b5061045261086c366004613ab9565b611ea8565b34801561087d57600080fd5b5061045261088c366004613ab9565b611f97565b34801561089d57600080fd5b506103c16108ac366004613f17565b612027565b3480156108bd57600080fd5b506103c16121d2565b3480156108d257600080fd5b5061049561220f565b3480156108e757600080fd5b506103c16108f6366004613f89565b612219565b34801561090757600080fd5b50610422610916366004613b07565b61235c565b34801561092757600080fd5b50610452610936366004613b37565b612390565b6103c1610949366004613c8b565b6123d3565b34801561095a57600080fd5b506103c1610969366004613b37565b6124a7565b34801561097a57600080fd5b50610452600081565b34801561098f57600080fd5b506103c161099e366004613b37565b6124c2565b3480156109af57600080fd5b506109c36109be366004613c0f565b6124da565b6040516103f99190613ffe565b3480156109dc57600080fd5b506104956109eb366004613a61565b6125c8565b3480156109fc57600080fd5b50610452610a0b366004613b37565b6125ef565b348015610a1c57600080fd5b506103c1610a2b366004613b07565b612632565b348015610a3c57600080fd5b50610663612677565b348015610a5157600080fd5b50610a5a612691565b6040805194855260208501939093529183015260608201526080016103f9565b348015610a8657600080fd5b506103c1610a95366004613b37565b6126d2565b6103c1610aa8366004614060565b61276f565b348015610ab957600080fd5b506104526000805160206144a983398151915281565b348015610adb57600080fd5b50610aef610aea366004613ab9565b612831565b6040805192151583529015156020830152016103f9565b348015610b1257600080fd5b506103c1610b21366004613c8b565b6128b8565b348015610b3257600080fd5b50610663610b41366004613b37565b61295b565b6000610b506129de565b546001600160a01b03928316921691909114919050565b604051627e793160e11b815260048101829052600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__9062fcf262906024016040805180830381865af4158015610bb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdd919061408e565b91509150915091565b60006001600160e01b03198216637965db0b60e01b1480610c1757506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051630129e6bf60e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630253cd7e906044015b602060405180830381865af4158015610c80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca491906140b2565b9392505050565b610cb3612a0c565b81610cbd81610d03565b610cda57604051630f4a6ccd60e21b815260040160405180910390fd5b610ce5338484612a54565b505050565b6000610cf4612c51565b546001600160a01b0316919050565b600080610d0e612c7f565b60009384526005016020526040909220546001600160a01b031690911415919050565b6040516303ab749160e21b8152600481018390526001600160a01b038216602482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90630eadd24490604401610c63565b6040516354821c2160e01b81526001600160a01b03821660048201526000908190819073__$e77f6d4722b46e0b0a57517726dbfd997e$__906354821c2190602401606060405180830381865af4158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe91906140cb565b9196909550909350915050565b610e13612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7491906140f9565b15610e92576040516319a90b2f60e21b815260040160405180910390fd5b610e9a612a0c565b81610ea481610d03565b610ec157604051630f4a6ccd60e21b815260040160405180910390fd5b610ce533848433612cb7565b6000610ed7612e33565b600092835260205250604090206001015490565b6040516312d4481960e11b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906325a89032906024015b602060405180830381865af4158015610f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1791906140b2565b6000610f7561136c565b905060005b81518110156110e4576000828281518110610f9757610f97614116565b602002602001015190506000610fab612c51565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161101c91869190605d0161412c565b602060405180830381865afa158015611039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105d9190614145565b905080611068612c51565b6000848152600191909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a1505080806110dc90614178565b915050610f7a565b5050565b6000806110f361136c565b905060005b815181101561121157600082828151811061111557611115614116565b60200260200101519050611127612c51565b600082815260019190910160205260409020546001600160a01b031661114b612c51565b546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a72190602401602060405180830381865afa158015611192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b69190614145565b6001600160a01b03161415806111ef575060006111d1612c51565b600083815260019190910160205260409020546001600160a01b0316145b156111fe576000935050505090565b508061120981614178565b9150506110f8565b50600191505090565b6000611224612691565b50919392505050565b61123682610ecd565b61123f81612e61565b610ce58383612e6b565b604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016103b8565b3361127d61220f565b6001600160a01b0316146112a35760405162461bcd60e51b81526004016103b890614191565b6112af84848484612ee2565b50505050565b6112bd612a0c565b6112c5613104565b6001600160a01b0316336001600160a01b0316146112f657604051637b3f42c160e01b81526004016103b8906141c6565b60405163392d430160e01b81526001600160a01b03831660048201526024810182905273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063392d43019060440160006040518083038186803b15801561135057600080fd5b505af4158015611364573d6000803e3d6000fd5b505050505050565b604080516003808252608082019092526060916020820183803683370190505090507121bab93932b731bca1b7b73a3937b63632b960711b816000815181106113b7576113b7614116565b602002602001018181525050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b816001815181106113f1576113f1614116565b6020026020010181815250506a14995cd95c9d99519d5b9960aa1b8160028151811061141f5761141f614116565b60200260200101818152505090565b6114466000805160206144a98339815191523361235c565b6114635760405163a5523ee560e01b815260040160405180910390fd5b61146b613129565b565b6060818067ffffffffffffffff81111561148957611489613d08565b6040519080825280602002602001820160405280156114b2578160200160208202803683370190505b50915060005b81811015611515576114e18585838181106114d5576114d5614116565b90506020020135611bd5565b8382815181106114f3576114f3614116565b911515602092830291909101909101528061150d81614178565b9150506114b8565b505092915050565b611525612a0c565b61152d613104565b6001600160a01b0316336001600160a01b03161461155e57604051637b3f42c160e01b81526004016103b8906141c6565b8161156881610d03565b61158557604051630f4a6ccd60e21b815260040160405180910390fd5b604051634ba0c9b560e01b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__90634ba0c9b5906115c0908790879087906004016141f7565b60006040518083038186803b1580156115d857600080fd5b505af41580156115ec573d6000803e3d6000fd5b5050505050505050565b6000611600612c7f565b600092835260070160205250604090205490565b600061161e612a0c565b611626613104565b6001600160a01b0316336001600160a01b03161461165757604051637b3f42c160e01b81526004016103b8906141c6565b8461166181610d03565b61167e57604051630f4a6ccd60e21b815260040160405180910390fd5b60405163500d2f6d60e01b8152600481018790526001600160a01b038087166024830152851660448201526064810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063500d2f6d90608401602060405180830381865af41580156116ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171091906140b2565b91506001600160a01b03808516908616877ff8ca259b4b82670be7501ff56ad1fc9c7cd199d3431e3c502f2c5f86884bc15061174c8688614218565b60405190815260200160405180910390a450949350505050565b600080600073__$e77f6d4722b46e0b0a57517726dbfd997e$__635257ed678787876040518463ffffffff1660e01b81526004016117a6939291906141f7565b606060405180830381865af41580156117c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e791906140cb565b92509250925093509350939050565b6040516354821c2160e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__906354821c2190602401606060405180830381865af4158015611851573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187591906140cb565b50909392505050565b604051635575fba760e01b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90635575fba790604401610c63565b60408051632910ae9d60e01b81526001600160a01b0384166004820152825160248201526020830151604482015290820151606482015260608201516084820152608082015160a482015260a082015160c482015260c082015160e4820152600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632910ae9d90610104016040805180830381865af4158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c919061422b565b915091505b9250929050565b6119a0612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0191906140f9565b15611a1f576040516319a90b2f60e21b815260040160405180910390fd5b33611a2861220f565b6001600160a01b031614611a4e5760405162461bcd60e51b81526004016103b890614191565b611a5661318a565b6001600160a01b0316631eae0893846040518263ffffffff1660e01b8152600401611a8391815260200190565b602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac491906140f9565b1580611ad45750611ad483610d03565b15611af257604051631eb3268560e31b815260040160405180910390fd5b6001600160a01b038216611b195760405163c1ab6dc160e01b815260040160405180910390fd5b81611b22612c7f565b60008581526005919091016020526040902080546001600160a01b0319166001600160a01b03929092169190911790558015611b6f57611b6d83611b64612c7f565b60030190613194565b505b604080518481526001600160a01b0384166020820152821515918101919091527ff776c30df345d55df252bb5181a0c2bb23d601166606790a6f1b938d7e158503906060015b60405180910390a1505050565b6000611bcc6131a0565b5460ff16919050565b6000610c1782611be3612c7f565b600301906131ce565b611bf4612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5591906140f9565b15611c73576040516319a90b2f60e21b815260040160405180910390fd5b611c7b612a0c565b611c83613104565b6001600160a01b0316336001600160a01b031614611cb457604051637b3f42c160e01b81526004016103b8906141c6565b611cbd866125c8565b6001600160a01b031663d505accf883088888888886040518863ffffffff1660e01b8152600401611cf49796959493929190614250565b600060405180830381600087803b158015611d0e57600080fd5b505af1158015611d22573d6000803e3d6000fd5b50505050611d328787878a612cb7565b50505050505050565b611d43612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da491906140f9565b15611dc2576040516319a90b2f60e21b815260040160405180910390fd5b611dca612a0c565b86611dd481610d03565b611df157604051630f4a6ccd60e21b815260040160405180910390fd5b611dfa886125c8565b6001600160a01b031663d505accf33308a898989896040518863ffffffff1660e01b8152600401611e319796959493929190614250565b600060405180830381600087803b158015611e4b57600080fd5b505af1158015611e5f573d6000803e3d6000fd5b505050506115ec33898989612cb7565b33611e7861220f565b6001600160a01b031614611e9e5760405162461bcd60e51b81526004016103b890614191565b61146b60006131e6565b6000611eb2613104565b6001600160a01b0316336001600160a01b031614611ee357604051637b3f42c160e01b81526004016103b8906141c6565b81611eed81610d03565b611f0a57604051630f4a6ccd60e21b815260040160405180910390fd5b604051637d044b4360e01b81526001600160a01b03851660048201526024810184905273__$e77f6d4722b46e0b0a57517726dbfd997e$__90637d044b4390604401602060405180830381865af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d91906140b2565b91505b5092915050565b604051633ea2414760e11b81526001600160a01b03831660048201526024810182905260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90637d44828e90604401606060405180830381865af4158015611ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201d91906140cb565b5090949350505050565b600054610100900460ff16158080156120475750600054600160ff909116105b806120615750303b158015612061575060005460ff166001145b6120c45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103b8565b6000805460ff1916600117905580156120e7576000805461ff0019166101001790555b60006120f1613253565b6001600160a01b0316036121525760405162461bcd60e51b815260206004820152602260248201527f4d7573742062652063616c6c65642066726f6d2070726f787920636f6e74726160448201526118dd60f21b60648201526084016103b8565b61215b886131e6565b6121648761327b565b61216d826132d7565b6121768861334d565b6121838887878787613370565b80156115ec576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050505050565b6121ea6000805160206144a98339815191523361235c565b6122075760405163a5523ee560e01b815260040160405180910390fd5b61146b61338c565b6000610cf46133d4565b612221612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa15801561225e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228291906140f9565b156122a0576040516319a90b2f60e21b815260040160405180910390fd5b336122a961220f565b6001600160a01b0316146122cf5760405162461bcd60e51b81526004016103b890614191565b816122d981610d03565b6122f657604051630f4a6ccd60e21b815260040160405180910390fd5b811561230e5761230883611b64612c7f565b50612325565b6123238361231a612c7f565b60030190613402565b505b6040805184815283151560208201527f97caf2b3b2f0aa460ca08b20c07f7a43ccf688e2f3b7179f2cf9113fb892bf819101611bb5565b6000612366612e33565b6000938452602090815260408085206001600160a01b039490941685529290525090205460ff1690565b60405163948060dd60e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063948060dd90602401610f2a565b6123db612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa158015612418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061243c91906140f9565b1561245a576040516319a90b2f60e21b815260040160405180910390fd5b612462612a0c565b61246a613104565b6001600160a01b0316336001600160a01b03161461249b57604051637b3f42c160e01b81526004016103b8906141c6565b610ce583838386612cb7565b6124bf6000805160206144a98339815191528261122d565b50565b6124bf6000805160206144a983398151915282612632565b60608167ffffffffffffffff8111156124f5576124f5613d08565b60405190808252806020026020018201604052801561252857816020015b60608152602001906001900390816125135790505b50905060005b82811015611f90576125983085858481811061254c5761254c614116565b905060200281019061255e9190614291565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061340e92505050565b8282815181106125aa576125aa614116565b602002602001018190525080806125c090614178565b91505061252e565b60006125d2612c7f565b60009283526005016020525060409020546001600160a01b031690565b60405163ca42303160e01b81526001600160a01b038216600482015260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063ca42303190602401610f2a565b336001600160a01b0382160361266d57604051631eb5512b60e31b8152600481018390526001600160a01b03821660248201526044016103b8565b6110e48282613433565b606061268c612684612c7f565b60030161344f565b905090565b60008060008061269f612c7f565b5493506126aa612c7f565b6009015492506126b8612c7f565b6001015491506126c6612c7f565b60020154905090919293565b336126db61220f565b6001600160a01b0316146127015760405162461bcd60e51b81526004016103b890614191565b6001600160a01b0381166127665760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103b8565b6124bf816131e6565b612777612cad565b6001600160a01b031663d1cc99766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d891906140f9565b156127f6576040516319a90b2f60e21b815260040160405180910390fd5b6127fe612a0c565b8261280881610d03565b61282557604051630f4a6ccd60e21b815260040160405180910390fd5b6112af33858585612cb7565b604051633dfbca3560e21b81526001600160a01b038316600482015260248101829052600090819073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063f7ef28d4906044016040805180830381865af4158015612894573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906142d8565b6128c0612a0c565b6128c8613104565b6001600160a01b0316336001600160a01b0316146128f957604051637b3f42c160e01b81526004016103b8906141c6565b8161290381610d03565b61292057604051630f4a6ccd60e21b815260040160405180910390fd5b604051633edef4ed60e21b815273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fb7bd3b4906115c0908790879087906004016141f7565b604051630fc7008160e41b81526001600160a01b038216600482015260609073__$e77f6d4722b46e0b0a57517726dbfd997e$__9063fc70081090602401600060405180830381865af41580156129b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c179190810190614307565b600080610c1760017f6f969d660e14559aec53d066903ba87981d0679d31bf1d3793a220e70e02808b614218565b612a14611bc2565b1561146b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016103b8565b80600003612a75576040516310eb483f60e21b815260040160405180910390fd5b612a7d612cad565b60405163862fd6e560e01b81526001600160a01b038581166004830152919091169063862fd6e590602401602060405180830381865afa158015612ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae991906140f9565b15612b0757604051631f6d627d60e11b815260040160405180910390fd5b612b0f612cad565b604051639519832b60e01b8152600481018490526001600160a01b0385811660248301529190911690639519832b906044016020604051808303816000875af1158015612b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8491906140b2565b5060405163148b8b9d60e11b815260009073__$e77f6d4722b46e0b0a57517726dbfd997e$__90632917173a90612bc3908790879087906004016141f7565b602060405180830381865af4158015612be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0491906140b2565b60408051858152602081018390529192506001600160a01b038616917fc3ded2be7db21b1af963f267d27750e4a15f174547d88b886b9bda43e2c6fa32910160405180910390a250505050565b600080610c1760017f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018614218565b600080610c1760017f53832330c92cb5d80f0e1ff6fdb9886f7fad39132543bafb7497316eae2a8317614218565b600061268c613104565b81600003612cd8576040516310eb483f60e21b815260040160405180910390fd5b6000612ce2612c7f565b600085815260059190910160205260409020546001600160a01b03169050612d0981610b46565b8015612d155750823414155b80612d305750612d2481610b46565b158015612d3057503415155b15612d5e57604051631471902b60e01b815260048101859052602481018490523460448201526064016103b8565b60405163aa5974d360e01b81526001600160a01b03808716600483015260248201869052604482018590528316606482015273__$e77f6d4722b46e0b0a57517726dbfd997e$__9063aa5974d39060840160006040518083038186803b158015612dc757600080fd5b505af4158015612ddb573d6000803e3d6000fd5b505060408051878152602081018790526001600160a01b0389811682840152915191861693507fddcff2534e44ab893ab86cadbfcf556c7c257bd657d168b0bfed850311dfe4f8925081900360600190a25050505050565b600080610c1760017f35e4a72724550e3953b041d501f29ff9ff417812c2917a203d9c4833b9d1d6f9614218565b6124bf813361345c565b612e75828261235c565b6110e4576001612e83612e33565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6127108411612f0457604051630821f57960e31b815260040160405180910390fd5b61271083111580612f1457508383115b15612f32576040516374cea83b60e11b815260040160405180910390fd5b612710821115612f55576040516370a4af3d60e01b815260040160405180910390fd5b612710811115612f7857604051631da7276f60e01b815260040160405180910390fd5b612f80612c7f565b548414612fd3577fb6b557cee4263a37fd3d5628283cf80f163f642348be22b584f987f624ee710c612fb0612c7f565b5460408051918252602082018790520160405180910390a183612fd1612c7f565b555b612fdb612c7f565b600901548314613037577fbd5d5ae34f2dd641ea43162200c0f86567cbf1b92441fef559df6aa00dd4f2ab61300e612c7f565b6009015460408051918252602082018690520160405180910390a182613032612c7f565b600901555b61303f612c7f565b60010154821461309b577f651b17c8e9402610e6210cfaa5b252d2186f8a16adf58c9c0fd5793bc4ea9b1f613072612c7f565b6001015460408051918252602082018590520160405180910390a181613096612c7f565b600101555b6130a3612c7f565b6002015481146112af577f7e8f030f9238551b066874b952f0c6ba811ba426ab231ba4825421d5d8f5cd956130d6612c7f565b6002015460408051918252602082018490520160405180910390a1806130fa612c7f565b6002015550505050565b600061268c762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6134c0565b613131613521565b600061313b6131a0565b805460ff19169115159190911790557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600061268c61356c565b6000610ca4838361358c565b600080610c1760017f9c789132bdb3678132848a8dcd780bffd2b1abdce3984c522ac1d8aeb48f05f3614218565b60008181526001830160205260408120541515610ca4565b60006131f06133d4565b546001600160a01b03169050816132056133d4565b80546001600160a01b0319166001600160a01b03928316179055604051838216918316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610cf4565b6000613285612c51565b546001600160a01b0316146132ad576040516304b79d6360e51b815260040160405180910390fd5b806132b6612c51565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60006132e16129de565b546001600160a01b0316146133445760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a20416c726561647920696e697469616c696044820152621e995960ea1b60648201526084016103b8565b806132b66129de565b613358600082612e6b565b6124bf6000805160206144a983398151915282612e6b565b613379856131e6565b61338584848484612ee2565b5050505050565b613394612a0c565b600161339e6131a0565b805460ff19169115159190911790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583361316d565b600080610c1760017f9acda75aebd150dd434541a4747a6dc606f4f1a59662477e67daf1fc0bf9e0aa614218565b6000610ca483836135db565b6060610ca483836040518060600160405280602781526020016144c9602791396136ce565b61343c82610ecd565b61344581612e61565b610ce58383613746565b60606000610ca4836137be565b613466828261235c565b6110e45761347e816001600160a01b0316601461381a565b61348983602061381a565b60405160200161349a9291906143ad565b60408051601f198184030181529082905262461bcd60e51b82526103b891600401614422565b6000806134cb612c51565b600084815260019190910160205260409020546001600160a01b0316905080610c175760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b82526103b891600401614422565b613529611bc2565b61146b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016103b8565b600061268c7121bab93932b731bca1b7b73a3937b63632b960711b6134c0565b60008181526001830160205260408120546135d357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c17565b506000610c17565b600081815260018301602052604081205480156136c45760006135ff600183614218565b855490915060009061361390600190614218565b905081811461367857600086600001828154811061363357613633614116565b906000526020600020015490508087600001848154811061365657613656614116565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061368957613689614435565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c17565b6000915050610c17565b6060600080856001600160a01b0316856040516136eb919061444b565b600060405180830381855af49150503d8060008114613726576040519150601f19603f3d011682016040523d82523d6000602084013e61372b565b606091505b509150915061373c868383876139b6565b9695505050505050565b613750828261235c565b156110e457600061375f612e33565b6000848152602091825260408082206001600160a01b0386168084529352808220805460ff1916941515949094179093559151339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561380e57602002820191906000526020600020905b8154815260200190600101908083116137fa575b50505050509050919050565b60606000613829836002614467565b61383490600261447e565b67ffffffffffffffff81111561384c5761384c613d08565b6040519080825280601f01601f191660200182016040528015613876576020820181803683370190505b509050600360fc1b8160008151811061389157613891614116565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106138c0576138c0614116565b60200101906001600160f81b031916908160001a90535060006138e4846002614467565b6138ef90600161447e565b90505b6001811115613967576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061392357613923614116565b1a60f81b82828151811061393957613939614116565b60200101906001600160f81b031916908160001a90535060049490941c9361396081614491565b90506138f2565b508315610ca45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103b8565b60608315613a25578251600003613a1e576001600160a01b0385163b613a1e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103b8565b5081613a2f565b613a2f8383613a37565b949350505050565b815115613a475781518083602001fd5b8060405162461bcd60e51b81526004016103b89190614422565b600060208284031215613a7357600080fd5b5035919050565b600060208284031215613a8c57600080fd5b81356001600160e01b031981168114610ca457600080fd5b6001600160a01b03811681146124bf57600080fd5b60008060408385031215613acc57600080fd5b8235613ad781613aa4565b946020939093013593505050565b60008060408385031215613af857600080fd5b50508035926020909101359150565b60008060408385031215613b1a57600080fd5b823591506020830135613b2c81613aa4565b809150509250929050565b600060208284031215613b4957600080fd5b8135610ca481613aa4565b60008060008060808587031215613b6a57600080fd5b5050823594602084013594506040840135936060013592509050565b6020808252825182820181905260009190848201906040850190845b81811015613bbe57835183529284019291840191600101613ba2565b50909695505050505050565b60008083601f840112613bdc57600080fd5b50813567ffffffffffffffff811115613bf457600080fd5b6020830191508360208260051b850101111561199157600080fd5b60008060208385031215613c2257600080fd5b823567ffffffffffffffff811115613c3957600080fd5b613c4585828601613bca565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015613bbe578351151583529284019291840191600101613c6d565b600080600060608486031215613ca057600080fd5b8335613cab81613aa4565b95602085013595506040909401359392505050565b60008060008060808587031215613cd657600080fd5b843593506020850135613ce881613aa4565b92506040850135613cf881613aa4565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715613d4157613d41613d08565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715613d7057613d70613d08565b604052919050565b600080828403610100811215613d8d57600080fd5b8335613d9881613aa4565b925060e0601f1982011215613dac57600080fd5b50613db5613d1e565b6020840135815260408401356020820152606084013560408201526080840135606082015260a0840135608082015260c084013560a082015260e084013560c0820152809150509250929050565b80151581146124bf57600080fd5b600080600060608486031215613e2657600080fd5b833592506020840135613e3881613aa4565b91506040840135613e4881613e03565b809150509250925092565b803560ff81168114613e6457600080fd5b919050565b600080600080600080600060e0888a031215613e8457600080fd5b8735613e8f81613aa4565b9650602088013595506040880135945060608801359350613eb260808901613e53565b925060a0880135915060c0880135905092959891949750929550565b600080600080600080600060e0888a031215613ee957600080fd5b87359650602088013595506040880135613f0281613aa4565b945060608801359350613eb260808901613e53565b600080600080600080600060e0888a031215613f3257600080fd5b8735613f3d81613aa4565b96506020880135613f4d81613aa4565b955060408801359450606088013593506080880135925060a0880135915060c0880135613f7981613aa4565b8091505092959891949750929550565b60008060408385031215613f9c57600080fd5b823591506020830135613b2c81613e03565b60005b83811015613fc9578181015183820152602001613fb1565b50506000910152565b60008151808452613fea816020860160208601613fae565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561405357603f19888603018452614041858351613fd2565b94509285019290850190600101614025565b5092979650505050505050565b60008060006060848603121561407557600080fd5b83359250602084013591506040840135613e4881613aa4565b600080604083850312156140a157600080fd5b505080516020909101519092909150565b6000602082840312156140c457600080fd5b5051919050565b6000806000606084860312156140e057600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561410b57600080fd5b8151610ca481613e03565b634e487b7160e01b600052603260045260246000fd5b828152604060208201526000613a2f6040830184613fd2565b60006020828403121561415757600080fd5b8151610ca481613aa4565b634e487b7160e01b600052601160045260246000fd5b60006001820161418a5761418a614162565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601790820152762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b604082015260600190565b6001600160a01b039390931683526020830191909152604082015260600190565b81810381811115610c1757610c17614162565b6000806040838503121561423e57600080fd5b825191506020830151613b2c81613e03565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6000808335601e198436030181126142a857600080fd5b83018035915067ffffffffffffffff8211156142c357600080fd5b60200191503681900382131561199157600080fd5b600080604083850312156142eb57600080fd5b82516142f681613e03565b6020840151909250613b2c81613e03565b6000602080838503121561431a57600080fd5b825167ffffffffffffffff8082111561433257600080fd5b818501915085601f83011261434657600080fd5b81518181111561435857614358613d08565b8060051b9150614369848301613d47565b818152918301840191848101908884111561438357600080fd5b938501935b838510156143a157845182529385019390850190614388565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516143e5816017850160208801613fae565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614416816028840160208801613fae565b01602801949350505050565b602081526000610ca46020830184613fd2565b634e487b7160e01b600052603160045260246000fd5b6000825161445d818460208701613fae565b9190910192915050565b8082028115828204841417610c1757610c17614162565b80820180821115610c1757610c17614162565b6000816144a0576144a0614162565b50600019019056fe97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122015e672c3dac79df513fce92c7836566daa082ac288fd5a925d2886ccad14190164736f6c63430008130033",
  "libraries": {
    "DepositManagementLogic": "0xbd104bc9eC0495ECEdE5257Cb2514b1cCA29AD9e"
  },
  "implementation": "0xFBE0017Ce3320781B403B44F6e513c4931F7Cdb8",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addDepositAmount(address,bytes32,uint256)": {
        "details": "Adds deposit amount.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "addOperator(address)": {
        "params": {
          "admin": "The address of the new admin"
        }
      },
      "calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_additionalFunds": "Additional funds for calculating the coverage",
          "_user": "User's address"
        },
        "returns": {
          "coverage": "The rate of collateral used",
          "isInsufficientDepositAmount": "The boolean if the lent amount in the selected currency is insufficient for the deposit amount or not"
        }
      },
      "calculateLiquidationFees(uint256)": {
        "params": {
          "_amount": "Liquidation amount"
        },
        "returns": {
          "liquidatorFee": "Liquidation fee amount received by liquidators",
          "protocolFee": "Liquidation fee amount received by protocol"
        }
      },
      "cleanUpUsedCurrencies(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "deposit(bytes32,uint256)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32"
        }
      },
      "depositFrom(address,bytes32,uint256)": {
        "details": "Deposits funds by the `from` into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_from": "Address of the user"
        }
      },
      "depositTo(bytes32,uint256,address)": {
        "details": "Deposits funds by the caller into collateral.",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_onBehalfOf": "The beneficiary of the supplied deposits"
        }
      },
      "depositWithPermitFrom(address,bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Deposits funds by the `from` into collateral with transfer approval of asset via permit function",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_deadline": "The deadline timestamp that the permit is valid",
          "_from": "Address of the user",
          "_permitR": "The R parameter of ERC712 permit sig",
          "_permitS": "The S parameter of ERC712 permit sig",
          "_permitV": "The V parameter of ERC712 permit sig"
        }
      },
      "depositWithPermitTo(bytes32,uint256,address,uint256,uint8,bytes32,bytes32)": {
        "details": "Deposits funds by the caller into collateral with transfer approval of asset via permit function",
        "params": {
          "_amount": "Amount of funds to deposit",
          "_ccy": "Currency name in bytes32",
          "_deadline": "The deadline timestamp that the permit is valid",
          "_onBehalfOf": "The beneficiary of the supplied deposits",
          "_permitR": "The R parameter of ERC712 permit sig",
          "_permitS": "The S parameter of ERC712 permit sig",
          "_permitV": "The V parameter of ERC712 permit sig"
        }
      },
      "executeForcedReset(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "getBorrowableAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "amount The borrowable amount"
        }
      },
      "getCollateralAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "amount": "The collateral amount"
        }
      },
      "getCollateralCurrencies()": {
        "returns": {
          "_0": "Array of the currency accepted as collateral"
        }
      },
      "getCollateralDetail(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalCollateral": "The total collateral amount in the base currency",
          "totalDeposit": "The total deposit amount in the base currency",
          "totalUsedCollateral": "The total used collateral amount in the base currency"
        }
      },
      "getCoverage(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The rate of collateral used"
        }
      },
      "getDepositAmount(address,bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The deposited amount"
        }
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "liquidationAmount": "The the amount to be liquidated"
        }
      },
      "getLiquidationConfiguration()": {
        "details": "Gets the liquidation configuration",
        "returns": {
          "fullLiquidationThresholdRate": "The full liquidation threshold rate",
          "liquidationProtocolFeeRate": "The liquidation fee received by liquidators",
          "liquidationThresholdRate": "The liquidation threshold rate",
          "liquidatorFeeRate": "The liquidation protocol fee received by protocol"
        }
      },
      "getLiquidationThresholdRate()": {
        "returns": {
          "rate": "The liquidation threshold rate"
        }
      },
      "getRevision()": {
        "returns": {
          "_0": "The revision number"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTokenAddress(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The token contract address"
        }
      },
      "getTotalCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "totalCollateralAmount": "The total collateral amount in the base currency"
        }
      },
      "getTotalDepositAmount(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The total deposited amount"
        }
      },
      "getTotalUnusedCollateralAmount(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The total amount of unused collateral"
        }
      },
      "getUsedCurrencies(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "The currency names in bytes32"
        }
      },
      "getWithdrawableCollateral(address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of the base currency that can be withdrawn"
        }
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        },
        "returns": {
          "_0": "Maximum amount of the selected currency that can be withdrawn"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_fullLiquidationThresholdRate": "The full liquidation threshold rate",
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators",
          "_nativeToken": "The address of wrapped token of native currency",
          "_owner": "The address of the contract owner",
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "isCollateral(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "isCollateral(bytes32[])": {
        "params": {
          "_ccys": "Currency name list in bytes32"
        },
        "returns": {
          "isCollateralCurrencies": "Array of the boolean if the currency has been registered or not"
        }
      },
      "isCovered(address,bytes32)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "isEnoughCollateral": "The boolean if the user has enough collateral or not",
          "isEnoughDepositInOrderCcy": "The boolean if the user has enough deposit in the order currency or not"
        }
      },
      "isRegisteredCurrency(bytes32)": {
        "params": {
          "_ccy": "Currency name in bytes32"
        },
        "returns": {
          "_0": "The boolean if the currency has been registered or not"
        }
      },
      "multicall(bytes[])": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Receives and executes a batch of function calls on this contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "registerCurrency(bytes32,address,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral.",
          "_tokenAddress": "Token contract address of the selected currency"
        }
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32",
          "_user": "User's address"
        }
      },
      "removeOperator(address)": {
        "params": {
          "admin": "The address of the admin to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.",
        "params": {
          "account": "The address of the account to revoke the role from",
          "role": "The role to be revoked"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "params": {
          "_amount": "Amount of funds to sent",
          "_ccy": "Currency name in bytes32",
          "_from": "Sender's address",
          "_to": "Receiver's address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrency(bytes32,bool)": {
        "params": {
          "_ccy": "Currency name in bytes32",
          "_isCollateral": "Boolean if the selected currency is acceptable as collateral."
        }
      },
      "updateLiquidationConfiguration(uint256,uint256,uint256,uint256)": {
        "details": "Update the liquidation configuration",
        "params": {
          "_liquidationProtocolFeeRate": "The liquidation fee rate received by protocol",
          "_liquidationThresholdRate": "The liquidation threshold rate",
          "_liquidatorFeeRate": "The liquidation fee rate received by liquidators"
        }
      },
      "withdraw(bytes32,uint256)": {
        "params": {
          "_amount": "Amount of funds to withdraw.",
          "_ccy": "Currency name in bytes32"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOperator(address)": {
        "notice": "Adds a new admin as Operator"
      },
      "calculateCoverage(address,(bytes32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "Calculates the collateral rate used when additional funds are had by the user."
      },
      "calculateLiquidationFees(uint256)": {
        "notice": "Gets the actual fee amounts calculated by rates."
      },
      "cleanUpUsedCurrencies(address,bytes32)": {
        "notice": "Clean up the used currencies of the user."
      },
      "executeForcedReset(address,bytes32)": {
        "notice": "Forces a reset of the user's deposit amount."
      },
      "getBorrowableAmount(address,bytes32)": {
        "notice": "Gets the borrowable amount in the selected currency."
      },
      "getCollateralAmount(address,bytes32)": {
        "notice": "Gets the total collateral amount of the selected currency."
      },
      "getCollateralCurrencies()": {
        "notice": "Gets the currencies accepted as collateral"
      },
      "getCollateralDetail(address)": {
        "notice": "Gets the collateral detail."
      },
      "getCoverage(address)": {
        "notice": "Gets the rate of collateral used."
      },
      "getDepositAmount(address,bytes32)": {
        "notice": "Gets the amount deposited in the user's collateral."
      },
      "getLiquidationAmount(address,bytes32,uint256)": {
        "notice": "Gets the amount to be liquidated."
      },
      "getLiquidationThresholdRate()": {
        "notice": "Gets the liquidation threshold rate."
      },
      "getRevision()": {
        "notice": "Gets the revision number of the contract"
      },
      "getTokenAddress(bytes32)": {
        "notice": "Gets the token contract address"
      },
      "getTotalCollateralAmount(address)": {
        "notice": "Gets the total collateral amount."
      },
      "getTotalDepositAmount(bytes32)": {
        "notice": "Gets the total amount deposited of the selected currency"
      },
      "getTotalUnusedCollateralAmount(address)": {
        "notice": "Gets the total amount of the unused collateral in the base currency"
      },
      "getUsedCurrencies(address)": {
        "notice": "Gets the currencies that the user used as collateral."
      },
      "getWithdrawableCollateral(address)": {
        "notice": "Gets the maximum amount of the base currency that can be withdrawn from user collateral."
      },
      "getWithdrawableCollateral(bytes32,address)": {
        "notice": "Gets the maximum amount of the selected currency that can be withdrawn from user collateral."
      },
      "initialize(address,address,uint256,uint256,uint256,uint256,address)": {
        "notice": "Initializes the contract."
      },
      "isCollateral(bytes32)": {
        "notice": "Gets if the currency is acceptable as collateral"
      },
      "isCollateral(bytes32[])": {
        "notice": "Gets if the currencies are acceptable as collateral"
      },
      "isCovered(address,bytes32)": {
        "notice": "Gets if the collateral is sufficient or not"
      },
      "isRegisteredCurrency(bytes32)": {
        "notice": "Gets if the currency has been registered"
      },
      "pause()": {
        "notice": "Pauses the token vault."
      },
      "registerCurrency(bytes32,address,bool)": {
        "notice": "Registers new currency and sets if it is acceptable as collateral."
      },
      "removeDepositAmount(address,bytes32,uint256)": {
        "notice": "Removes deposit amount."
      },
      "removeOperator(address)": {
        "notice": "Removes an admin as Operator"
      },
      "renounceRole(bytes32,address)": {
        "notice": "Revokes `role` from the calling account. This function is disabled by overriding it with a revert."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "transferFrom(bytes32,address,address,uint256)": {
        "notice": "Transfers the token from sender to receiver."
      },
      "unpause()": {
        "notice": "Unpauses the token vault."
      },
      "updateCurrency(bytes32,bool)": {
        "notice": "Updates the currency if it is acceptable as collateral."
      },
      "updateLiquidationConfiguration(uint256,uint256,uint256,uint256)": {
        "notice": "Triggers only be contract owner"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws funds by the caller from unused collateral."
      }
    },
    "notice": "Implements the management of the token in each currency for users. This contract manages the following data related to tokens. - Deposited token amount as the collateral - Parameters related to the liquidation   - Liquidation threshold rate   - Liquidation fee rate received by protocol   - Liquidation fee rate received by liquidators",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1618,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1621,
        "contract": "contracts/protocol/TokenVault.sol:TokenVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}