{
  "address": "0x5C38427F4D0FB34A1f5a0476fcE3dD5571641fc1",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLockedBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidResetAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "MissingAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "OnlyAcceptedContract",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PastMaturityBalanceExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSupplyNotZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserIsZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "orderBookId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "BalanceLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "orderBookId",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "BalanceUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "CacheUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "orderBookId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buildCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "decrease",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmount",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "executeForcedReset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "balance",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalBorrowingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "getTotalLendingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        }
      ],
      "name": "getTotalLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "hasBalanceAtPastMaturity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "increase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_resolver",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isResolverCached",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredContracts",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "contracts",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "reset",
      "outputs": [
        {
          "internalType": "int256",
          "name": "removedAmount",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "currentAmount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isAllRemoved",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "contract IAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_orderBookId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maturity",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbaff46b646277d3939ab910b9591a41466034451eadb6c8af35e318ce6f3c8e8",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0x5C38427F4D0FB34A1f5a0476fcE3dD5571641fc1",
    "transactionIndex": 1,
    "gasUsed": "1707829",
    "logsBloom": "0x
    "blockHash": "0x7922951e7d25f0fecda0e86e10d24de5453379e48e3160c4b0ceca0dca8482a4",
    "transactionHash": "0xbaff46b646277d3939ab910b9591a41466034451eadb6c8af35e318ce6f3c8e8",
    "logs": [],
    "blockNumber": 193374832,
    "cumulativeGasUsed": "1707829",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "899b8ff43ae18ac193e2ff6b34e4951b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLockedBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidResetAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissingAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"OnlyAcceptedContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PastMaturityBalanceExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyNotZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserIsZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"orderBookId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BalanceLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"orderBookId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BalanceUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"CacheUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"orderBookId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buildCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"decrease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"}],\"name\":\"executeForcedReset\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"executeForcedReset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"balance\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalBorrowingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"getTotalLendingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"}],\"name\":\"getTotalLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"hasBalanceAtPastMaturity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"increase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isResolverCached\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredContracts\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"contracts\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"removedAmount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"currentAmount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAllRemoved\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"contract IAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_orderBookId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maturity\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"decrease(uint8,address,uint256,uint256)\":{\"details\":\"Since the total supply can be determined by totaling only the amounts on one side of the order when the order is fulfilled, the total supply is incremented only when the executor of the original order is the taker.\",\"params\":{\"_amount\":\"The amount to add\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}},\"executeForcedReset(uint8,address)\":{\"params\":{\"_user\":\"User's address\"}},\"executeForcedReset(uint8,address,int256)\":{\"params\":{\"_amount\":\"The amount to reset\",\"_user\":\"User's address\"}},\"getBalance(uint8,address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"balance\":\"The user balance\",\"maturity\":\"The maturity of the market that the future value was added\"}},\"getRevision()\":{\"returns\":{\"_0\":\"The revision number\"}},\"getTotalBorrowingSupply(uint256)\":{\"details\":\"This function returns the total supply of only orders that have been added through the `increase` of `decrease` function.\",\"params\":{\"_maturity\":\"The maturity of the market\"}},\"getTotalLendingSupply(uint256)\":{\"details\":\"This function returns the total supply of only orders that have been added through the `increase` of `decrease` function.\",\"params\":{\"_maturity\":\"The maturity of the market\"}},\"getTotalLockedBalance(uint8)\":{\"params\":{\"_orderBookId\":\"The order book id\"},\"returns\":{\"_0\":\"The total locked balance\"}},\"hasBalanceAtPastMaturity(uint8,address,uint256)\":{\"params\":{\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"},\"returns\":{\"_0\":\"The boolean if the lending market is initialized or not\"}},\"increase(uint8,address,uint256,uint256)\":{\"details\":\"Since the total supply can be determined by totaling only the amounts on one side of the order when the order is fulfilled, the total supply is incremented only when the executor of the original order is the taker.\",\"params\":{\"_amount\":\"The amount to add\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}},\"initialize(address)\":{\"details\":\"Function is invoked by the proxy contract when the contract is added to the ProxyController.\",\"params\":{\"_resolver\":\"The address of the Address Resolver contract\"}},\"lock(uint8,address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to lock\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"},\"returns\":{\"lockedAmount\":\"The amount locked\"}},\"requiredContracts()\":{\"details\":\"The contract name list is in `./libraries/Contracts.sol`.\"},\"reset(uint8,address)\":{\"params\":{\"_user\":\"User's address\"},\"returns\":{\"currentAmount\":\"Current future value amount after update\",\"isAllRemoved\":\"The boolean if the all future value amount in the selected maturity is removed\",\"maturity\":\"Maturity of future value\",\"removedAmount\":\"Removed future value amount\"}},\"transferFrom(uint8,address,address,int256,uint256)\":{\"params\":{\"_amount\":\"Amount of funds to sent\",\"_maturity\":\"The maturity of the market\",\"_receiver\":\"Receiver's address\",\"_sender\":\"Sender's address\"}},\"unlock(uint8,address,uint256,uint256)\":{\"params\":{\"_amount\":\"The amount to lock\",\"_maturity\":\"The maturity of the market\",\"_user\":\"User's address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decrease(uint8,address,uint256,uint256)\":{\"notice\":\"Decreases amount for borrowing deals.\"},\"executeForcedReset(uint8,address)\":{\"notice\":\"Forces a reset of the user's future value.\"},\"executeForcedReset(uint8,address,int256)\":{\"notice\":\"Forces a reset of the user's future value.\"},\"getBalance(uint8,address)\":{\"notice\":\"Gets the user balance.\"},\"getRevision()\":{\"notice\":\"Gets the revision number of the contract\"},\"getTotalBorrowingSupply(uint256)\":{\"notice\":\"Gets the total supply of borrowing orders.\"},\"getTotalLendingSupply(uint256)\":{\"notice\":\"Gets the total supply of lending orders.\"},\"getTotalLockedBalance(uint8)\":{\"notice\":\"Gets the total locked balance.\"},\"hasBalanceAtPastMaturity(uint8,address,uint256)\":{\"notice\":\"Gets if the account has past maturity balance at the selected maturity.\"},\"increase(uint8,address,uint256,uint256)\":{\"notice\":\"Increases amount for lending deals.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract.\"},\"lock(uint8,address,uint256,uint256)\":{\"notice\":\"Locks user's balance.\"},\"requiredContracts()\":{\"notice\":\"Returns the contract names used in this contract.\"},\"reset(uint8,address)\":{\"notice\":\"Reset all amount if there is an amount in the past maturity.\"},\"transferFrom(uint8,address,address,int256,uint256)\":{\"notice\":\"Transfers the future value from sender to receiver.\"},\"unlock(uint8,address,uint256,uint256)\":{\"notice\":\"Unlocks user's balance.\"}},\"notice\":\"Implements the management of the future value as an amount for Lending positions in each currency.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/FutureValueVault.sol\":\"FutureValueVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/dependencies/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.4.0 (v0.8/interfaces/AggregatorV3Interface.sol)\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x4e6b3af251ee2ee848acb86147bb94d4a0845f65d2143545b7b6853297f81b82\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) ||\\n                (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(\\n            !_initializing && _initialized < version,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xb13e7a56a0af42137a3e04dccb39c6bd4233d5e5c324197af9d71c3f7af5359c\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44e8974f420f05be7bf27220ef8e694d803a281eb0824a2c0d8960d864780bdf\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/dependencies/openzeppelin/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/protocol/FutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n// dependencies\\nimport {SafeCast} from \\\"../dependencies/openzeppelin/utils/math/SafeCast.sol\\\";\\n// interfaces\\nimport {IFutureValueVault} from \\\"./interfaces/IFutureValueVault.sol\\\";\\n// libraries\\nimport {Contracts} from \\\"./libraries/Contracts.sol\\\";\\n// mixins\\nimport {MixinAddressResolver} from \\\"./mixins/MixinAddressResolver.sol\\\";\\n// types\\nimport {ProtocolTypes} from \\\"./types/ProtocolTypes.sol\\\";\\n// utils\\nimport {Proxyable} from \\\"./utils/Proxyable.sol\\\";\\n// storages\\nimport {FutureValueVaultStorage as Storage} from \\\"./storages/FutureValueVaultStorage.sol\\\";\\n\\n/**\\n * @notice Implements the management of the future value as an amount for Lending positions in each currency.\\n */\\ncontract FutureValueVault is IFutureValueVault, MixinAddressResolver, Proxyable {\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    /**\\n     * @notice Initializes the contract.\\n     * @dev Function is invoked by the proxy contract when the contract is added to the ProxyController.\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function initialize(address _resolver) external initializer onlyBeacon {\\n        registerAddressResolver(_resolver);\\n        buildCache();\\n    }\\n\\n    // @inheritdoc MixinAddressResolver\\n    function requiredContracts() public pure override returns (bytes32[] memory contracts) {\\n        contracts = new bytes32[](1);\\n        contracts[0] = Contracts.LENDING_MARKET_CONTROLLER;\\n    }\\n\\n    // @inheritdoc Proxyable\\n    function getRevision() external pure override returns (uint256) {\\n        return 0x2;\\n    }\\n\\n    /**\\n     * @notice Gets the total supply of lending orders.\\n     * @dev This function returns the total supply of only orders that have been added\\n     * through the `increase` of `decrease` function.\\n     * @param _maturity The maturity of the market\\n     */\\n    function getTotalLendingSupply(uint256 _maturity) external view override returns (uint256) {\\n        return Storage.slot().totalLendingSupplies[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the total supply of borrowing orders.\\n     * @dev This function returns the total supply of only orders that have been added\\n     * through the `increase` of `decrease` function.\\n     * @param _maturity The maturity of the market\\n     */\\n    function getTotalBorrowingSupply(uint256 _maturity) external view override returns (uint256) {\\n        return Storage.slot().totalBorrowingSupplies[_maturity];\\n    }\\n\\n    /**\\n     * @notice Gets the user balance.\\n     * @param _user User's address\\n     * @return balance The user balance\\n     * @return maturity The maturity of the market that the future value was added\\n     */\\n    function getBalance(\\n        uint8 _orderBookId,\\n        address _user\\n    ) public view override returns (int256 balance, uint256 maturity) {\\n        return (\\n            Storage.slot().balances[_orderBookId][_user],\\n            Storage.slot().balanceMaturities[_orderBookId][_user]\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the total locked balance.\\n     * @param _orderBookId The order book id\\n     * @return The total locked balance\\n     */\\n    function getTotalLockedBalance(uint8 _orderBookId) external view override returns (uint256) {\\n        return Storage.slot().totalLockedBalances[_orderBookId];\\n    }\\n\\n    /**\\n     * @notice Gets if the account has past maturity balance at the selected maturity.\\n     * @param _user User's address\\n     * @param _maturity The maturity of the market\\n     * @return The boolean if the lending market is initialized or not\\n     */\\n    function hasBalanceAtPastMaturity(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint256 _maturity\\n    ) public view override returns (bool) {\\n        if (Storage.slot().balanceMaturities[_orderBookId][_user] == _maturity) {\\n            return false;\\n        } else {\\n            return Storage.slot().balances[_orderBookId][_user] != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Increases amount for lending deals.\\n     * @dev Since the total supply can be determined by totaling only the amounts on one side of the order\\n     * when the order is fulfilled, the total supply is incremented only when the executor of the original order\\n     * is the taker.\\n     * @param _user User's address\\n     * @param _amount The amount to add\\n     * @param _maturity The maturity of the market\\n     */\\n    function increase(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) public override onlyLendingMarketController {\\n        if (_user == address(0)) revert UserIsZero();\\n        if (hasBalanceAtPastMaturity(_orderBookId, _user, _maturity))\\n            revert PastMaturityBalanceExists({user: _user});\\n\\n        int256 previousBalance = Storage.slot().balances[_orderBookId][_user];\\n        Storage.slot().balanceMaturities[_orderBookId][_user] = _maturity;\\n        Storage.slot().balances[_orderBookId][_user] += _amount.toInt256();\\n        emit Transfer(address(0), _user, _orderBookId, _maturity, _amount.toInt256());\\n\\n        _updateTotalSupply(_maturity, _amount.toInt256(), previousBalance);\\n    }\\n\\n    /**\\n     * @notice Decreases amount for borrowing deals.\\n     * @dev Since the total supply can be determined by totaling only the amounts on one side of the order\\n     * when the order is fulfilled, the total supply is incremented only when the executor of the original order\\n     * is the taker.\\n     * @param _user User's address\\n     * @param _amount The amount to add\\n     * @param _maturity The maturity of the market\\n     */\\n    function decrease(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) public override onlyLendingMarketController {\\n        if (_user == address(0)) revert UserIsZero();\\n        if (hasBalanceAtPastMaturity(_orderBookId, _user, _maturity))\\n            revert PastMaturityBalanceExists({user: _user});\\n\\n        int256 previousBalance = Storage.slot().balances[_orderBookId][_user];\\n        Storage.slot().balanceMaturities[_orderBookId][_user] = _maturity;\\n        Storage.slot().balances[_orderBookId][_user] -= _amount.toInt256();\\n        emit Transfer(address(0), _user, _orderBookId, _maturity, -(_amount.toInt256()));\\n\\n        _updateTotalSupply(_maturity, -_amount.toInt256(), previousBalance);\\n    }\\n\\n    /**\\n     * @notice Locks user's balance.\\n     * @param _user User's address\\n     * @param _amount The amount to lock\\n     * @param _maturity The maturity of the market\\n     * @return lockedAmount The amount locked\\n     */\\n    function lock(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) public override onlyLendingMarketController returns (uint256 lockedAmount) {\\n        int256 balance = Storage.slot().balances[_orderBookId][_user];\\n\\n        if (balance <= 0) revert InsufficientBalance();\\n\\n        lockedAmount = _amount == 0 ? balance.toUint256() : _amount;\\n\\n        if (balance.toUint256() < lockedAmount) revert InsufficientBalance();\\n\\n        Storage.slot().balances[_orderBookId][_user] -= lockedAmount.toInt256();\\n        Storage.slot().totalLockedBalances[_orderBookId] += lockedAmount;\\n\\n        emit BalanceLocked(_orderBookId, _maturity, _user, lockedAmount);\\n    }\\n\\n    /**\\n     * @notice Unlocks user's balance.\\n     * @param _user User's address\\n     * @param _amount The amount to lock\\n     * @param _maturity The maturity of the market\\n     */\\n    function unlock(\\n        uint8 _orderBookId,\\n        address _user,\\n        uint256 _amount,\\n        uint256 _maturity\\n    ) public override onlyLendingMarketController {\\n        if (_amount > Storage.slot().totalLockedBalances[_orderBookId]) {\\n            revert InsufficientLockedBalance();\\n        }\\n\\n        Storage.slot().totalLockedBalances[_orderBookId] -= _amount;\\n        Storage.slot().balanceMaturities[_orderBookId][_user] = _maturity;\\n        Storage.slot().balances[_orderBookId][_user] += _amount.toInt256();\\n\\n        emit BalanceUnlocked(_orderBookId, _maturity, _user, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfers the future value from sender to receiver.\\n     * @param _sender Sender's address\\n     * @param _receiver Receiver's address\\n     * @param _amount Amount of funds to sent\\n     * @param _maturity The maturity of the market\\n     */\\n    function transferFrom(\\n        uint8 _orderBookId,\\n        address _sender,\\n        address _receiver,\\n        int256 _amount,\\n        uint256 _maturity\\n    ) external override onlyLendingMarketController {\\n        if (hasBalanceAtPastMaturity(_orderBookId, _sender, _maturity))\\n            revert PastMaturityBalanceExists({user: _sender});\\n        if (hasBalanceAtPastMaturity(_orderBookId, _receiver, _maturity))\\n            revert PastMaturityBalanceExists({user: _receiver});\\n\\n        Storage.slot().balanceMaturities[_orderBookId][_receiver] = _maturity;\\n        Storage.slot().balances[_orderBookId][_sender] -= _amount;\\n        Storage.slot().balances[_orderBookId][_receiver] += _amount;\\n\\n        emit Transfer(_sender, _receiver, _orderBookId, _maturity, _amount);\\n    }\\n\\n    /**\\n     * @notice Reset all amount if there is an amount in the past maturity.\\n     * @param _user User's address\\n     * @return removedAmount Removed future value amount\\n     * @return currentAmount Current future value amount after update\\n     * @return maturity Maturity of future value\\n     * @return isAllRemoved The boolean if the all future value amount in the selected maturity is removed\\n     */\\n    function reset(\\n        uint8 _orderBookId,\\n        address _user\\n    )\\n        external\\n        override\\n        onlyLendingMarketController\\n        returns (int256 removedAmount, int256 currentAmount, uint256 maturity, bool isAllRemoved)\\n    {\\n        currentAmount = Storage.slot().balances[_orderBookId][_user];\\n        maturity = Storage.slot().balanceMaturities[_orderBookId][_user];\\n\\n        if (currentAmount != 0) {\\n            removedAmount = currentAmount;\\n\\n            isAllRemoved = false;\\n            if (removedAmount >= 0) {\\n                Storage.slot().removedLendingSupply[maturity] += removedAmount.toUint256();\\n            } else {\\n                Storage.slot().removedBorrowingSupply[maturity] += (-removedAmount).toUint256();\\n            }\\n\\n            Storage.slot().balances[_orderBookId][_user] = 0;\\n            currentAmount = 0;\\n\\n            emit Transfer(_user, address(0), _orderBookId, maturity, removedAmount);\\n        }\\n\\n        isAllRemoved =\\n            (Storage.slot().removedLendingSupply[maturity] ==\\n                Storage.slot().totalLendingSupplies[maturity]) &&\\n            (Storage.slot().removedBorrowingSupply[maturity] ==\\n                Storage.slot().totalBorrowingSupplies[maturity]);\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's future value.\\n     * @param _user User's address\\n     */\\n    function executeForcedReset(\\n        uint8 _orderBookId,\\n        address _user\\n    ) external override onlyLendingMarketController {\\n        int256 removedAmount = Storage.slot().balances[_orderBookId][_user];\\n\\n        if (removedAmount != 0) {\\n            Storage.slot().balances[_orderBookId][_user] = 0;\\n            uint256 maturity = Storage.slot().balanceMaturities[_orderBookId][_user];\\n\\n            emit Transfer(_user, address(0), _orderBookId, maturity, removedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Forces a reset of the user's future value.\\n     * @param _user User's address\\n     * @param _amount The amount to reset\\n     */\\n    function executeForcedReset(\\n        uint8 _orderBookId,\\n        address _user,\\n        int256 _amount\\n    ) external override onlyLendingMarketController returns (int256 removedAmount, int256 balance) {\\n        removedAmount = Storage.slot().balances[_orderBookId][_user];\\n\\n        if ((_amount > 0 && removedAmount < 0) || (_amount < 0 && removedAmount > 0)) {\\n            revert InvalidResetAmount();\\n        }\\n\\n        if ((_amount > 0 && _amount < removedAmount) || (_amount < 0 && _amount > removedAmount)) {\\n            removedAmount = _amount;\\n        }\\n\\n        if (removedAmount != 0) {\\n            Storage.slot().balances[_orderBookId][_user] -= removedAmount;\\n            uint256 maturity = Storage.slot().balanceMaturities[_orderBookId][_user];\\n\\n            emit Transfer(_user, address(0), _orderBookId, maturity, removedAmount);\\n        }\\n\\n        balance = Storage.slot().balances[_orderBookId][_user];\\n    }\\n\\n    function _updateTotalSupply(uint256 _maturity, int256 _amount, int256 _balance) private {\\n        if (_amount >= 0) {\\n            uint256 absAmount = _amount.toUint256();\\n            if (_balance >= 0) {\\n                Storage.slot().totalLendingSupplies[_maturity] += absAmount;\\n            } else {\\n                int256 diff = _amount + _balance;\\n                if (diff >= 0) {\\n                    Storage.slot().totalLendingSupplies[_maturity] += diff.toUint256();\\n                    Storage.slot().totalBorrowingSupplies[_maturity] -= (-_balance).toUint256();\\n                } else {\\n                    Storage.slot().totalBorrowingSupplies[_maturity] -= absAmount;\\n                }\\n            }\\n        } else {\\n            uint256 absAmount = (-_amount).toUint256();\\n            if (_balance <= 0) {\\n                Storage.slot().totalBorrowingSupplies[_maturity] += absAmount;\\n            } else {\\n                int256 diff = _amount + _balance;\\n                if (diff <= 0) {\\n                    Storage.slot().totalBorrowingSupplies[_maturity] += (-diff).toUint256();\\n                    Storage.slot().totalLendingSupplies[_maturity] -= _balance.toUint256();\\n                } else {\\n                    Storage.slot().totalLendingSupplies[_maturity] -= absAmount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21d78fdcb987cd54f3100825e75db48849dd578114b18038a7bbce59d06641ae\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IAddressResolver {\\n    error UnmatchedInputs();\\n\\n    event AddressImported(bytes32 name, address destination);\\n\\n    function getAddress(bytes32 name, string calldata reason) external view returns (address);\\n\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getAddresses() external view returns (address[] memory);\\n\\n    function getNames() external view returns (bytes32[] memory);\\n}\\n\",\"keccak256\":\"0x902589cadb08c09a44c5cdbe7ed8ba57a93f7e2700681177ef57c47c40e2e161\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IBeaconProxyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IBeaconProxyController {\\n    error NoBeaconProxyContract();\\n    error InvalidProxyContract();\\n\\n    event BeaconProxyUpdated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed newImplementationAddress,\\n        address oldImplementationAddress\\n    );\\n\\n    function getBeaconProxyAddress(bytes32 beaconName) external view returns (address);\\n\\n    function setFutureValueVaultImpl(address newImpl) external;\\n\\n    function setLendingMarketImpl(address newImpl) external;\\n\\n    function setZCTokenImpl(address newImpl) external;\\n\\n    function deployFutureValueVault() external returns (address futureValueVault);\\n\\n    function deployLendingMarket(\\n        bytes32 ccy,\\n        uint256 orderFeeRate,\\n        uint256 cbLimitRange\\n    ) external returns (address market);\\n\\n    function deployZCToken(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address asset,\\n        uint256 maturity\\n    ) external returns (address futureValueToken);\\n}\\n\",\"keccak256\":\"0xec921fdea2288f812ed78ec9439e53f6bf751a582719618fa8fc8cd88d0b6920\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {PriceFeed} from \\\"../storages/CurrencyControllerStorage.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ninterface ICurrencyController {\\n    error InvalidCurrency();\\n    error InvalidHaircut();\\n    error InvalidPriceFeed();\\n    error InvalidDecimals(address priceFeed, uint8 decimals);\\n    error InvalidPriceFeedInputs();\\n    error StalePriceFeed(\\n        address priceFeed,\\n        uint256 heartbeat,\\n        uint256 updatedAt,\\n        uint256 blockTimestamp\\n    );\\n\\n    event CurrencyAdded(bytes32 indexed ccy, uint256 haircut);\\n    event CurrencyRemoved(bytes32 indexed ccy);\\n\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n\\n    event PriceFeedUpdated(bytes32 ccy, uint256 decimals, address[] indexed priceFeeds);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convert(\\n        bytes32 _fromCcy,\\n        bytes32 _toCcy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amount\\n    ) external view returns (uint256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        int256 _amount\\n    ) external view returns (int256 amount);\\n\\n    function convertToBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256 _amountETH\\n    ) external view returns (uint256 amount);\\n\\n    function convertFromBaseCurrency(\\n        bytes32 _ccy,\\n        uint256[] calldata _amounts\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getDecimals(bytes32) external view returns (uint8);\\n\\n    function getCurrencies() external view returns (bytes32[] memory);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getPriceFeed(bytes32 _ccy) external view returns (PriceFeed memory);\\n\\n    function getLastPrice(bytes32 _ccy) external view returns (int256 price);\\n\\n    function getAggregatedLastPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function currencyExists(bytes32 _ccy) external view returns (bool);\\n\\n    function updatePriceFeed(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function addCurrency(\\n        bytes32 _ccy,\\n        uint8 _decimals,\\n        uint256 _haircut,\\n        address[] calldata _priceFeeds,\\n        uint256[] calldata _heartbeats\\n    ) external;\\n\\n    function updateHaircut(bytes32 _ccy, uint256 _haircut) external;\\n\\n    function removeCurrency(bytes32 _ccy) external;\\n}\\n\",\"keccak256\":\"0x2d1e477a53ca03307d2f2ec206028963e99ff4dcf1e719e3b59845f6acb3ee93\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IFutureValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IFutureValueVault {\\n    error UserIsZero();\\n    error PastMaturityBalanceExists(address user);\\n    error TotalSupplyNotZero();\\n    error InvalidResetAmount();\\n    error InsufficientBalance();\\n    error InsufficientLockedBalance();\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint8 orderBookId,\\n        uint256 maturity,\\n        int256 value\\n    );\\n    event BalanceLocked(\\n        uint8 indexed orderBookId,\\n        uint256 indexed maturity,\\n        address indexed user,\\n        uint256 value\\n    );\\n    event BalanceUnlocked(\\n        uint8 indexed orderBookId,\\n        uint256 indexed maturity,\\n        address indexed user,\\n        uint256 value\\n    );\\n\\n    function getTotalLendingSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(uint256 maturity) external view returns (uint256);\\n\\n    function getBalance(\\n        uint8 orderBookId,\\n        address user\\n    ) external view returns (int256 futureValue, uint256 maturity);\\n\\n    function getTotalLockedBalance(uint8 orderBookId) external view returns (uint256);\\n\\n    function hasBalanceAtPastMaturity(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (bool);\\n\\n    function increase(uint8 orderBookId, address user, uint256 amount, uint256 maturity) external;\\n\\n    function decrease(uint8 orderBookId, address user, uint256 amount, uint256 maturity) external;\\n\\n    function lock(\\n        uint8 orderBookId,\\n        address user,\\n        uint256 amount,\\n        uint256 maturity\\n    ) external returns (uint256 lockedAmount);\\n\\n    function unlock(uint8 orderBookId, address user, uint256 amount, uint256 maturity) external;\\n\\n    function transferFrom(\\n        uint8 orderBookId,\\n        address sender,\\n        address receiver,\\n        int256 amount,\\n        uint256 maturity\\n    ) external;\\n\\n    function reset(\\n        uint8 orderBookId,\\n        address user\\n    )\\n        external\\n        returns (int256 removedAmount, int256 currentAmount, uint256 maturity, bool isAllRemoved);\\n\\n    function executeForcedReset(uint8 orderBookId, address user) external;\\n\\n    function executeForcedReset(\\n        uint8 orderBookId,\\n        address user,\\n        int256 amount\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0xe275e6a1c9914aaacebc863217725268360b1ff0c69d675461902f039933c854\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IGenesisValueVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AutoRollLog} from \\\"../storages/GenesisValueVaultStorage.sol\\\";\\n\\ninterface IGenesisValueVault {\\n    error NoCompoundFactorExists(uint256 maturity);\\n    error CompoundFactorIsZero();\\n    error ResidualAmountIsNotZero();\\n    error UnitPriceIsZero();\\n    error InvalidMaturity();\\n    error InvalidAmount();\\n    error InvalidOrderFeeRate();\\n    error CurrencyAlreadyInitialized();\\n    error InitialCompoundFactorAlreadyFinalized();\\n    error AutoRollLogAlreadyUpdated(uint256 currentMaturity, uint256 nextMaturity);\\n    error InsufficientBalance();\\n    error InsufficientLockedBalance();\\n\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, int256 value);\\n    event AutoRollExecuted(\\n        bytes32 indexed ccy,\\n        uint256 lendingCompoundFactor,\\n        uint256 borrowingCompoundFactor,\\n        uint256 unitPrice,\\n        uint256 currentMaturity,\\n        uint256 previousMaturity\\n    );\\n    event BalanceLocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n    event BalanceUnlocked(bytes32 indexed ccy, address indexed user, uint256 value);\\n\\n    function isAutoRolled(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isInitialized(bytes32 ccy) external view returns (bool);\\n\\n    function decimals(bytes32 ccy) external view returns (uint8);\\n\\n    function getTotalLendingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getTotalBorrowingSupply(bytes32 ccy) external view returns (uint256);\\n\\n    function getBalance(bytes32 ccy, address user, uint256 maturity) external view returns (int256);\\n\\n    function getMaturityGenesisValue(bytes32 ccy, uint256 maturity) external view returns (int256);\\n\\n    function getCurrentMaturity(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowingCompoundFactor(bytes32 ccy) external view returns (uint256);\\n\\n    function getAutoRollLog(\\n        bytes32 ccy,\\n        uint256 maturity\\n    ) external view returns (AutoRollLog memory);\\n\\n    function getLatestAutoRollLog(bytes32 ccy) external view returns (AutoRollLog memory);\\n\\n    function getTotalLockedBalance(bytes32 ccy) external view returns (uint256);\\n\\n    function calculateFVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        uint256 destinationMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateGVFromFV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 futureValue\\n    ) external view returns (int256);\\n\\n    function calculateFVFromGV(\\n        bytes32 ccy,\\n        uint256 basisMaturity,\\n        int256 genesisValue\\n    ) external view returns (int256);\\n\\n    function getBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        address user,\\n        uint256 maturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function calculateBalanceFluctuationByAutoRolls(\\n        bytes32 ccy,\\n        int256 balance,\\n        uint256 fromMaturity,\\n        uint256 toMaturity\\n    ) external view returns (int256 fluctuation);\\n\\n    function initializeCurrencySetting(\\n        bytes32 ccy,\\n        uint8 decimals,\\n        uint256 compoundFactor,\\n        uint256 maturity\\n    ) external;\\n\\n    function updateInitialCompoundFactor(bytes32 ccy, uint256 unitPrice) external;\\n\\n    function updateDecimals(bytes32 _ccy, uint8 _decimals) external;\\n\\n    function executeAutoRoll(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 nextMaturity,\\n        uint256 unitPrice,\\n        uint256 orderFeeRate\\n    ) external;\\n\\n    function updateGenesisValueWithFutureValue(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity,\\n        int256 fvAmount\\n    ) external;\\n\\n    function updateGenesisValueWithResidualAmount(\\n        bytes32 ccy,\\n        address user,\\n        uint256 basisMaturity\\n    ) external;\\n\\n    function lock(\\n        bytes32 ccy,\\n        address user,\\n        uint256 amount\\n    ) external returns (uint256 lockedAmount);\\n\\n    function unlock(bytes32 ccy, address user, uint256 amount) external;\\n\\n    function transferFrom(bytes32 ccy, address sender, address receiver, int256 amount) external;\\n\\n    function cleanUpBalance(bytes32 ccy, address user, uint256 maturity) external;\\n\\n    function executeForcedReset(bytes32 _ccy, address _user) external;\\n\\n    function executeForcedReset(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user,\\n        int256 _amountInFV\\n    ) external returns (int256 removedAmount, int256 balance);\\n}\\n\",\"keccak256\":\"0xfd1673a34386b847d75edc51873437f19f71a01017cb730824959b2b2c85ed34\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ILendingMarketController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ZCTokenInfo, TerminationCurrencyCache} from \\\"../storages/LendingMarketControllerStorage.sol\\\";\\n\\ninterface ILendingMarketController {\\n    error InvalidMaturity();\\n    error InvalidCurrency();\\n    error MarketTerminated();\\n    error NotTerminated();\\n    error AlreadyInitialized();\\n\\n    struct AdditionalFunds {\\n        bytes32 ccy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 lentAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedTotalFunds {\\n        uint256 plusDepositAmountInAdditionalFundsCcy;\\n        uint256 minusDepositAmountInAdditionalFundsCcy;\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct CalculatedFunds {\\n        uint256 workingLendOrdersAmount;\\n        uint256 claimableAmount;\\n        uint256 collateralAmount;\\n        uint256 unallocatedCollateralAmount;\\n        uint256 lentAmount;\\n        uint256 workingBorrowOrdersAmount;\\n        uint256 debtAmount;\\n        uint256 borrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amount;\\n        uint256 unitPrice;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    struct GetOrderEstimationFromFVParams {\\n        bytes32 ccy;\\n        uint256 maturity;\\n        address user;\\n        ProtocolTypes.Side side;\\n        uint256 amountInFV;\\n        uint256 additionalDepositAmount;\\n        bool ignoreBorrowedAmount;\\n    }\\n\\n    function isValidMaturity(bytes32 _ccy, uint256 _maturity) external view returns (bool);\\n\\n    function isTerminated() external view returns (bool);\\n\\n    function isRedemptionRequired(address _user) external view returns (bool);\\n\\n    function getMarketBasePeriod() external view returns (uint256);\\n\\n    function getTerminationDate() external view returns (uint256);\\n\\n    function getTerminationCurrencyCache(\\n        bytes32 _ccy\\n    ) external view returns (TerminationCurrencyCache memory);\\n\\n    function getTerminationCollateralRatio(bytes32 _ccy) external view returns (uint256);\\n\\n    function getMinDebtUnitPrice(bytes32 _ccy) external view returns (uint256);\\n\\n    function getCurrentMinDebtUnitPrice(\\n        bytes32 _ccy,\\n        uint256 _maturity\\n    ) external view returns (uint256);\\n\\n    function getGenesisDate(bytes32 ccy) external view returns (uint256);\\n\\n    function getLendingMarket(bytes32 ccy) external view returns (address);\\n\\n    function getFutureValueVault(bytes32 ccy) external view returns (address);\\n\\n    function getOrderBookId(bytes32 _ccy, uint256 _maturity) external view returns (uint8);\\n\\n    function getPendingOrderAmount(bytes32 _ccy, uint256 _maturity) external view returns (uint256);\\n\\n    function getOrderEstimation(\\n        GetOrderEstimationParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 placedAmount,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getOrderEstimationFromFV(\\n        GetOrderEstimationFromFVParams calldata _params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 lastUnitPrice,\\n            uint256 filledAmount,\\n            uint256 filledAmountInFV,\\n            uint256 orderFeeInFV,\\n            uint256 coverage,\\n            bool isInsufficientDepositAmount\\n        );\\n\\n    function getMaturities(bytes32 ccy) external view returns (uint256[] memory);\\n\\n    function getOrderBookIds(bytes32 ccy) external view returns (uint8[] memory);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function getTotalPresentValue(bytes32 ccy, address user) external view returns (int256);\\n\\n    function getTotalPresentValueInBaseCurrency(\\n        address user\\n    ) external view returns (int256 totalPresentValue);\\n\\n    function getGenesisValue(\\n        bytes32 ccy,\\n        address user\\n    ) external view returns (int256 amount, int256 amountInPV, int256 amountInFV);\\n\\n    function getPosition(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        address _user\\n    ) external view returns (int256 presentValue, int256 futureValue);\\n\\n    function getZCToken(bytes32 ccy, uint256 maturity) external view returns (address);\\n\\n    function getZCTokenInfo(address zcToken) external view returns (ZCTokenInfo memory);\\n\\n    function getWithdrawableZCTokenAmount(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        address user\\n    ) external view returns (uint256 amount);\\n\\n    function calculateFunds(\\n        bytes32 ccy,\\n        address user,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedFunds memory funds);\\n\\n    function calculateTotalFundsInBaseCurrency(\\n        address user,\\n        AdditionalFunds calldata _additionalFunds,\\n        uint256 liquidationThresholdRate\\n    ) external view returns (CalculatedTotalFunds memory calculatedFunds);\\n\\n    function isInitializedLendingMarket(bytes32 ccy) external view returns (bool);\\n\\n    function initializeLendingMarket(\\n        bytes32 ccy,\\n        uint256 genesisDate,\\n        uint256 compoundFactor,\\n        uint256 orderFeeRate,\\n        uint256 circuitBreakerLimitRange,\\n        uint256 minDebtUnitPrice\\n    ) external;\\n\\n    function createOrderBook(bytes32 ccy, uint256 openingDate, uint256 preOpeningDate) external;\\n\\n    function executeOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecuteOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (bool);\\n\\n    function executePreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external returns (bool);\\n\\n    function depositAndExecutesPreOrder(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        ProtocolTypes.Side side,\\n        uint256 amount,\\n        uint256 unitPrice\\n    ) external payable returns (bool);\\n\\n    function depositWithPermitAndExecutePreOrder(\\n        bytes32 _ccy,\\n        uint256 _maturity,\\n        ProtocolTypes.Side _side,\\n        uint256 _amount,\\n        uint256 _unitPrice,\\n        uint256 _deadline,\\n        uint8 _permitV,\\n        bytes32 _permitR,\\n        bytes32 _permitS\\n    ) external returns (bool);\\n\\n    function unwindPosition(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function unwindPositionWithCap(\\n        bytes32 ccy,\\n        uint256 maturity,\\n        uint256 maxFutureValue\\n    ) external returns (uint256 filledAmount, uint256 filledAmountInFV, uint256 feeInFV);\\n\\n    function executeItayoseCall(bytes32 ccy, uint256 maturity) external returns (bool);\\n\\n    function executeRedemption(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeRepayment(bytes32 _ccy, uint256 _maturity) external returns (bool);\\n\\n    function executeEmergencySettlement() external returns (bool);\\n\\n    function executeLiquidationCall(\\n        bytes32 collateralCcy,\\n        bytes32 debtCcy,\\n        uint256 debtMaturity,\\n        address user\\n    ) external returns (bool);\\n\\n    function executeForcedRepayment(\\n        bytes32 _collateralCcy,\\n        bytes32 _debtCcy,\\n        uint256 _debtMaturity,\\n        address _user\\n    ) external returns (bool);\\n\\n    function cancelOrder(bytes32 ccy, uint256 maturity, uint48 orderId) external returns (bool);\\n\\n    function rotateOrderBooks(bytes32 ccy) external;\\n\\n    function executeEmergencyTermination() external;\\n\\n    function pauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function unpauseLendingMarket(bytes32 ccy) external returns (bool);\\n\\n    function cleanUpAllFunds(address user) external returns (bool);\\n\\n    function cleanUpFunds(bytes32 ccy, address user) external returns (uint256 activeOrderCount);\\n\\n    function updateMinDebtUnitPrice(bytes32 _ccy, uint256 _minDebtUnitPrice) external;\\n\\n    function withdrawZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n\\n    function depositZCToken(bytes32 _ccy, uint256 _maturity, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x2aff4c396804459d8ede0dd903b3733db3b6ec39bbccb8716a8488b78aa215cf\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/IReserveFund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\ninterface IReserveFund {\\n    event Pause(address account);\\n    event Unpause(address account);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf201bba61d7527343057038ab254ba2e9b70e355ccfb71143f96068727bece48\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/interfaces/ITokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {ProtocolTypes} from \\\"../types/ProtocolTypes.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\n\\ninterface ITokenVault {\\n    error UnregisteredCurrency();\\n    error InvalidCurrency();\\n    error InvalidToken();\\n    error InvalidAmount(bytes32 ccy, uint256 amount, uint256 msgValue);\\n    error AmountIsZero();\\n    error CallerNotBaseCurrency(address caller);\\n    error MarketTerminated();\\n    error RedemptionIsRequired();\\n\\n    event Deposit(address indexed user, bytes32 ccy, uint256 amount, address caller);\\n    event Withdraw(address indexed user, bytes32 ccy, uint256 amount);\\n    event Transfer(bytes32 indexed ccy, address indexed from, address indexed to, uint256 amount);\\n    event CurrencyRegistered(bytes32 ccy, address tokenAddress, bool isCollateral);\\n    event CurrencyUpdated(bytes32 ccy, bool isCollateral);\\n\\n    function isCovered(\\n        address user,\\n        bytes32 ccy\\n    ) external view returns (bool isEnoughCollateral, bool isEnoughDepositInOrderCcy);\\n\\n    function isCollateral(bytes32 ccy) external view returns (bool);\\n\\n    function isCollateral(bytes32[] calldata ccys) external view returns (bool[] memory);\\n\\n    function isRegisteredCurrency(bytes32 ccy) external view returns (bool);\\n\\n    function getTokenAddress(bytes32 ccy) external view returns (address);\\n\\n    function getCollateralCurrencies() external view returns (bytes32[] memory);\\n\\n    function getWithdrawableCollateral(address user) external view returns (uint256);\\n\\n    function getWithdrawableCollateral(bytes32 ccy, address user) external view returns (uint256);\\n\\n    function getCoverage(address user) external view returns (uint256);\\n\\n    function getTotalUnusedCollateralAmount(address user) external view returns (uint256);\\n\\n    function getTotalCollateralAmount(address user) external view returns (uint256);\\n\\n    function getCollateralDetail(\\n        address user\\n    )\\n        external\\n        view\\n        returns (uint256 totalCollateral, uint256 totalUsedCollateral, uint256 totalDeposit);\\n\\n    function getCollateralAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getBorrowableAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getLiquidationAmount(\\n        address user,\\n        bytes32 liquidationCcy,\\n        uint256 liquidationAmountMaximum\\n    ) external view returns (uint256 liquidationAmount, uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function getTotalDepositAmount(bytes32 ccy) external view returns (uint256);\\n\\n    function getDepositAmount(address user, bytes32 ccy) external view returns (uint256);\\n\\n    function getUsedCurrencies(address user) external view returns (bytes32[] memory);\\n\\n    function calculateCoverage(\\n        address user,\\n        ILendingMarketController.AdditionalFunds memory funds\\n    ) external view returns (uint256 coverage, bool isInsufficientDepositAmount);\\n\\n    function calculateLiquidationFees(\\n        uint256 liquidationAmount\\n    ) external view returns (uint256 protocolFee, uint256 liquidatorFee);\\n\\n    function registerCurrency(bytes32 ccy, address tokenAddress, bool isCollateral) external;\\n\\n    function updateCurrency(bytes32 ccy, bool isCollateral) external;\\n\\n    function deposit(bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositTo(bytes32 ccy, uint256 amount, address onBehalfOf) external payable;\\n\\n    function depositFrom(address user, bytes32 ccy, uint256 amount) external payable;\\n\\n    function depositWithPermitTo(\\n        bytes32 ccy,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function depositWithPermitFrom(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    function withdraw(bytes32 ccy, uint256 amount) external;\\n\\n    function addDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function removeDepositAmount(address user, bytes32 ccy, uint256 amount) external;\\n\\n    function cleanUpUsedCurrencies(address user, bytes32 ccy) external;\\n\\n    function executeForcedReset(address user, bytes32 ccy) external returns (uint256 removedAmount);\\n\\n    function transferFrom(\\n        bytes32 ccy,\\n        address sender,\\n        address receiver,\\n        uint256 amount\\n    ) external returns (uint256 untransferredAmount);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function getLiquidationThresholdRate() external view returns (uint256 rate);\\n}\\n\",\"keccak256\":\"0x0d46845175ea03d23c7c2b614483e8c8d26f54f817666ee5e40136737dea490d\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/AddressResolverLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {Contracts} from \\\"../libraries/Contracts.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\nlibrary AddressResolverLib {\\n    error MissingAddress(string name);\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        address _foundAddress = Storage.slot().addressCache[name];\\n        if (_foundAddress == address(0)) revert MissingAddress(string(abi.encodePacked(name)));\\n        return _foundAddress;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return IBeaconProxyController(getAddress(Contracts.BEACON_PROXY_CONTROLLER));\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return ICurrencyController(getAddress(Contracts.CURRENCY_CONTROLLER));\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return IGenesisValueVault(getAddress(Contracts.GENESIS_VALUE_VAULT));\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return ILendingMarketController(getAddress(Contracts.LENDING_MARKET_CONTROLLER));\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return IReserveFund(getAddress(Contracts.RESERVE_FUND));\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return ITokenVault(getAddress(Contracts.TOKEN_VAULT));\\n    }\\n}\\n\",\"keccak256\":\"0x5cfce5841b4784484d127b5292c3ca0caa167257522e358570d5955656b7a71f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/libraries/Contracts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary Contracts {\\n    bytes32 internal constant BEACON_PROXY_CONTROLLER = \\\"BeaconProxyController\\\";\\n    bytes32 internal constant CURRENCY_CONTROLLER = \\\"CurrencyController\\\";\\n    bytes32 internal constant GENESIS_VALUE_VAULT = \\\"GenesisValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET_CONTROLLER = \\\"LendingMarketController\\\";\\n    bytes32 internal constant RESERVE_FUND = \\\"ReserveFund\\\";\\n    bytes32 internal constant TOKEN_VAULT = \\\"TokenVault\\\";\\n}\\n\\nlibrary BeaconContracts {\\n    bytes32 internal constant FUTURE_VALUE_VAULT = \\\"FutureValueVault\\\";\\n    bytes32 internal constant LENDING_MARKET = \\\"LendingMarket\\\";\\n    bytes32 internal constant ZC_TOKEN = \\\"ZCToken\\\";\\n}\\n\",\"keccak256\":\"0x0e5ed5826808f2caca98c73eb744d0c5774392b9451cf468652938721d210d7c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/mixins/MixinAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {AddressResolverLib} from \\\"../libraries/AddressResolverLib.sol\\\";\\nimport {IAddressResolver} from \\\"../interfaces/IAddressResolver.sol\\\";\\nimport {IBeaconProxyController} from \\\"../interfaces/IBeaconProxyController.sol\\\";\\nimport {ICurrencyController} from \\\"../interfaces/ICurrencyController.sol\\\";\\nimport {IGenesisValueVault} from \\\"../interfaces/IGenesisValueVault.sol\\\";\\nimport {ILendingMarketController} from \\\"../interfaces/ILendingMarketController.sol\\\";\\nimport {IReserveFund} from \\\"../interfaces/IReserveFund.sol\\\";\\nimport {ITokenVault} from \\\"../interfaces/ITokenVault.sol\\\";\\nimport {MixinAddressResolverStorage as Storage} from \\\"../storages/mixins/MixinAddressResolverStorage.sol\\\";\\n\\ncontract MixinAddressResolver {\\n    event CacheUpdated(bytes32 name, address destination);\\n\\n    error OnlyAcceptedContract(string name);\\n    error ResolverAlreadyRegistered();\\n\\n    modifier onlyLendingMarketController() {\\n        if (msg.sender != address(AddressResolverLib.lendingMarketController()))\\n            revert OnlyAcceptedContract(\\\"LendingMarketController\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the contract names used in this contract.\\n     * @dev The contract name list is in `./libraries/Contracts.sol`.\\n     */\\n    function requiredContracts() public pure virtual returns (bytes32[] memory contracts) {}\\n\\n    function buildCache() public {\\n        // The resolver must call this function whenever it updates its state\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // Note: can only be invoked once the resolver has all the targets needed added\\n            address destination = Storage.slot().resolver.getAddress(\\n                name,\\n                string(abi.encodePacked(\\\"Resolver missing target: \\\", name))\\n            );\\n            Storage.slot().addressCache[name] = destination;\\n            emit CacheUpdated(name, destination);\\n        }\\n    }\\n\\n    function isResolverCached() external view returns (bool) {\\n        bytes32[] memory contractNames = requiredContracts();\\n        for (uint256 i; i < contractNames.length; i++) {\\n            bytes32 name = contractNames[i];\\n            // false if our cache is invalid or if the resolver doesn't have the required address\\n            if (\\n                Storage.slot().resolver.getAddress(name) != Storage.slot().addressCache[name] ||\\n                Storage.slot().addressCache[name] == address(0)\\n            ) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Register the Address Resolver contract\\n     * @param _resolver The address of the Address Resolver contract\\n     */\\n    function registerAddressResolver(address _resolver) internal {\\n        if (address(Storage.slot().resolver) != address(0)) revert ResolverAlreadyRegistered();\\n        Storage.slot().resolver = IAddressResolver(_resolver);\\n    }\\n\\n    function getAddress(bytes32 name) internal view returns (address) {\\n        return AddressResolverLib.getAddress(name);\\n    }\\n\\n    function resolver() public view returns (IAddressResolver) {\\n        return Storage.slot().resolver;\\n    }\\n\\n    function beaconProxyController() internal view returns (IBeaconProxyController) {\\n        return AddressResolverLib.beaconProxyController();\\n    }\\n\\n    function currencyController() internal view returns (ICurrencyController) {\\n        return AddressResolverLib.currencyController();\\n    }\\n\\n    function genesisValueVault() internal view returns (IGenesisValueVault) {\\n        return AddressResolverLib.genesisValueVault();\\n    }\\n\\n    function reserveFund() internal view returns (IReserveFund) {\\n        return AddressResolverLib.reserveFund();\\n    }\\n\\n    function lendingMarketController() internal view returns (ILendingMarketController) {\\n        return AddressResolverLib.lendingMarketController();\\n    }\\n\\n    function tokenVault() internal view returns (ITokenVault) {\\n        return AddressResolverLib.tokenVault();\\n    }\\n}\\n\",\"keccak256\":\"0xd2f09d4b47a54d196ce23a9df1ece821097a9dba7933bbc7c1c05c05e33a660e\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/CurrencyControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct PriceFeed {\\n    AggregatorV3Interface[] instances;\\n    uint256[] heartbeats;\\n}\\n\\nlibrary CurrencyControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.currencyController\\\")) - 1);\\n\\n    struct Storage {\\n        // Protocol currencies\\n        EnumerableSet.Bytes32Set currencies;\\n        mapping(bytes32 ccy => uint256 haircut) haircuts;\\n        // Total cached decimals of the price feeds\\n        mapping(bytes32 ccy => uint8 decimals) decimalsCaches;\\n        mapping(bytes32 ccy => PriceFeed priceFeed) priceFeeds;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5485fa8fc79ac418525aed23300dd0111ecb5403121104ad6bb09d196c8e82f5\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/FutureValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nlibrary FutureValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.futureValueVault\\\")) - 1);\\n\\n    struct Storage {\\n        // Mapping from user to balances per order book id\\n        mapping(uint8 orderBookId => mapping(address user => int256 balance)) balances;\\n        // Maturity when the user receives the balance on the target order book\\n        mapping(uint8 orderBookId => mapping(address user => uint256 maturity)) balanceMaturities;\\n        // Total lending amount supplied per maturity\\n        mapping(uint256 maturity => uint256 amount) totalLendingSupplies;\\n        // Total borrowing amount supplied per maturity\\n        mapping(uint256 maturity => uint256 amount) totalBorrowingSupplies;\\n        // Total lending amount removed per maturity\\n        mapping(uint256 maturity => uint256 amount) removedLendingSupply;\\n        // Total borrowing amount removed per maturity\\n        mapping(uint256 maturity => uint256 amount) removedBorrowingSupply;\\n        // Mapping from user to tokenized balances per order book id\\n        // NOTE: This mapping data doesn't use maturity because this field was added after contract upgrades.\\n        mapping(uint8 orderBookId => uint256 balance) totalLockedBalances;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ae813e9692b5969b474637c193b32c7679f4ad38b73fea7f0b17eeb93318f8c\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/GenesisValueVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nstruct MaturityUnitPrice {\\n    uint256 unitPrice;\\n    uint256 compoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nstruct AutoRollLog {\\n    uint256 unitPrice;\\n    uint256 lendingCompoundFactor;\\n    uint256 borrowingCompoundFactor;\\n    uint256 next;\\n    uint256 prev;\\n}\\n\\nlibrary GenesisValueVaultStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.genesisValueVault\\\")) - 1);\\n\\n    struct Storage {\\n        mapping(bytes32 ccy => bool isInitialized) isInitialized;\\n        mapping(bytes32 ccy => uint256 compoundFactor) initialCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) lendingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 compoundFactor) borrowingCompoundFactors;\\n        mapping(bytes32 ccy => uint256 maturity) currentMaturity;\\n        mapping(bytes32 ccy => uint8 decimals) decimals;\\n        mapping(bytes32 ccy => mapping(address user => int256 balance)) balances;\\n        mapping(bytes32 ccy => uint256 amount) totalLendingSupplies;\\n        mapping(bytes32 ccy => uint256 amount) totalBorrowingSupplies;\\n        // Total amount supplied per maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => int256 balance)) maturityBalances;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => AutoRollLog log)) autoRollLogs;\\n        // Maturity when the user receives the balance on the target currency\\n        mapping(bytes32 ccy => mapping(address user => uint256 maturity)) userMaturities;\\n        mapping(bytes32 ccy => uint256 balance) totalLockedBalances;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xda77d523b56fbba23ad00d3583a83a829bd715c710f197ba62712fb60ee1dac2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/LendingMarketControllerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\nstruct ObservationPeriodLog {\\n    uint256 totalAmount;\\n    uint256 totalFutureValue;\\n}\\n\\nstruct TerminationCurrencyCache {\\n    int256 price;\\n    uint8 decimals;\\n}\\n\\nstruct ZCTokenInfo {\\n    bytes32 ccy;\\n    uint256 maturity;\\n}\\n\\nlibrary LendingMarketControllerStorage {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.lendingMarketController\\\")) - 1);\\n\\n    struct Storage {\\n        uint256 marketBasePeriod;\\n        uint256 terminationDate;\\n        mapping(bytes32 ccy => TerminationCurrencyCache currency) terminationCurrencyCaches;\\n        mapping(bytes32 ccy => uint256 ratio) terminationCollateralRatios;\\n        mapping(bytes32 ccy => uint8[] orderBookIds) orderBookIdLists;\\n        mapping(bytes32 ccy => address lendingMarket) lendingMarkets;\\n        mapping(bytes32 ccy => address futureValueVault) futureValueVaults;\\n        mapping(bytes32 ccy => uint256 unitPrice) minDebtUnitPrices;\\n        mapping(bytes32 ccy => uint256 genesisDate) genesisDates;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint256 amount)) pendingOrderAmounts;\\n        // Order book id history to get order book id from maturity\\n        mapping(bytes32 ccy => mapping(uint256 maturity => uint8 orderBookIds)) maturityOrderBookIds;\\n        // List of maturity that the user has open orders or positions\\n        mapping(bytes32 ccy => mapping(address user => EnumerableSet.UintSet maturities)) usedMaturities;\\n        // Observation period logs that is used for auto-rolls\\n        mapping(bytes32 ccy => mapping(uint256 maturity => ObservationPeriodLog log)) observationPeriodLogs;\\n        // List of currency that the user has open orders or positions\\n        mapping(address user => EnumerableSet.Bytes32Set currency) usedCurrencies;\\n        mapping(address user => bool isRedeemed) isRedeemed;\\n        mapping(bytes32 ccy => mapping(uint256 maturity => address token)) zcTokens;\\n        mapping(address token => ZCTokenInfo) zcTokenInfo;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8811a19e2f51e3fc813292c1ff80d2f24e7951c3c377da84c5f005a8197b07f\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/storages/mixins/MixinAddressResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport {IAddressResolver} from \\\"../../interfaces/IAddressResolver.sol\\\";\\n\\nlibrary MixinAddressResolverStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        bytes32(uint256(keccak256(\\\"sf.storage.mixinAddressResolver\\\")) - 1);\\n\\n    struct Storage {\\n        IAddressResolver resolver;\\n        mapping(bytes32 contractName => address contractAddress) addressCache;\\n    }\\n\\n    function slot() internal pure returns (Storage storage r) {\\n        bytes32 _slot = STORAGE_SLOT;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := _slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5663ed356830b742d6f13379afdd7d041ae71e13ad2ea64d8d63ca9e6ef8ab75\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/types/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\nlibrary ProtocolTypes {\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n}\\n\",\"keccak256\":\"0x409169980b48b1bd32af609ac7b90f5c29e064cbec3d83d81767d72192ba07a2\",\"license\":\"BUSL-1.1\"},\"contracts/protocol/utils/Proxyable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../../dependencies/openzeppelin/utils/StorageSlot.sol\\\";\\nimport \\\"../../dependencies/openzeppelin/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Proxyable is Initializable {\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n    bytes32 internal constant _BEACON_SLOT =\\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    modifier onlyProxy() {\\n        require(_getImplementation() != address(0), \\\"Must be called from proxy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyBeacon() {\\n        require(_getBeacon() != address(0), \\\"Must be called from beacon contract\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Gets the revision number of the contract\\n     * @return The revision number\\n     */\\n    function getRevision() external pure virtual returns (uint256) {\\n        return 0x1;\\n    }\\n\\n    function _getImplementation() private view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n}\\n\",\"keccak256\":\"0x9a8871621917fe5a0c7175217c5504dab4f935612dff0dadaff62c2d4da87412\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611ded806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806362354cde116100ad578063be9fd21c11610071578063be9fd21c14610275578063c4d66de814610288578063c7e035bc1461029b578063d3bcc4a8146102ae578063dc6eead6146102c157600080fd5b806362354cde146101f457806362f9eb6b146102075780637947a29b1461021a578063824c88621461022d578063870febf01461026257600080fd5b806329985e5a116100f457806329985e5a146101975780632af64bd3146101a15780632cdbf438146101b95780633d03b9da146101cc5780634bb77aed146101e157600080fd5b806304f3bcec146101265780631316529d1461014b57806317e2d96a1461015c578063246452541461016f575b600080fd5b61012e6102d4565b6040516001600160a01b0390911681526020015b60405180910390f35b60025b604051908152602001610142565b61014e61016a366004611a23565b6102ed565b61018261017d366004611a6a565b61030b565b60408051928352602083019190915201610142565b61019f610379565b005b6101a96104f6565b6040519015158152602001610142565b61014e6101c7366004611aa1565b610628565b6101d46107d3565b6040516101429190611ae5565b61014e6101ef366004611b29565b610832565b61019f610202366004611aa1565b610858565b61019f610215366004611aa1565b6109fc565b61019f610228366004611b44565b610b7b565b61024061023b366004611a6a565b610d1e565b6040805194855260208501939093529183015215156060820152608001610142565b61014e610270366004611a23565b610f3e565b61019f610283366004611aa1565b610f5c565b61019f610296366004611b9d565b611105565b6101826102a9366004611bba565b61128b565b61019f6102bc366004611a6a565b611453565b6101a96102cf366004611bba565b611561565b60006102de6115dc565b546001600160a01b0316919050565b60006102f7611610565b600092835260020160205250604090205490565b600080610316611610565b60ff85166000908152602091825260408082206001600160a01b03871683529092522054610342611610565b60ff86166000908152600191909101602090815260408083206001600160a01b038816845290915290205490925090509250929050565b60006103836107d3565b905060005b81518110156104f25760008282815181106103a5576103a5611bf9565b6020026020010151905060006103b96115dc565b54604080517f5265736f6c766572206d697373696e67207461726765743a200000000000000060208201526039808201869052825180830390910181526059820192839052636795dbcd60e01b9092526001600160a01b0390921691636795dbcd9161042a91869190605d01611c55565b602060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190611c76565b9050806104766115dc565b6000848152600191909101602090815260409182902080546001600160a01b0319166001600160a01b039485161790558151858152928416908301527f88a93678a3692f6789d9546fc621bf7234b101ddb7d4fe479455112831b8aa68910160405180910390a1505080806104ea90611ca9565b915050610388565b5050565b6000806105016107d3565b905060005b815181101561061f57600082828151811061052357610523611bf9565b602002602001015190506105356115dc565b600082815260019190910160205260409020546001600160a01b03166105596115dc565b546040516321f8a72160e01b8152600481018490526001600160a01b03909116906321f8a72190602401602060405180830381865afa1580156105a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c49190611c76565b6001600160a01b03161415806105fd575060006105df6115dc565b600083815260019190910160205260409020546001600160a01b0316145b1561060c576000935050505090565b508061061781611ca9565b915050610506565b50600191505090565b600061063261163e565b6001600160a01b0316336001600160a01b03161461066c57604051637b3f42c160e01b815260040161066390611cc2565b60405180910390fd5b6000610676611610565b60ff87166000908152602091825260408082206001600160a01b038916835290925290812054915081136106bd57604051631e9acf1760e31b815260040160405180910390fd5b83156106c957836106d2565b6106d281611668565b9150816106de82611668565b10156106fd57604051631e9acf1760e31b815260040160405180910390fd5b610706826116be565b61070e611610565b60ff88166000908152602091825260408082206001600160a01b038a1683529092529081208054909190610743908490611cf3565b90915550829050610752611610565b60060160008860ff1660ff168152602001908152602001600020600082825461077b9190611d1a565b92505081905550846001600160a01b0316838760ff167fe4f8170c280d1e1112e4a03014f2f1f01a6e82ea83ea6debf9cfee8ad883cdcc856040516107c291815260200190565b60405180910390a450949350505050565b60408051600180825281830190925260609160208083019080368337019050509050762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b8160008151811061082357610823611bf9565b60200260200101818152505090565b600061083c611610565b60ff909216600090815260069290920160205250604090205490565b61086061163e565b6001600160a01b0316336001600160a01b03161461089157604051637b3f42c160e01b815260040161066390611cc2565b6001600160a01b0383166108b857604051630b328ad960e31b815260040160405180910390fd5b6108c3848483611561565b156108eb5760405162c34ff560e61b81526001600160a01b0384166004820152602401610663565b60006108f5611610565b60ff86166000908152602091825260408082206001600160a01b03881683529092522054905081610924611610565b60ff87166000908152600191909101602090815260408083206001600160a01b0389168452909152902055610958836116be565b610960611610565b60ff87166000908152602091825260408082206001600160a01b03891683529092529081208054909190610995908490611d2d565b90915550506001600160a01b0384166000600080516020611d9883398151915287856109c0886116be565b6040805160ff909416845260208401929092529082015260600160405180910390a36109f5826109ef856116be565b83611728565b5050505050565b610a0461163e565b6001600160a01b0316336001600160a01b031614610a3557604051637b3f42c160e01b815260040161066390611cc2565b610a3d611610565b60ff851660009081526006919091016020526040902054821115610a745760405163b646ec7b60e01b815260040160405180910390fd5b81610a7d611610565b60060160008660ff1660ff1681526020019081526020016000206000828254610aa69190611d55565b90915550819050610ab5611610565b60ff86166000908152600191909101602090815260408083206001600160a01b0388168452909152902055610ae9826116be565b610af1611610565b60ff86166000908152602091825260408082206001600160a01b03881683529092529081208054909190610b26908490611d2d565b92505081905550826001600160a01b0316818560ff167f0b44638c1f31841e7aae191ee3fdd8f05b3df4e10aca673a17688aaac656aadb85604051610b6d91815260200190565b60405180910390a450505050565b610b8361163e565b6001600160a01b0316336001600160a01b031614610bb457604051637b3f42c160e01b815260040161066390611cc2565b610bbf858583611561565b15610be75760405162c34ff560e61b81526001600160a01b0385166004820152602401610663565b610bf2858483611561565b15610c1a5760405162c34ff560e61b81526001600160a01b0384166004820152602401610663565b80610c23611610565b60ff87166000908152600191909101602090815260408083206001600160a01b038816845290915290205581610c57611610565b60ff87166000908152602091825260408082206001600160a01b03891683529092529081208054909190610c8c908490611cf3565b90915550829050610c9b611610565b60ff87166000908152602091825260408082206001600160a01b03881683529092529081208054909190610cd0908490611d2d565b90915550506040805160ff87168152602081018390529081018390526001600160a01b038085169190861690600080516020611d988339815191529060600160405180910390a35050505050565b600080600080610d2c61163e565b6001600160a01b0316336001600160a01b031614610d5d57604051637b3f42c160e01b815260040161066390611cc2565b610d65611610565b60ff87166000908152602091825260408082206001600160a01b038916835290925220549250610d93611610565b60ff87166000908152600191909101602090815260408083206001600160a01b038916845290915290205491508215610ebd578293506000905060008412610e1457610dde84611668565b610de6611610565b60040160008481526020019081526020016000206000828254610e099190611d1a565b90915550610e569050565b610e25610e2085611d68565b611668565b610e2d611610565b60050160008481526020019081526020016000206000828254610e509190611d1a565b90915550505b6000610e60611610565b60ff88166000818152602092835260408082206001600160a01b038b16808452908552818320959095558051928352928201869052918101879052909450849190600080516020611d988339815191529060600160405180910390a35b610ec5611610565b60008381526002919091016020526040902054610ee0611610565b60008481526004919091016020526040902054148015610f335750610f03611610565b60008381526003919091016020526040902054610f1e611610565b60008481526005919091016020526040902054145b905092959194509250565b6000610f48611610565b600092835260030160205250604090205490565b610f6461163e565b6001600160a01b0316336001600160a01b031614610f9557604051637b3f42c160e01b815260040161066390611cc2565b6001600160a01b038316610fbc57604051630b328ad960e31b815260040160405180910390fd5b610fc7848483611561565b15610fef5760405162c34ff560e61b81526001600160a01b0384166004820152602401610663565b6000610ff9611610565b60ff86166000908152602091825260408082206001600160a01b03881683529092522054905081611028611610565b60ff87166000908152600191909101602090815260408083206001600160a01b038916845290915290205561105c836116be565b611064611610565b60ff87166000908152602091825260408082206001600160a01b03891683529092529081208054909190611099908490611cf3565b90915550506001600160a01b0384166000600080516020611d9883398151915287856110c4886116be565b6110cd90611d68565b6040805160ff909416845260208401929092529082015260600160405180910390a36109f5826110fc856116be565b6109ef90611d68565b600054610100900460ff16158080156111255750600054600160ff909116105b8061113f5750303b15801561113f575060005460ff166001145b6111a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610663565b6000805460ff1916600117905580156111c5576000805461ff0019166101001790555b60006111cf61193e565b6001600160a01b0316036112315760405162461bcd60e51b815260206004820152602360248201527f4d7573742062652063616c6c65642066726f6d20626561636f6e20636f6e74726044820152621858dd60ea1b6064820152608401610663565b61123a82611966565b611242610379565b80156104f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008061129661163e565b6001600160a01b0316336001600160a01b0316146112c757604051637b3f42c160e01b815260040161066390611cc2565b6112cf611610565b60ff86166000908152602091825260408082206001600160a01b0388168352909252908120549250831380156113055750600082125b8061131b575060008312801561131b5750600082135b156113395760405163b37fdc9d60e01b815260040160405180910390fd5b60008313801561134857508183125b8061135d575060008312801561135d57508183135b15611366578291505b81156114195781611375611610565b60ff87166000908152602091825260408082206001600160a01b038916835290925290812080549091906113aa908490611cf3565b90915550600090506113ba611610565b60ff87166000818152600192909201602090815260408084206001600160a01b038a1680865290835281852054825194855292840183905290830187905290935090600080516020611d988339815191529060600160405180910390a3505b611421611610565b60ff9095166000908152602095865260408082206001600160a01b039096168252949095525091909220549092909150565b61145b61163e565b6001600160a01b0316336001600160a01b03161461148c57604051637b3f42c160e01b815260040161066390611cc2565b6000611496611610565b60ff84166000908152602091825260408082206001600160a01b038616835290925220549050801561155c5760006114cc611610565b60ff85166000908152602091825260408082206001600160a01b0387168352909252908120919091556114fd611610565b60ff85166000818152600192909201602090815260408084206001600160a01b03881680865290835281852054825194855292840183905290830186905290935090600080516020611d988339815191529060600160405180910390a3505b505050565b60008161156c611610565b60ff86166000908152600191909101602090815260408083206001600160a01b0388168452909152902054036115a4575060006115d5565b6115ac611610565b60ff85166000908152602091825260408082206001600160a01b03871683529092522054151590505b9392505050565b60008061160a60017f4abde63c3e81aefa5764b017968bc473e83e093d7e1a10247d19e0a3e4124018611d55565b92915050565b60008061160a60017fd1b4fbfb8f78bdad30892554423aedac9635765ae463e7c2b7953fa50219190e611d55565b6000611663762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b6119c2565b905090565b6000808212156116ba5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610663565b5090565b60006001600160ff1b038211156116ba5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610663565b6000821261184757600061173b83611668565b90506000821261177c578061174e611610565b600201600086815260200190815260200160002060008282546117719190611d1a565b909155506118419050565b60006117888385611d2d565b90506000811261180e5761179b81611668565b6117a3611610565b600201600087815260200190815260200160002060008282546117c69190611d1a565b909155506117d89050610e2084611d68565b6117e0611610565b600301600087815260200190815260200160002060008282546118039190611d55565b909155506109f59050565b81611817611610565b6003016000878152602001908152602001600020600082825461183a9190611d55565b9091555050505b50505050565b6000611855610e2084611d68565b90506000821361188b5780611868611610565b600301600086815260200190815260200160002060008282546117719190611d1a565b60006118978385611d2d565b905060008113611912576118ad610e2082611d68565b6118b5611610565b600301600087815260200190815260200160002060008282546118d89190611d1a565b909155506118e7905083611668565b6118ef611610565b600201600087815260200190815260200160002060008282546118039190611d55565b8161191b611610565b6002016000878152602001908152602001600020600082825461183a9190611d55565b60007fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506102de565b60006119706115dc565b546001600160a01b031614611998576040516304b79d6360e51b815260040160405180910390fd5b806119a16115dc565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6000806119cd6115dc565b600084815260019190910160205260409020546001600160a01b031690508061160a5760408051602081018590520160408051601f19818403018152908290526346e2ec9360e01b825261066391600401611d84565b600060208284031215611a3557600080fd5b5035919050565b803560ff81168114611a4d57600080fd5b919050565b6001600160a01b0381168114611a6757600080fd5b50565b60008060408385031215611a7d57600080fd5b611a8683611a3c565b91506020830135611a9681611a52565b809150509250929050565b60008060008060808587031215611ab757600080fd5b611ac085611a3c565b93506020850135611ad081611a52565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b81811015611b1d57835183529284019291840191600101611b01565b50909695505050505050565b600060208284031215611b3b57600080fd5b6115d582611a3c565b600080600080600060a08688031215611b5c57600080fd5b611b6586611a3c565b94506020860135611b7581611a52565b93506040860135611b8581611a52565b94979396509394606081013594506080013592915050565b600060208284031215611baf57600080fd5b81356115d581611a52565b600080600060608486031215611bcf57600080fd5b611bd884611a3c565b92506020840135611be881611a52565b929592945050506040919091013590565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b81811015611c3557602081850181015186830182015201611c19565b506000602082860101526020601f19601f83011685010191505092915050565b828152604060208201526000611c6e6040830184611c0f565b949350505050565b600060208284031215611c8857600080fd5b81516115d581611a52565b634e487b7160e01b600052601160045260246000fd5b600060018201611cbb57611cbb611c93565b5060010190565b6020808252601790820152762632b73234b733a6b0b935b2ba21b7b73a3937b63632b960491b604082015260600190565b8181036000831280158383131683831282161715611d1357611d13611c93565b5092915050565b8082018082111561160a5761160a611c93565b8082018281126000831280158216821582161715611d4d57611d4d611c93565b505092915050565b8181038181111561160a5761160a611c93565b6000600160ff1b8201611d7d57611d7d611c93565b5060000390565b6020815260006115d56020830184611c0f56fe82c4751a398091b75d013ac93a3fa87bef1009a6e90c5351ed9271cc1dcf84cba264697066735822122061e783f376d486bf898a8bb25099222c330b46ade7261db5937603d46f5ef36364736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "decrease(uint8,address,uint256,uint256)": {
        "details": "Since the total supply can be determined by totaling only the amounts on one side of the order when the order is fulfilled, the total supply is incremented only when the executor of the original order is the taker.",
        "params": {
          "_amount": "The amount to add",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      },
      "executeForcedReset(uint8,address)": {
        "params": {
          "_user": "User's address"
        }
      },
      "executeForcedReset(uint8,address,int256)": {
        "params": {
          "_amount": "The amount to reset",
          "_user": "User's address"
        }
      },
      "getBalance(uint8,address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "balance": "The user balance",
          "maturity": "The maturity of the market that the future value was added"
        }
      },
      "getRevision()": {
        "returns": {
          "_0": "The revision number"
        }
      },
      "getTotalBorrowingSupply(uint256)": {
        "details": "This function returns the total supply of only orders that have been added through the `increase` of `decrease` function.",
        "params": {
          "_maturity": "The maturity of the market"
        }
      },
      "getTotalLendingSupply(uint256)": {
        "details": "This function returns the total supply of only orders that have been added through the `increase` of `decrease` function.",
        "params": {
          "_maturity": "The maturity of the market"
        }
      },
      "getTotalLockedBalance(uint8)": {
        "params": {
          "_orderBookId": "The order book id"
        },
        "returns": {
          "_0": "The total locked balance"
        }
      },
      "hasBalanceAtPastMaturity(uint8,address,uint256)": {
        "params": {
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        },
        "returns": {
          "_0": "The boolean if the lending market is initialized or not"
        }
      },
      "increase(uint8,address,uint256,uint256)": {
        "details": "Since the total supply can be determined by totaling only the amounts on one side of the order when the order is fulfilled, the total supply is incremented only when the executor of the original order is the taker.",
        "params": {
          "_amount": "The amount to add",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      },
      "initialize(address)": {
        "details": "Function is invoked by the proxy contract when the contract is added to the ProxyController.",
        "params": {
          "_resolver": "The address of the Address Resolver contract"
        }
      },
      "lock(uint8,address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to lock",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        },
        "returns": {
          "lockedAmount": "The amount locked"
        }
      },
      "requiredContracts()": {
        "details": "The contract name list is in `./libraries/Contracts.sol`."
      },
      "reset(uint8,address)": {
        "params": {
          "_user": "User's address"
        },
        "returns": {
          "currentAmount": "Current future value amount after update",
          "isAllRemoved": "The boolean if the all future value amount in the selected maturity is removed",
          "maturity": "Maturity of future value",
          "removedAmount": "Removed future value amount"
        }
      },
      "transferFrom(uint8,address,address,int256,uint256)": {
        "params": {
          "_amount": "Amount of funds to sent",
          "_maturity": "The maturity of the market",
          "_receiver": "Receiver's address",
          "_sender": "Sender's address"
        }
      },
      "unlock(uint8,address,uint256,uint256)": {
        "params": {
          "_amount": "The amount to lock",
          "_maturity": "The maturity of the market",
          "_user": "User's address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "decrease(uint8,address,uint256,uint256)": {
        "notice": "Decreases amount for borrowing deals."
      },
      "executeForcedReset(uint8,address)": {
        "notice": "Forces a reset of the user's future value."
      },
      "executeForcedReset(uint8,address,int256)": {
        "notice": "Forces a reset of the user's future value."
      },
      "getBalance(uint8,address)": {
        "notice": "Gets the user balance."
      },
      "getRevision()": {
        "notice": "Gets the revision number of the contract"
      },
      "getTotalBorrowingSupply(uint256)": {
        "notice": "Gets the total supply of borrowing orders."
      },
      "getTotalLendingSupply(uint256)": {
        "notice": "Gets the total supply of lending orders."
      },
      "getTotalLockedBalance(uint8)": {
        "notice": "Gets the total locked balance."
      },
      "hasBalanceAtPastMaturity(uint8,address,uint256)": {
        "notice": "Gets if the account has past maturity balance at the selected maturity."
      },
      "increase(uint8,address,uint256,uint256)": {
        "notice": "Increases amount for lending deals."
      },
      "initialize(address)": {
        "notice": "Initializes the contract."
      },
      "lock(uint8,address,uint256,uint256)": {
        "notice": "Locks user's balance."
      },
      "requiredContracts()": {
        "notice": "Returns the contract names used in this contract."
      },
      "reset(uint8,address)": {
        "notice": "Reset all amount if there is an amount in the past maturity."
      },
      "transferFrom(uint8,address,address,int256,uint256)": {
        "notice": "Transfers the future value from sender to receiver."
      },
      "unlock(uint8,address,uint256,uint256)": {
        "notice": "Unlocks user's balance."
      }
    },
    "notice": "Implements the management of the future value as an amount for Lending positions in each currency.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1618,
        "contract": "contracts/protocol/FutureValueVault.sol:FutureValueVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1621,
        "contract": "contracts/protocol/FutureValueVault.sol:FutureValueVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}