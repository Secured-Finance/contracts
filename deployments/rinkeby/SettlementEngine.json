{
  "address": "0x604BC283e44389549733751Fb9bcfBbcbD89E47a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentAggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_currencyController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crosschainResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH9",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "payer",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "receiver",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "settlementId",
          "type": "bytes32"
        }
      ],
      "name": "CrosschainSettlementRequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "txHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CrosschainSettlementRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "ExternalAdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "ExternalAdapterUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH9",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "addExternalAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "externalAdapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "from",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "to",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "txHash",
              "type": "string"
            }
          ],
          "internalType": "struct IExternalAdapterTxResponse.FulfillData",
          "name": "_txData",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "fullfillSettlementRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "replaceExternalAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "settlementRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "txHash",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_counterparty",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_txHash",
          "type": "string"
        }
      ],
      "name": "verifyPayment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e68899ae455dc330dd64c527aa92cc0e9376c16e39ecaead40c987df232d020",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0x604BC283e44389549733751Fb9bcfBbcbD89E47a",
    "transactionIndex": 48,
    "gasUsed": "1776401",
    "logsBloom": "0x
    "blockHash": "0x77131cec263d0c1baef5f79771af6518478cc1a4c0d2bd975491f794ac169432",
    "transactionHash": "0x0e68899ae455dc330dd64c527aa92cc0e9376c16e39ecaead40c987df232d020",
    "logs": [],
    "blockNumber": 10650649,
    "cumulativeGasUsed": "15674182",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7b97B03C3232a6560d6C9daAaE49f33037D9131C",
    "0x2938Fcec0Ba1633a35692Fd0863a2dCe6D8F6b33",
    "0x10f1B36AD1F8Fd0FACfaDBfeb78535F082868060",
    "0xcA0beb0d6F2e5759ebFeB7b70818C2891cdC4e48"
  ],
  "numDeployments": 1,
  "solcInputHash": "c547b2e6a239b041ee2d79dd0b62b5b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currencyController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crosschainResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH9\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"payer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"settlementId\",\"type\":\"bytes32\"}],\"name\":\"CrosschainSettlementRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CrosschainSettlementRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"ExternalAdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"ExternalAdapterUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH9\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"addExternalAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"externalAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"internalType\":\"struct IExternalAdapterTxResponse.FulfillData\",\"name\":\"_txData\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"fullfillSettlementRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"replaceExternalAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"settlementRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txHash\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_counterparty\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExternalAdapter(address,bytes32)\":{\"details\":\"Trigers to add new external adapter for specific `_ccy`\",\"params\":{\"_adapter\":\"External adapter contract address\",\"_ccy\":\"Short identifier of a currency\"}},\"constructor\":{\"details\":\"Contract constructor function.\"},\"fullfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)\":{\"details\":\"External function to fullfill cross-chain settlement request. Expects to get transaction object to validate the correct settlement values on the PaymentAggregator contract level\",\"params\":{\"_ccy\":\"Main currency of the external adapter\",\"_txData\":\"Transaction object from external adapter\"}},\"getVersion()\":{\"details\":\"Get the version of the underlying contract\",\"returns\":{\"_0\":\"implementation version\"}},\"replaceExternalAdapter(address,bytes32)\":{\"details\":\"Trigers to replace existing external adapter for specific `_ccy`\",\"params\":{\"_adapter\":\"External adapter contract address\",\"_ccy\":\"Short identifier of a currency\"}},\"verifyPayment(address,bytes32,uint256,uint256,string)\":{\"details\":\"External function to verify payment by msg.sender as a part of a settlement process It could validate either a cross-chain settlment or native settlement\",\"params\":{\"_ccy\":\"Main payment settlement currency\",\"_counterparty\":\"Counterparty address\",\"_payment\":\"Payment amount in currency\",\"_timestamp\":\"Timeslot timestamp for settlement operation\",\"_txHash\":\"Cross-chain transfer txHash\"}}},\"title\":\"Settlement Engine contract is used in settlement operations of the Secured Finance protocol. Settlement is divided per 1 calendar day and verified by either external adapters (for cross-chain transaction) or native ETH-chain settlement. Contract linked to the PaymentAggregator contract and all External Adapters per target chain.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExternalAdapter(address,bytes32)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"constructor\":\"sets contract deployer as owner of this contract\",\"fullfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)\":{\"notice\":\"Trigers only be external adapter for specific chain\"},\"replaceExternalAdapter(address,bytes32)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SettlementEngine.sol\":\"SettlementEngine\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/SettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./libraries/Strings.sol\\\";\\nimport \\\"./libraries/SafeTransfer.sol\\\";\\nimport \\\"./interfaces/IExternalAdapter.sol\\\";\\nimport \\\"./interfaces/ISettlementEngine.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\nimport \\\"./interfaces/ILiquidations.sol\\\";\\nimport \\\"./interfaces/IPaymentAggregator.sol\\\";\\nimport \\\"./interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"./interfaces/IExternalAdapterTxResponse.sol\\\";\\n\\n/**\\n * @title Settlement Engine contract is used in settlement operations\\n * of the Secured Finance protocol. Settlement is divided per 1 calendar\\n * day and verified by either external adapters (for cross-chain transaction)\\n * or native ETH-chain settlement.\\n *\\n * Contract linked to the PaymentAggregator contract and all External Adapters per target chain.\\n */\\ncontract SettlementEngine is\\n    ISettlementEngine,\\n    IExternalAdapterTxResponse,\\n    SafeTransfer\\n{\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using Strings for string;\\n\\n    struct SettlementRequest {\\n        address payer;\\n        address receiver;\\n        uint16 chainId;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n\\n    address public override owner;\\n    uint16 private constant VERSION = 1;\\n\\n    ICurrencyController private currencyController;\\n    ILiquidations private liquidationEngine;\\n    IPaymentAggregator private paymentAggregator;\\n    ICrosschainAddressResolver private crosschainResolver;\\n\\n    // Mapping to external providers addresses by Chain Ids\\n    // for ETH-based currencies there is no need for external adapters\\n    mapping(uint16 => address) public override externalAdapters;\\n\\n    // Mapping of cross-chain settlement requests per requestId\\n    mapping(bytes32 => SettlementRequest) public override settlementRequests;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"INVALID_ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract\\n     */\\n    constructor(\\n        address _paymentAggregator,\\n        address _currencyController,\\n        address _crosschainResolver,\\n        address _WETH9\\n    ) public SafeTransfer(_WETH9) {\\n        owner = msg.sender;\\n\\n        paymentAggregator = IPaymentAggregator(_paymentAggregator);\\n        currencyController = ICurrencyController(_currencyController);\\n        crosschainResolver = ICrosschainAddressResolver(_crosschainResolver);\\n    }\\n\\n    /**\\n     * @dev Trigers to add new external adapter for specific `_ccy`\\n     * @param _adapter External adapter contract address\\n     * @param _ccy Short identifier of a currency\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function addExternalAdapter(address _adapter, bytes32 _ccy)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_adapter.isContract(), \\\"NOT_CONTRACT\\\");\\n        require(currencyController.isSupportedCcy(_ccy), \\\"NON_SUPPORTED_CCY\\\");\\n\\n        uint16 chainId = currencyController.getChainId(_ccy);\\n        require(chainId != 60, \\\"NOT_ANOTHER_CHAIN\\\");\\n        require(\\n            externalAdapters[chainId] == address(0),\\n            \\\"CAN'T_REPLACE_EXTERNAL_ADAPTER\\\"\\n        );\\n\\n        externalAdapters[chainId] = _adapter;\\n\\n        emit ExternalAdapterAdded(_adapter, _ccy);\\n    }\\n\\n    /**\\n     * @dev Trigers to replace existing external adapter for specific `_ccy`\\n     * @param _adapter External adapter contract address\\n     * @param _ccy Short identifier of a currency\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function replaceExternalAdapter(address _adapter, bytes32 _ccy)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_adapter.isContract(), \\\"NOT_CONTRACT\\\");\\n        uint16 chainId = currencyController.getChainId(_ccy);\\n\\n        require(\\n            externalAdapters[chainId] != address(0),\\n            \\\"ADAPTER_DOESN'T_EXIST\\\"\\n        );\\n\\n        externalAdapters[chainId] = _adapter;\\n\\n        emit ExternalAdapterUpdated(_adapter, _ccy);\\n    }\\n\\n    /**\\n     * @dev External function to verify payment by msg.sender as a part of a settlement process\\n     * It could validate either a cross-chain settlment or native settlement\\n     * @param _counterparty Counterparty address\\n     * @param _ccy Main payment settlement currency\\n     * @param _payment Payment amount in currency\\n     * @param _timestamp Timeslot timestamp for settlement operation\\n     * @param _txHash Cross-chain transfer txHash\\n     */\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string memory _txHash\\n    ) external payable override returns (bytes32) {\\n        // TODO: add a way for third party to trigger ERC20 approved coupon payments\\n        uint16 chainId = currencyController.getChainId(_ccy);\\n        bytes32 requestId;\\n\\n        require(\\n            !paymentAggregator.isSettled(\\n                msg.sender,\\n                _counterparty,\\n                _ccy,\\n                _timestamp\\n            ),\\n            \\\"TIMESLOT_SETTLED_ALREADY\\\"\\n        );\\n\\n        if (chainId == 60) {\\n            _performNativeSettlement(\\n                msg.sender,\\n                _counterparty,\\n                _ccy,\\n                _payment,\\n                _timestamp\\n            );\\n        } else {\\n            requestId = _performCrosschainSettlement(\\n                msg.sender,\\n                _counterparty,\\n                chainId,\\n                _timestamp,\\n                _txHash\\n            );\\n        }\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev External function to fullfill cross-chain settlement request.\\n     * Expects to get transaction object to validate the correct settlement values\\n     * on the PaymentAggregator contract level\\n     * @param _txData Transaction object from external adapter\\n     * @param _ccy Main currency of the external adapter\\n     *\\n     * @notice Trigers only be external adapter for specific chain\\n     */\\n    function fullfillSettlementRequest(\\n        bytes32 _requestId,\\n        FulfillData memory _txData,\\n        bytes32 _ccy\\n    ) external override {\\n        uint16 chainId = currencyController.getChainId(_ccy);\\n        require(\\n            externalAdapters[chainId] == msg.sender,\\n            \\\"NOT_EXTERNAL_ADAPTER\\\"\\n        );\\n\\n        SettlementRequest memory request = settlementRequests[_requestId];\\n        _validateSettlementRequest(chainId, request, _txData);\\n\\n        bytes32 _settlementId = keccak256(abi.encodePacked(_txData.txHash));\\n\\n        paymentAggregator.verifyPayment(\\n            request.payer,\\n            request.receiver,\\n            _ccy,\\n            request.timestamp,\\n            _txData.value,\\n            _settlementId\\n        );\\n\\n        emit CrosschainSettlementRequestFulfilled(\\n            _txData.from,\\n            _txData.to,\\n            chainId,\\n            _txData.value,\\n            _txData.timestamp,\\n            _txData.txHash,\\n            _settlementId\\n        );\\n\\n        delete settlementRequests[_requestId];\\n    }\\n\\n    /**\\n     * @dev Internal function to create a settlement validation request for an external adapter\\n     * @param _payer Payer of the settlement transfer\\n     * @param _counterparty Receiver of the settlement transfer\\n     * @param _chainId Target chain id\\n     * @param _txHash Target chain transaction hash\\n     */\\n    function _performCrosschainSettlement(\\n        address _payer,\\n        address _counterparty,\\n        uint16 _chainId,\\n        uint256 _timestamp,\\n        string memory _txHash\\n    ) internal returns (bytes32) {\\n        require(msg.value == 0, \\\"INCORRECT_ETH_VALUE\\\");\\n        require(\\n            paymentAggregator.checkSettlementWindow(_timestamp),\\n            \\\"OUT_OF_SETTLEMENT_WINDOW\\\"\\n        );\\n\\n        address adapterAddr = externalAdapters[_chainId];\\n        require(adapterAddr != address(0), \\\"ADAPTER_DOESN'T_EXIST\\\");\\n        IExternalAdapter adapter = IExternalAdapter(adapterAddr);\\n\\n        bytes32 requestId = adapter.createRequest(_txHash);\\n        // TODO: make sure we're not duplicating requests with the same txHashes\\n        // on external adapter contract\\n\\n        settlementRequests[requestId] = SettlementRequest({\\n            payer: _payer,\\n            receiver: _counterparty,\\n            chainId: _chainId,\\n            timestamp: _timestamp,\\n            txHash: _txHash\\n        });\\n\\n        emit CrosschainSettlementRequested(\\n            _payer,\\n            _counterparty,\\n            _chainId,\\n            _timestamp,\\n            _txHash,\\n            requestId\\n        );\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @dev Internal function to settle payments on native ETH-based settlement.\\n     * If currency is a ERC20 token it would transfer the `_payment` amount of tokens\\n     * from msg.sender to `_counterparty` address.\\n     * If currency is ETH, native Ether would be transfered accordingly\\n     *\\n     * @param _payer Payment sender address\\n     * @param _counterparty Payment receiver address\\n     * @param _ccy Main payment settlement currency\\n     * @param _payment Payment amount in currency\\n     */\\n    function _performNativeSettlement(\\n        address _payer,\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp\\n    ) internal {\\n        if (_ccy == \\\"ETH\\\") {\\n            require(msg.value == _payment, \\\"INCORRECT_ETH_VALUE\\\");\\n            _safeTransferETH(_counterparty, msg.value);\\n        } else {\\n            require(msg.value == 0, \\\"INCORRECT_ETH_VALUE\\\");\\n            address token = currencyController.tokenAddresses(_ccy);\\n            require(token != address(0), \\\"INVALID_TOKEN_ADDRESS\\\");\\n            _safeTransferFrom(token, _payer, _counterparty, _payment);\\n        }\\n\\n        bytes32 _settlementId = keccak256(\\n            abi.encodePacked(_payer, _counterparty, _ccy, _payment, _timestamp)\\n        );\\n\\n        paymentAggregator.verifyPayment(\\n            _payer,\\n            _counterparty,\\n            _ccy,\\n            _timestamp,\\n            _payment,\\n            _settlementId\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal function to cross-chain settlement request against\\n     * a transaction object from an external adapter\\n     */\\n    function _validateSettlementRequest(\\n        uint16 _chainId,\\n        SettlementRequest memory _request,\\n        FulfillData memory _txData\\n    ) internal view returns (bool) {\\n        require(_request.txHash.isEqual(_txData.txHash), \\\"INCORRECT_TX_HASH\\\");\\n\\n        string memory payerAddress = crosschainResolver.getUserAddress(\\n            _request.payer,\\n            _chainId\\n        );\\n\\n        string memory receiverAddress = crosschainResolver.getUserAddress(\\n            _request.receiver,\\n            _chainId\\n        );\\n\\n        require(payerAddress.isEqual(_txData.from), \\\"INCORRECT_ADDRESS_FROM\\\");\\n        require(receiverAddress.isEqual(_txData.to), \\\"INCORRECT_ADDRESS_TO\\\");\\n    }\\n\\n    /**\\n     * @dev Get the version of the underlying contract\\n     * @return implementation version\\n     */\\n    function getVersion() public view override returns (uint16) {\\n        return VERSION;\\n    }\\n}\\n\",\"keccak256\":\"0x1e72b7e4351eb1eaeb86a0cbba345d00244b0ae4291ef58c8b11edaf80d0262a\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x5ebf4b8928f6253eab963c52b0cc18364c7ba06491b0260399f88c8596c71825\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n\\n    function tokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x24197e936f7701c82a04656685d419f65295bfa847a7ce34b8b270d6db8e64aa\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IExternalAdapter {\\n    function createRequest(string memory _txHash)\\n        external\\n        returns (bytes32 requestId);\\n\\n    function cancelRequest(\\n        bytes32 _requestId,\\n        bytes4 _callbackFunctionId,\\n        uint256 _expiration\\n    ) external;\\n\\n    function fulfill(\\n        bytes32 _requestId,\\n        string calldata _from,\\n        string calldata _to,\\n        uint256 _value,\\n        uint256 _timestamp\\n    ) external;\\n}\\n\",\"keccak256\":\"0x58d577eaa263aa9f50b30f8e036e914d475081fd511b37cc88ce36f799e42a31\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0xf327a0d3768b23f1f611093375cb3cc897314baf1eb5a0368c136b87ca54e431\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event DealRemovedFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event LinkedContract(address addr);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n    event OwnerUpdated(address indexed oldOwner, address indexed newOwner);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function linkContract(address _addr) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function offset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x54306b84a9dedee181de4a25a0c2dc08fb60d4f71ebf2543cdd5ec24399bbf63\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nstruct Slot {\\n    uint256 totalPayment0;\\n    uint256 totalPayment1;\\n    uint256 netPayment;\\n    bool flipped;\\n    bytes32 paymentProof;\\n    address verificationParty;\\n    bool isSettled;\\n}\\n\\ninterface IPaymentAggregator {\\n    event UpdateCloseOutNetting(\\n        address indexed prevContract,\\n        address indexed closeOutNetting\\n    );\\n    event UpdateMarkToMarket(\\n        address indexed prevContract,\\n        address indexed closeOutNetting\\n    );\\n    event UpdateSettlementEngine(\\n        address indexed prevContract,\\n        address indexed settlementEngine\\n    );\\n\\n    event RegisterPayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n    event VerifyPayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment,\\n        bytes32 settlementId\\n    );\\n    event SettlePayment(\\n        address indexed verifier,\\n        address indexed counterparty,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        bytes32 settlementId\\n    );\\n    event RemovePayment(\\n        address indexed party0,\\n        address indexed party1,\\n        bytes32 ccy,\\n        bytes32 timeSlot,\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 payment0,\\n        uint256 payment1\\n    );\\n\\n    function addPaymentAggregatorUser(address _user) external returns (bool);\\n\\n    function isPaymentAggregatorUser(address _user)\\n        external\\n        view\\n        returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function registerPayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] memory timestamps,\\n        uint256[] memory payments0,\\n        uint256[] memory payments1\\n    ) external;\\n\\n    function removePaymentAggregatorUser(address _user) external returns (bool);\\n\\n    function removePayments(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 dealId,\\n        uint256[] calldata timestamps,\\n        uint256[] calldata payments0,\\n        uint256[] calldata payments1\\n    ) external;\\n\\n    function verifyPayment(\\n        address verifier,\\n        address counterparty,\\n        bytes32 ccy,\\n        uint256 timestamp,\\n        uint256 payment,\\n        bytes32 settlementId\\n    ) external;\\n\\n    function isSettled(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 timestamp\\n    ) external view returns (bool status);\\n\\n    function getDealsFromSlot(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        bytes32 slotPosition\\n    ) external view returns (bytes32[] memory);\\n\\n    // function getTimeSlotByDate(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     uint256 year,\\n    //     uint256 month,\\n    //     uint256 day\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    // function getTimeSlotBySlotId(\\n    //     address party0,\\n    //     address party1,\\n    //     bytes32 ccy,\\n    //     bytes32 slot\\n    // ) external view returns (Slot memory timeSlot);\\n\\n    function settlementWindow() external view returns (uint256);\\n\\n    function checkSettlementWindow(uint256 targetTime)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xbcc6d9d768fab6932aa25c0aa988123a5540e031cba17db9dea2837e30338487\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity >=0.6.12 <=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n    event ExternalAdapterUpdated(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function externalAdapters(uint16) external view returns (address);\\n\\n    function fullfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData memory _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function owner() external view returns (address);\\n\\n    function replaceExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function settlementRequests(bytes32)\\n        external\\n        view\\n        returns (\\n            address payer,\\n            address receiver,\\n            uint16 chainId,\\n            uint256 timestamp,\\n            string memory txHash\\n        );\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x44abcc184a248d895bcba237c9a596e36287f9d9b0a69615472ea7bd68e0ed56\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH9.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    event Deposit(address user, uint256 amount);\\n    event Withdrawal(address user, uint256 amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x98bf56986f6a85c672ef86d92870227b3d9004c47bc5fc156ab25ba6368e7acb\",\"license\":\"MIT\"},\"contracts/libraries/SafeTransfer.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"../interfaces/IWETH9.sol\\\";\\n\\nabstract contract SafeTransfer {\\n    address public immutable WETH9;\\n\\n    constructor(address _WETH9) public {\\n        WETH9 = _WETH9;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == WETH9, \\\"Not WETH9\\\");\\n    }\\n\\n    function _depositAssets(\\n        address _token,\\n        address _payer,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == WETH9 && address(this).balance >= _amount) {\\n            _wrapWETH(_receiver, _amount);\\n        } else if (_receiver == address(this)) {\\n            _safeTransferFrom(_token, _payer, _amount);\\n        } else {\\n            _safeTransferFrom(_token, _payer, _receiver, _amount);\\n        }\\n    }\\n\\n    function _withdrawAssets(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal {\\n        if (address(_token) == WETH9) {\\n            _unwrapWETH(_receiver, _amount);\\n        } else {\\n            _safeTransfer(_token, _receiver, _amount);\\n        }\\n    }\\n\\n    function _wrapWETH(address _receiver, uint256 _amount) internal {\\n        _amount = msg.value;\\n\\n        IWETH9(WETH9).deposit{value: _amount}();\\n        IWETH9(WETH9).transfer(_receiver, _amount);\\n    }\\n\\n    function _unwrapWETH(address _receiver, uint256 _amount) internal {\\n        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\\n        require(balanceWETH9 >= _amount, \\\"Insufficient WETH9\\\");\\n\\n        if (balanceWETH9 > 0) {\\n            IWETH9(WETH9).withdraw(_amount);\\n            _safeTransferETH(_receiver, _amount);\\n        }\\n    }\\n\\n    /// @dev Transfer helper from UniswapV2 Router\\n    function _safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    /**\\n     * There are many non-compliant ERC20 tokens... this can handle most, adapted from UniSwap V2\\n     * Im trying to make it a habit to put external calls last (reentrancy)\\n     * You can put this in an internal function if you like.\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0xa9059cbb = bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n            abi.encodeWithSelector(0xa9059cbb, to, amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 Transfer failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal virtual {\\n        // solium-disable-next-line security/no-low-level-calls\\n        (bool success, bytes memory data) = token.call(\\n            // 0x23b872dd = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"))\\n            abi.encodeWithSelector(0x23b872dd, from, address(this), amount)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        ); // ERC20 TransferFrom failed\\n    }\\n\\n    function _safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7f2e2be6c3f7fc10d452696a661c9591d903a4e8ce42a23db4a4c1686f842b36\"},\"contracts/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary Strings {\\n    /**\\n     * @dev Helper function to check wether strings are equal\\n     * @param text0 First string to compare\\n     * @param text1 Second string to compare\\n     * @return Boolean statement\\n     */\\n    function isEqual(string memory text0, string memory text1)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            keccak256(abi.encodePacked(text0)) ==\\n            keccak256(abi.encodePacked(text1));\\n    }\\n\\n    function toHex(bytes32 data) public pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"0x\\\",\\n                    toHex16(bytes16(data)),\\n                    toHex16(bytes16(data << 128))\\n                )\\n            );\\n    }\\n\\n    function toHex16(bytes16 data) internal pure returns (bytes32 result) {\\n        result =\\n            (bytes32(data) &\\n                0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000) |\\n            ((bytes32(data) &\\n                0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >>\\n                64);\\n        result =\\n            (result &\\n                0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000) |\\n            ((result &\\n                0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >>\\n                32);\\n        result =\\n            (result &\\n                0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000) |\\n            ((result &\\n                0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >>\\n                16);\\n        result =\\n            (result &\\n                0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000) |\\n            ((result &\\n                0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >>\\n                8);\\n        result =\\n            ((result &\\n                0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >>\\n                4) |\\n            ((result &\\n                0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >>\\n                8);\\n        result = bytes32(\\n            0x3030303030303030303030303030303030303030303030303030303030303030 +\\n                uint256(result) +\\n                (((uint256(result) +\\n                    0x0606060606060606060606060606060606060606060606060606060606060606) >>\\n                    4) &\\n                    0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F) *\\n                7\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2c87d37263380217da22213b38220bfbffc531bc12588add02116bd779b78093\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001eac38038062001eac8339810160408190526200003491620000b0565b60601b6001600160601b03191660805260008054336001600160a01b0319918216179091556003805482166001600160a01b039586161790556001805482169385169390931790925560048054909216921691909117905562000110565b80516001600160a01b0381168114620000aa57600080fd5b92915050565b60008060008060808587031215620000c6578384fd5b620000d2868662000092565b9350620000e3866020870162000092565b9250620000f4866040870162000092565b915062000105866060870162000092565b905092959194509250565b60805160601c611d7a6200013260003980609a52806105f25250611d7a6000f3fe60806040526004361061008a5760003560e01c80634a57173f116100595780634a57173f146101905780634aa4a4fc146101b05780637c34ebc8146101c55780638bdb4c0c146101e55780638da5cb5b14610205576100e2565b80630d8e6e2c146100e75780632b070b40146101125780632e4e6f101461014357806334ca1b9e14610163576100e2565b366100e257336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100e05760405162461bcd60e51b81526004016100d790611aa3565b60405180910390fd5b005b600080fd5b3480156100f357600080fd5b506100fc61021a565b6040516101099190611c95565b60405180910390f35b34801561011e57600080fd5b5061013261012d366004611568565b61021f565b604051610109959493929190611812565b6101566101513660046114dd565b6102eb565b60405161010991906118e0565b34801561016f57600080fd5b5061018361017e3660046116e4565b610453565b604051610109919061179f565b34801561019c57600080fd5b506100e06101ab3660046114b2565b61046e565b3480156101bc57600080fd5b506101836105f0565b3480156101d157600080fd5b506100e06101e03660046114b2565b610614565b3480156101f157600080fd5b506100e0610200366004611598565b61084a565b34801561021157600080fd5b50610183610b47565b600190565b600660209081526000918252604091829020805460018083015460028085015460038601805489516101009682161596909602600019011692909204601f81018890048802850188019098528784526001600160a01b039485169794831696600160a01b90930461ffff169590949093928301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b5050505050905085565b600154604051632d0ea79b60e21b815260009182916001600160a01b039091169063b43a9e6c906103209089906004016118e0565b60206040518083038186803b15801561033857600080fd5b505afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190611700565b6003546040516375dc0d2160e01b81529192506000916001600160a01b03909116906375dc0d21906103ac9033908c908c908b906004016117b3565b60206040518083038186803b1580156103c457600080fd5b505afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc9190611548565b156104195760405162461bcd60e51b81526004016100d790611a16565b8161ffff16603c1415610438576104333389898989610b56565b610448565b6104453389848888610d0d565b90505b979650505050505050565b6005602052600090815260409020546001600160a01b031681565b6000546001600160a01b031633146104985760405162461bcd60e51b81526004016100d790611b9c565b6104aa826001600160a01b0316610f88565b6104c65760405162461bcd60e51b81526004016100d790611c6f565b600154604051632d0ea79b60e21b81526000916001600160a01b03169063b43a9e6c906104f79085906004016118e0565b60206040518083038186803b15801561050f57600080fd5b505afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190611700565b61ffff81166000908152600560205260409020549091506001600160a01b03166105835760405162461bcd60e51b81526004016100d790611af3565b61ffff81166000908152600560205260409081902080546001600160a01b0319166001600160a01b03861690811790915590517f4a88436815868c6be0f9cf31470a3a231c8cf825741f17a03653080e64515104906105e39085906118e0565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461063e5760405162461bcd60e51b81526004016100d790611b9c565b610650826001600160a01b0316610f88565b61066c5760405162461bcd60e51b81526004016100d790611c6f565b600154604051636a6a7b6760e11b81526001600160a01b039091169063d4d4f6ce9061069c9084906004016118e0565b60206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611548565b6107085760405162461bcd60e51b81526004016100d7906119eb565b600154604051632d0ea79b60e21b81526000916001600160a01b03169063b43a9e6c906107399085906004016118e0565b60206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611700565b90508061ffff16603c14156107b05760405162461bcd60e51b81526004016100d790611a78565b61ffff81166000908152600560205260409020546001600160a01b0316156107ea5760405162461bcd60e51b81526004016100d790611b65565b61ffff81166000908152600560205260409081902080546001600160a01b0319166001600160a01b03861690811790915590517f5a3894108bb15e1405981895b522e2bad5b7083559eef0c79abc8713e564e1e0906105e39085906118e0565b600154604051632d0ea79b60e21b81526000916001600160a01b03169063b43a9e6c9061087b9085906004016118e0565b60206040518083038186803b15801561089357600080fd5b505afa1580156108a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cb9190611700565b61ffff81166000908152600560205260409020549091506001600160a01b031633146109095760405162461bcd60e51b81526004016100d7906119bd565b61091161131d565b600085815260066020908152604091829020825160a08101845281546001600160a01b03908116825260018084015491821683860152600160a01b90910461ffff1682860152600280840154606084015260038401805487516101009482161594909402600019011691909104601f8101869004860283018601909652858252919492936080860193919291908301828280156109ef5780601f106109c4576101008083540402835291602001916109ef565b820191906000526020600020905b8154815290600101906020018083116109d257829003601f168201915b5050505050815250509050610a05828286610f8e565b5060008460800151604051602001610a1d9190611783565b60408051601f1981840301815282825280516020918201206003548651928701516060880151948b0151634aae439b60e11b87529296506001600160a01b039091169463955c873694610a7794938b9289906004016117dc565b600060405180830381600087803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b5050865160208801516040808a015160608b015160808c015192517f30f3dfec241561f2badda922320658321ac3fc69679b3e78dd3e9bf99abfd4239750610af296508a939089906118fc565b60405180910390a1600086815260066020526040812080546001600160a01b03191681556001810180546001600160b01b03191690556002810182905590610b3d6003830182611362565b5050505050505050565b6000546001600160a01b031681565b826208aa8960eb1b1415610b9257813414610b835760405162461bcd60e51b81526004016100d790611ac6565b610b8d8434611141565b610c67565b3415610bb05760405162461bcd60e51b81526004016100d790611ac6565b600154604051631d16df1560e11b81526000916001600160a01b031690633a2dbe2a90610be19087906004016118e0565b60206040518083038186803b158015610bf957600080fd5b505afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c31919061148f565b90506001600160a01b038116610c595760405162461bcd60e51b81526004016100d790611960565b610c65818787866111d3565b505b60008585858585604051602001610c82959493929190611748565b60408051601f19818403018152908290528051602090910120600354634aae439b60e11b83529092506001600160a01b03169063955c873690610cd39089908990899088908a9089906004016117dc565b600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b50505050505050505050565b60003415610d2d5760405162461bcd60e51b81526004016100d790611ac6565b600354604051620d214d60eb1b81526001600160a01b039091169063690a680090610d5c9086906004016118e0565b60206040518083038186803b158015610d7457600080fd5b505afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611548565b610dc85760405162461bcd60e51b81526004016100d790611bc4565b61ffff84166000908152600560205260409020546001600160a01b031680610e025760405162461bcd60e51b81526004016100d790611af3565b604051631b146ecf60e01b815281906000906001600160a01b03831690631b146ecf90610e339088906004016118e9565b602060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e859190611580565b6040805160a0810182526001600160a01b03808d1682528b8116602080840191825261ffff808e16858701908152606086018e8152608087018e815260008a81526006865298909820875181549088166001600160a01b031991821617825595516001820180549451909516600160a01b0261ffff60a01b1991909816939096169290921794909416949094179055905160028301559251805194955091939092610f379260038501929101906113a9565b509050507f699e9bc790173aa2390b5e2a7fd404ec61deec3899b067e9965ced88576d1dfb898989898986604051610f749695949392919061184f565b60405180910390a198975050505050505050565b3b151590565b6000610fab826080015184608001516112c490919063ffffffff16565b610fc75760405162461bcd60e51b81526004016100d790611a4d565b60048054845160405163231ca40b60e21b81526060936001600160a01b0390931692638c72902c92610ffd9290918a91016118c3565b60006040518083038186803b15801561101557600080fd5b505afa158015611029573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110519190810190611671565b60048054602087015160405163231ca40b60e21b81529394506060936001600160a01b0390921692638c72902c9261108c92918b91016118c3565b60006040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110e09190810190611671565b84519091506110f09083906112c4565b61110c5760405162461bcd60e51b81526004016100d790611bfb565b602084015161111c9082906112c4565b6111385760405162461bcd60e51b81526004016100d79061198f565b50509392505050565b604080516000808252602082019092526001600160a01b03841690839060405161116b9190611783565b60006040518083038185875af1925050503d80600081146111a8576040519150601f19603f3d011682016040523d82523d6000602084013e6111ad565b606091505b50509050806111ce5760405162461bcd60e51b81526004016100d790611b22565b505050565b60006060856001600160a01b03166323b872dd8686866040516024016111fb9392919061189f565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112349190611783565b6000604051808303816000865af19150503d8060008114611271576040519150601f19603f3d011682016040523d82523d6000602084013e611276565b606091505b50915091508180156112a05750805115806112a05750808060200190518101906112a09190611548565b6112bc5760405162461bcd60e51b81526004016100d790611c2b565b505050505050565b6000816040516020016112d79190611783565b60405160208183030381529060405280519060200120836040516020016112fe9190611783565b6040516020818303038152906040528051906020012014905092915050565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600061ffff16815260200160008152602001606081525090565b50805460018160011615610100020316600290046000825580601f1061138857506113a6565b601f0160209004906000526020600020908101906113a69190611427565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113ea57805160ff1916838001178555611417565b82800160010185558215611417579182015b828111156114175782518255916020019190600101906113fc565b50611423929150611427565b5090565b5b808211156114235760008155600101611428565b600082601f83011261144c578081fd5b813561145f61145a82611ccb565b611ca4565b915080825283602082850101111561147657600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156114a0578081fd5b81516114ab81611d1f565b9392505050565b600080604083850312156114c4578081fd5b82356114cf81611d1f565b946020939093013593505050565b600080600080600060a086880312156114f4578081fd5b85356114ff81611d1f565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561152f578182fd5b61153b8882890161143c565b9150509295509295909350565b600060208284031215611559578081fd5b815180151581146114ab578182fd5b600060208284031215611579578081fd5b5035919050565b600060208284031215611591578081fd5b5051919050565b6000806000606084860312156115ac578283fd5b83359250602084013567ffffffffffffffff808211156115ca578384fd5b9085019060a082880312156115dd578384fd5b6115e760a0611ca4565b8235828111156115f5578586fd5b6116018982860161143c565b825250602083013582811115611615578586fd5b6116218982860161143c565b602083015250604083013560408201526060830135606082015260808301358281111561164c578586fd5b6116588982860161143c565b6080830152509497949650505050604092909201359150565b600060208284031215611682578081fd5b815167ffffffffffffffff811115611698578182fd5b8201601f810184136116a8578182fd5b80516116b661145a82611ccb565b8181528560208385010111156116ca578384fd5b6116db826020830160208601611cef565b95945050505050565b6000602082840312156116f5578081fd5b81356114ab81611d34565b600060208284031215611711578081fd5b81516114ab81611d34565b60008151808452611734816020860160208601611cef565b601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff19606096871b811682529490951b909316601485015260288401919091526048830152606882015260880190565b60008251611795818460208701611cef565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b6001600160a01b0386811682528516602082015261ffff841660408201526060810183905260a0608082018190526000906104489083018461171c565b6001600160a01b0387811682528616602082015261ffff851660408201526060810184905260c06080820181905260009061188c9083018561171c565b90508260a0830152979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392909216825261ffff16602082015260400190565b90815260200190565b6000602082526114ab602083018461171c565b600060e0825261190f60e083018a61171c565b8281036020840152611921818a61171c565b905061ffff8816604084015286606084015285608084015282810360a084015261194b818661171c565b9150508260c083015298975050505050505050565b602080825260159082015274494e56414c49445f544f4b454e5f4144445245535360581b604082015260600190565b602080825260149082015273494e434f52524543545f414444524553535f544f60601b604082015260600190565b6020808252601490820152732727aa2fa2ac2a22a92720a62fa0a220a82a22a960611b604082015260600190565b6020808252601190820152704e4f4e5f535550504f525445445f43435960781b604082015260600190565b60208082526018908201527f54494d45534c4f545f534554544c45445f414c52454144590000000000000000604082015260600190565b6020808252601190820152700929c869ea4a48a86a8bea8b0be9082a69607b1b604082015260600190565b6020808252601190820152702727aa2fa0a727aa2422a92fa1a420a4a760791b604082015260600190565b6020808252600990820152684e6f7420574554483960b81b604082015260600190565b602080825260139082015272494e434f52524543545f4554485f56414c554560681b604082015260600190565b6020808252601590820152741051105415115497d113d154d389d517d1561254d5605a1b604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b6020808252601e908201527f43414e27545f5245504c4143455f45585445524e414c5f414441505445520000604082015260600190565b6020808252600e908201526d494e56414c49445f41434345535360901b604082015260600190565b60208082526018908201527f4f55545f4f465f534554544c454d454e545f57494e444f570000000000000000604082015260600190565b602080825260169082015275494e434f52524543545f414444524553535f46524f4d60501b604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252600c908201526b1393d517d0d3d395149050d560a21b604082015260600190565b61ffff91909116815260200190565b60405181810167ffffffffffffffff81118282101715611cc357600080fd5b604052919050565b600067ffffffffffffffff821115611ce1578081fd5b50601f01601f191660200190565b60005b83811015611d0a578181015183820152602001611cf2565b83811115611d19576000848401525b50505050565b6001600160a01b03811681146113a657600080fd5b61ffff811681146113a657600080fdfea26469706673582212205202f172c634679fcb51fd16487a247059b8354edf5d2fc9225f2abafa59273464736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80634a57173f116100595780634a57173f146101905780634aa4a4fc146101b05780637c34ebc8146101c55780638bdb4c0c146101e55780638da5cb5b14610205576100e2565b80630d8e6e2c146100e75780632b070b40146101125780632e4e6f101461014357806334ca1b9e14610163576100e2565b366100e257336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100e05760405162461bcd60e51b81526004016100d790611aa3565b60405180910390fd5b005b600080fd5b3480156100f357600080fd5b506100fc61021a565b6040516101099190611c95565b60405180910390f35b34801561011e57600080fd5b5061013261012d366004611568565b61021f565b604051610109959493929190611812565b6101566101513660046114dd565b6102eb565b60405161010991906118e0565b34801561016f57600080fd5b5061018361017e3660046116e4565b610453565b604051610109919061179f565b34801561019c57600080fd5b506100e06101ab3660046114b2565b61046e565b3480156101bc57600080fd5b506101836105f0565b3480156101d157600080fd5b506100e06101e03660046114b2565b610614565b3480156101f157600080fd5b506100e0610200366004611598565b61084a565b34801561021157600080fd5b50610183610b47565b600190565b600660209081526000918252604091829020805460018083015460028085015460038601805489516101009682161596909602600019011692909204601f81018890048802850188019098528784526001600160a01b039485169794831696600160a01b90930461ffff169590949093928301828280156102e15780601f106102b6576101008083540402835291602001916102e1565b820191906000526020600020905b8154815290600101906020018083116102c457829003601f168201915b5050505050905085565b600154604051632d0ea79b60e21b815260009182916001600160a01b039091169063b43a9e6c906103209089906004016118e0565b60206040518083038186803b15801561033857600080fd5b505afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190611700565b6003546040516375dc0d2160e01b81529192506000916001600160a01b03909116906375dc0d21906103ac9033908c908c908b906004016117b3565b60206040518083038186803b1580156103c457600080fd5b505afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc9190611548565b156104195760405162461bcd60e51b81526004016100d790611a16565b8161ffff16603c1415610438576104333389898989610b56565b610448565b6104453389848888610d0d565b90505b979650505050505050565b6005602052600090815260409020546001600160a01b031681565b6000546001600160a01b031633146104985760405162461bcd60e51b81526004016100d790611b9c565b6104aa826001600160a01b0316610f88565b6104c65760405162461bcd60e51b81526004016100d790611c6f565b600154604051632d0ea79b60e21b81526000916001600160a01b03169063b43a9e6c906104f79085906004016118e0565b60206040518083038186803b15801561050f57600080fd5b505afa158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190611700565b61ffff81166000908152600560205260409020549091506001600160a01b03166105835760405162461bcd60e51b81526004016100d790611af3565b61ffff81166000908152600560205260409081902080546001600160a01b0319166001600160a01b03861690811790915590517f4a88436815868c6be0f9cf31470a3a231c8cf825741f17a03653080e64515104906105e39085906118e0565b60405180910390a2505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461063e5760405162461bcd60e51b81526004016100d790611b9c565b610650826001600160a01b0316610f88565b61066c5760405162461bcd60e51b81526004016100d790611c6f565b600154604051636a6a7b6760e11b81526001600160a01b039091169063d4d4f6ce9061069c9084906004016118e0565b60206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611548565b6107085760405162461bcd60e51b81526004016100d7906119eb565b600154604051632d0ea79b60e21b81526000916001600160a01b03169063b43a9e6c906107399085906004016118e0565b60206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190611700565b90508061ffff16603c14156107b05760405162461bcd60e51b81526004016100d790611a78565b61ffff81166000908152600560205260409020546001600160a01b0316156107ea5760405162461bcd60e51b81526004016100d790611b65565b61ffff81166000908152600560205260409081902080546001600160a01b0319166001600160a01b03861690811790915590517f5a3894108bb15e1405981895b522e2bad5b7083559eef0c79abc8713e564e1e0906105e39085906118e0565b600154604051632d0ea79b60e21b81526000916001600160a01b03169063b43a9e6c9061087b9085906004016118e0565b60206040518083038186803b15801561089357600080fd5b505afa1580156108a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cb9190611700565b61ffff81166000908152600560205260409020549091506001600160a01b031633146109095760405162461bcd60e51b81526004016100d7906119bd565b61091161131d565b600085815260066020908152604091829020825160a08101845281546001600160a01b03908116825260018084015491821683860152600160a01b90910461ffff1682860152600280840154606084015260038401805487516101009482161594909402600019011691909104601f8101869004860283018601909652858252919492936080860193919291908301828280156109ef5780601f106109c4576101008083540402835291602001916109ef565b820191906000526020600020905b8154815290600101906020018083116109d257829003601f168201915b5050505050815250509050610a05828286610f8e565b5060008460800151604051602001610a1d9190611783565b60408051601f1981840301815282825280516020918201206003548651928701516060880151948b0151634aae439b60e11b87529296506001600160a01b039091169463955c873694610a7794938b9289906004016117dc565b600060405180830381600087803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b5050865160208801516040808a015160608b015160808c015192517f30f3dfec241561f2badda922320658321ac3fc69679b3e78dd3e9bf99abfd4239750610af296508a939089906118fc565b60405180910390a1600086815260066020526040812080546001600160a01b03191681556001810180546001600160b01b03191690556002810182905590610b3d6003830182611362565b5050505050505050565b6000546001600160a01b031681565b826208aa8960eb1b1415610b9257813414610b835760405162461bcd60e51b81526004016100d790611ac6565b610b8d8434611141565b610c67565b3415610bb05760405162461bcd60e51b81526004016100d790611ac6565b600154604051631d16df1560e11b81526000916001600160a01b031690633a2dbe2a90610be19087906004016118e0565b60206040518083038186803b158015610bf957600080fd5b505afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c31919061148f565b90506001600160a01b038116610c595760405162461bcd60e51b81526004016100d790611960565b610c65818787866111d3565b505b60008585858585604051602001610c82959493929190611748565b60408051601f19818403018152908290528051602090910120600354634aae439b60e11b83529092506001600160a01b03169063955c873690610cd39089908990899088908a9089906004016117dc565b600060405180830381600087803b158015610ced57600080fd5b505af1158015610d01573d6000803e3d6000fd5b50505050505050505050565b60003415610d2d5760405162461bcd60e51b81526004016100d790611ac6565b600354604051620d214d60eb1b81526001600160a01b039091169063690a680090610d5c9086906004016118e0565b60206040518083038186803b158015610d7457600080fd5b505afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190611548565b610dc85760405162461bcd60e51b81526004016100d790611bc4565b61ffff84166000908152600560205260409020546001600160a01b031680610e025760405162461bcd60e51b81526004016100d790611af3565b604051631b146ecf60e01b815281906000906001600160a01b03831690631b146ecf90610e339088906004016118e9565b602060405180830381600087803b158015610e4d57600080fd5b505af1158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e859190611580565b6040805160a0810182526001600160a01b03808d1682528b8116602080840191825261ffff808e16858701908152606086018e8152608087018e815260008a81526006865298909820875181549088166001600160a01b031991821617825595516001820180549451909516600160a01b0261ffff60a01b1991909816939096169290921794909416949094179055905160028301559251805194955091939092610f379260038501929101906113a9565b509050507f699e9bc790173aa2390b5e2a7fd404ec61deec3899b067e9965ced88576d1dfb898989898986604051610f749695949392919061184f565b60405180910390a198975050505050505050565b3b151590565b6000610fab826080015184608001516112c490919063ffffffff16565b610fc75760405162461bcd60e51b81526004016100d790611a4d565b60048054845160405163231ca40b60e21b81526060936001600160a01b0390931692638c72902c92610ffd9290918a91016118c3565b60006040518083038186803b15801561101557600080fd5b505afa158015611029573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110519190810190611671565b60048054602087015160405163231ca40b60e21b81529394506060936001600160a01b0390921692638c72902c9261108c92918b91016118c3565b60006040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110e09190810190611671565b84519091506110f09083906112c4565b61110c5760405162461bcd60e51b81526004016100d790611bfb565b602084015161111c9082906112c4565b6111385760405162461bcd60e51b81526004016100d79061198f565b50509392505050565b604080516000808252602082019092526001600160a01b03841690839060405161116b9190611783565b60006040518083038185875af1925050503d80600081146111a8576040519150601f19603f3d011682016040523d82523d6000602084013e6111ad565b606091505b50509050806111ce5760405162461bcd60e51b81526004016100d790611b22565b505050565b60006060856001600160a01b03166323b872dd8686866040516024016111fb9392919061189f565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516112349190611783565b6000604051808303816000865af19150503d8060008114611271576040519150601f19603f3d011682016040523d82523d6000602084013e611276565b606091505b50915091508180156112a05750805115806112a05750808060200190518101906112a09190611548565b6112bc5760405162461bcd60e51b81526004016100d790611c2b565b505050505050565b6000816040516020016112d79190611783565b60405160208183030381529060405280519060200120836040516020016112fe9190611783565b6040516020818303038152906040528051906020012014905092915050565b6040518060a0016040528060006001600160a01b0316815260200160006001600160a01b03168152602001600061ffff16815260200160008152602001606081525090565b50805460018160011615610100020316600290046000825580601f1061138857506113a6565b601f0160209004906000526020600020908101906113a69190611427565b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106113ea57805160ff1916838001178555611417565b82800160010185558215611417579182015b828111156114175782518255916020019190600101906113fc565b50611423929150611427565b5090565b5b808211156114235760008155600101611428565b600082601f83011261144c578081fd5b813561145f61145a82611ccb565b611ca4565b915080825283602082850101111561147657600080fd5b8060208401602084013760009082016020015292915050565b6000602082840312156114a0578081fd5b81516114ab81611d1f565b9392505050565b600080604083850312156114c4578081fd5b82356114cf81611d1f565b946020939093013593505050565b600080600080600060a086880312156114f4578081fd5b85356114ff81611d1f565b9450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561152f578182fd5b61153b8882890161143c565b9150509295509295909350565b600060208284031215611559578081fd5b815180151581146114ab578182fd5b600060208284031215611579578081fd5b5035919050565b600060208284031215611591578081fd5b5051919050565b6000806000606084860312156115ac578283fd5b83359250602084013567ffffffffffffffff808211156115ca578384fd5b9085019060a082880312156115dd578384fd5b6115e760a0611ca4565b8235828111156115f5578586fd5b6116018982860161143c565b825250602083013582811115611615578586fd5b6116218982860161143c565b602083015250604083013560408201526060830135606082015260808301358281111561164c578586fd5b6116588982860161143c565b6080830152509497949650505050604092909201359150565b600060208284031215611682578081fd5b815167ffffffffffffffff811115611698578182fd5b8201601f810184136116a8578182fd5b80516116b661145a82611ccb565b8181528560208385010111156116ca578384fd5b6116db826020830160208601611cef565b95945050505050565b6000602082840312156116f5578081fd5b81356114ab81611d34565b600060208284031215611711578081fd5b81516114ab81611d34565b60008151808452611734816020860160208601611cef565b601f01601f19169290920160200192915050565b6bffffffffffffffffffffffff19606096871b811682529490951b909316601485015260288401919091526048830152606882015260880190565b60008251611795818460208701611cef565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6001600160a01b03968716815294909516602085015260408401929092526060830152608082015260a081019190915260c00190565b6001600160a01b0386811682528516602082015261ffff841660408201526060810183905260a0608082018190526000906104489083018461171c565b6001600160a01b0387811682528616602082015261ffff851660408201526060810184905260c06080820181905260009061188c9083018561171c565b90508260a0830152979650505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392909216825261ffff16602082015260400190565b90815260200190565b6000602082526114ab602083018461171c565b600060e0825261190f60e083018a61171c565b8281036020840152611921818a61171c565b905061ffff8816604084015286606084015285608084015282810360a084015261194b818661171c565b9150508260c083015298975050505050505050565b602080825260159082015274494e56414c49445f544f4b454e5f4144445245535360581b604082015260600190565b602080825260149082015273494e434f52524543545f414444524553535f544f60601b604082015260600190565b6020808252601490820152732727aa2fa2ac2a22a92720a62fa0a220a82a22a960611b604082015260600190565b6020808252601190820152704e4f4e5f535550504f525445445f43435960781b604082015260600190565b60208082526018908201527f54494d45534c4f545f534554544c45445f414c52454144590000000000000000604082015260600190565b6020808252601190820152700929c869ea4a48a86a8bea8b0be9082a69607b1b604082015260600190565b6020808252601190820152702727aa2fa0a727aa2422a92fa1a420a4a760791b604082015260600190565b6020808252600990820152684e6f7420574554483960b81b604082015260600190565b602080825260139082015272494e434f52524543545f4554485f56414c554560681b604082015260600190565b6020808252601590820152741051105415115497d113d154d389d517d1561254d5605a1b604082015260600190565b60208082526023908201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960408201526213115160ea1b606082015260800190565b6020808252601e908201527f43414e27545f5245504c4143455f45585445524e414c5f414441505445520000604082015260600190565b6020808252600e908201526d494e56414c49445f41434345535360901b604082015260600190565b60208082526018908201527f4f55545f4f465f534554544c454d454e545f57494e444f570000000000000000604082015260600190565b602080825260169082015275494e434f52524543545f414444524553535f46524f4d60501b604082015260600190565b60208082526024908201527f5472616e7366657248656c7065723a205452414e534645525f46524f4d5f46416040820152631253115160e21b606082015260800190565b6020808252600c908201526b1393d517d0d3d395149050d560a21b604082015260600190565b61ffff91909116815260200190565b60405181810167ffffffffffffffff81118282101715611cc357600080fd5b604052919050565b600067ffffffffffffffff821115611ce1578081fd5b50601f01601f191660200190565b60005b83811015611d0a578181015183820152602001611cf2565b83811115611d19576000848401525b50505050565b6001600160a01b03811681146113a657600080fd5b61ffff811681146113a657600080fdfea26469706673582212205202f172c634679fcb51fd16487a247059b8354edf5d2fc9225f2abafa59273464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addExternalAdapter(address,bytes32)": {
        "details": "Trigers to add new external adapter for specific `_ccy`",
        "params": {
          "_adapter": "External adapter contract address",
          "_ccy": "Short identifier of a currency"
        }
      },
      "constructor": {
        "details": "Contract constructor function."
      },
      "fullfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)": {
        "details": "External function to fullfill cross-chain settlement request. Expects to get transaction object to validate the correct settlement values on the PaymentAggregator contract level",
        "params": {
          "_ccy": "Main currency of the external adapter",
          "_txData": "Transaction object from external adapter"
        }
      },
      "getVersion()": {
        "details": "Get the version of the underlying contract",
        "returns": {
          "_0": "implementation version"
        }
      },
      "replaceExternalAdapter(address,bytes32)": {
        "details": "Trigers to replace existing external adapter for specific `_ccy`",
        "params": {
          "_adapter": "External adapter contract address",
          "_ccy": "Short identifier of a currency"
        }
      },
      "verifyPayment(address,bytes32,uint256,uint256,string)": {
        "details": "External function to verify payment by msg.sender as a part of a settlement process It could validate either a cross-chain settlment or native settlement",
        "params": {
          "_ccy": "Main payment settlement currency",
          "_counterparty": "Counterparty address",
          "_payment": "Payment amount in currency",
          "_timestamp": "Timeslot timestamp for settlement operation",
          "_txHash": "Cross-chain transfer txHash"
        }
      }
    },
    "title": "Settlement Engine contract is used in settlement operations of the Secured Finance protocol. Settlement is divided per 1 calendar day and verified by either external adapters (for cross-chain transaction) or native ETH-chain settlement. Contract linked to the PaymentAggregator contract and all External Adapters per target chain.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addExternalAdapter(address,bytes32)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "constructor": "sets contract deployer as owner of this contract",
      "fullfillSettlementRequest(bytes32,(string,string,uint256,uint256,string),bytes32)": {
        "notice": "Trigers only be external adapter for specific chain"
      },
      "replaceExternalAdapter(address,bytes32)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19412,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19417,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "currencyController",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ICurrencyController)22155"
      },
      {
        "astId": 19419,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "liquidationEngine",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ILiquidations)22625"
      },
      {
        "astId": 19421,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "paymentAggregator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPaymentAggregator)23169"
      },
      {
        "astId": 19423,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "crosschainResolver",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ICrosschainAddressResolver)21861"
      },
      {
        "astId": 19428,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "externalAdapters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 19433,
        "contract": "contracts/SettlementEngine.sol:SettlementEngine",
        "label": "settlementRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(SettlementRequest)19409_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICrosschainAddressResolver)21861": {
        "encoding": "inplace",
        "label": "contract ICrosschainAddressResolver",
        "numberOfBytes": "20"
      },
      "t_contract(ICurrencyController)22155": {
        "encoding": "inplace",
        "label": "contract ICurrencyController",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidations)22625": {
        "encoding": "inplace",
        "label": "contract ILiquidations",
        "numberOfBytes": "20"
      },
      "t_contract(IPaymentAggregator)23169": {
        "encoding": "inplace",
        "label": "contract IPaymentAggregator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(SettlementRequest)19409_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SettlementEngine.SettlementRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(SettlementRequest)19409_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SettlementRequest)19409_storage": {
        "encoding": "inplace",
        "label": "struct SettlementEngine.SettlementRequest",
        "members": [
          {
            "astId": 19400,
            "contract": "contracts/SettlementEngine.sol:SettlementEngine",
            "label": "payer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19402,
            "contract": "contracts/SettlementEngine.sol:SettlementEngine",
            "label": "receiver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19404,
            "contract": "contracts/SettlementEngine.sol:SettlementEngine",
            "label": "chainId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 19406,
            "contract": "contracts/SettlementEngine.sol:SettlementEngine",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19408,
            "contract": "contracts/SettlementEngine.sol:SettlementEngine",
            "label": "txHash",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}