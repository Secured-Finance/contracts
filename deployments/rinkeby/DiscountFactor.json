{
  "address": "0xa46bcE9eB2DbD0C76A6C4c7F581BdfC57A59c96F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "terms",
          "type": "uint256[]"
        }
      ],
      "name": "bootstrapTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "terms",
          "type": "uint256[]"
        }
      ],
      "name": "calculateDFs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "discountFactors",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "terms",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "interpolateDF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa647e90ab56a033ddd1a93463c72403279584b0f44bd04c2af1a284b150ec4e4",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xa46bcE9eB2DbD0C76A6C4c7F581BdfC57A59c96F",
    "transactionIndex": 42,
    "gasUsed": "878964",
    "logsBloom": "0x
    "blockHash": "0xef16fde4fab1fb10d19adf3cd4f7863c5bd7d6c1926b0aa1e57a12ce9314995e",
    "transactionHash": "0xa647e90ab56a033ddd1a93463c72403279584b0f44bd04c2af1a284b150ec4e4",
    "logs": [],
    "blockNumber": 10650658,
    "cumulativeGasUsed": "6884874",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c547b2e6a239b041ee2d79dd0b62b5b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"terms\",\"type\":\"uint256[]\"}],\"name\":\"bootstrapTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"terms\",\"type\":\"uint256[]\"}],\"name\":\"calculateDFs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"discountFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"terms\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"interpolateDF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"interpolateDF(uint256[],uint256[],uint256)\":{\"details\":\"Triggers to adjust discount factors by interpolating to current loan maturity\",\"params\":{\"date\":\"Date to calculate discount factors for\",\"discountFactors\":\"Discount factors array\",\"terms\":\"Array of terms\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/DiscountFactor.sol\":\"DiscountFactor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/libraries/DiscountFactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary DiscountFactor {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant BP = 10000; // basis point\\n    uint256 internal constant NON_ANNUAL_TERMS = 3;\\n\\n    function determineDF(\\n        uint256 rate,\\n        uint256 term,\\n        uint256[] memory cache,\\n        uint256 dfSum,\\n        uint256 index\\n    ) internal pure returns (uint256 df) {\\n        if (term < 365) {\\n            df = BP.mul(BP).div((BP.add(rate.mul(term).div(360))));\\n        } else if (term == 365) {\\n            df = BP.mul(BP).div((BP.add(rate)));\\n            dfSum = dfSum.add(df);\\n        } else {\\n            uint256 rateSum = (rate.mul(dfSum)).div(BP);\\n            if (rateSum > BP) {\\n                df = 0;\\n            } else {\\n                df = BP.mul(BP.sub(rate.mul(dfSum).div(BP))).div(BP.add(rate));\\n            }\\n            dfSum = dfSum.add(df);\\n        }\\n\\n        cache[index] = df;\\n\\n        return dfSum;\\n    }\\n\\n    function calculateDFs(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        require(rates.length == terms.length, \\\"INVALID_PARAMS\\\");\\n\\n        (\\n            uint256[] memory bootstrapedRates,\\n            uint256[] memory bootstrapedTerms\\n        ) = bootstrapTerms(rates, terms);\\n\\n        uint256 len = bootstrapedTerms.length;\\n        uint256[] memory dfs = new uint256[](len);\\n        uint256 dfSum;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            dfSum = determineDF(\\n                bootstrapedRates[i],\\n                bootstrapedTerms[i],\\n                dfs,\\n                dfSum,\\n                i\\n            );\\n        }\\n\\n        return (dfs, bootstrapedTerms);\\n    }\\n\\n    function maxDFs(uint256 maxTerm) internal pure returns (uint256) {\\n        return maxTerm.div(365).add(NON_ANNUAL_TERMS);\\n    }\\n\\n    struct TermBootstrapingLocalVars {\\n        uint256 extendedTerms;\\n        uint256 delta;\\n        uint256 numItems;\\n        uint256 lastKnownRate;\\n        uint256 nextKnownRate;\\n        uint256 nextKnownTerm;\\n        bool upwards;\\n        uint256 deltaRate;\\n        uint256 step;\\n    }\\n\\n    function bootstrapTerms(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 len = maxDFs(terms[terms.length - 1]);\\n\\n        uint256[] memory filledRates = new uint256[](len);\\n        uint256[] memory filledTerms = new uint256[](len);\\n        TermBootstrapingLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < terms.length.sub(1); i++) {\\n            if (terms[i] < 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n            vars.delta = terms[i + 1].sub(terms[i]);\\n\\n            if (vars.delta <= 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n\\n            vars.numItems = vars.delta.div(365);\\n            vars.lastKnownRate = rates[i];\\n\\n            if (vars.extendedTerms == 0) {\\n                filledRates[i] = vars.lastKnownRate;\\n                filledTerms[i] = terms[i];\\n            }\\n            vars.nextKnownRate = rates[i + 1];\\n            vars.nextKnownTerm = terms[i + 1];\\n            vars.upwards = vars.nextKnownRate > vars.lastKnownRate\\n                ? true\\n                : false;\\n            vars.deltaRate = vars.upwards\\n                ? vars.nextKnownRate.sub(vars.lastKnownRate)\\n                : vars.lastKnownRate.sub(vars.nextKnownRate);\\n            vars.step = vars.deltaRate.div(vars.numItems);\\n\\n            for (uint256 j = 1; j < vars.numItems; j++) {\\n                vars.extendedTerms = vars.extendedTerms.add(1);\\n\\n                uint256 newIndex = i.add(vars.extendedTerms);\\n                uint256 missedRate = vars.upwards\\n                    ? filledRates[newIndex.sub(1)].add(vars.step)\\n                    : filledRates[newIndex.sub(1)].sub(vars.step);\\n                uint256 missedTerm = terms[i].add(uint256(365).mul(j));\\n\\n                filledRates[newIndex] = missedRate;\\n                filledTerms[newIndex] = missedTerm;\\n\\n                if (j == vars.numItems.sub(1)) {\\n                    uint256 shifterIndex = newIndex.add(1);\\n\\n                    filledRates[shifterIndex] = vars.nextKnownRate;\\n                    filledTerms[shifterIndex] = vars.nextKnownTerm;\\n                }\\n            }\\n        }\\n\\n        return (filledRates, filledTerms);\\n    }\\n\\n    struct DFInterpolationLocalVars {\\n        uint256 timeDelta;\\n        uint256 termSeconds;\\n        uint256 prevTermSeconds;\\n        uint256 left;\\n        uint256 right;\\n        uint256 total;\\n    }\\n\\n    /**\\n     * @dev Triggers to adjust discount factors by interpolating to current loan maturity\\n     * @param discountFactors Discount factors array\\n     * @param terms Array of terms\\n     * @param date Date to calculate discount factors for\\n     *\\n     */\\n    function interpolateDF(\\n        uint256[] memory discountFactors,\\n        uint256[] memory terms,\\n        uint256 date\\n    ) public view returns (uint256) {\\n        DFInterpolationLocalVars memory vars;\\n        vars.timeDelta = date.sub(block.timestamp);\\n\\n        if (vars.timeDelta <= terms[0].mul(86400)) {\\n            vars.termSeconds = terms[0].mul(86400);\\n            vars.left = vars.termSeconds.sub(vars.timeDelta);\\n\\n            return\\n                (BP.mul(vars.left).add(discountFactors[0].mul(vars.timeDelta)))\\n                    .div(vars.termSeconds);\\n        } else {\\n            for (uint256 i = 1; i < terms.length; i++) {\\n                vars.termSeconds = terms[i].mul(86400);\\n                vars.prevTermSeconds = terms[i - 1].mul(86400);\\n\\n                if (\\n                    vars.prevTermSeconds < vars.timeDelta &&\\n                    vars.timeDelta <= vars.termSeconds\\n                ) {\\n                    vars.left = vars.timeDelta.sub(vars.prevTermSeconds);\\n\\n                    if (vars.left == 0) {\\n                        return discountFactors[i]; // gas savings only\\n                    }\\n\\n                    vars.right = vars.termSeconds.sub(vars.timeDelta);\\n                    if (vars.right == 0) {\\n                        return discountFactors[i];\\n                    }\\n\\n                    vars.total = vars.termSeconds.sub(vars.prevTermSeconds);\\n\\n                    return (\\n                        (discountFactors[i - 1].mul(vars.right))\\n                            .add((discountFactors[i].mul(vars.left)))\\n                            .div(vars.total)\\n                    );\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6767e46906ab5eeca1cedda8afbcc4a01658c8e08220bdacd8756fc126b650b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610ef0610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063146c086d146100505780635e1a13831461020c578063954eab791461032f575b600080fd5b6101736004803603604081101561006657600080fd5b810190602081018135600160201b81111561008057600080fd5b82018360208201111561009257600080fd5b803590602001918460208302840111600160201b831117156100b357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561010257600080fd5b82018360208201111561011457600080fd5b803590602001918460208302840111600160201b8311171561013557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610466945050505050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101b757818101518382015260200161019f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101f65781810151838201526020016101de565b5050505090500194505050505060405180910390f35b6101736004803603604081101561022257600080fd5b810190602081018135600160201b81111561023c57600080fd5b82018360208201111561024e57600080fd5b803590602001918460208302840111600160201b8311171561026f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102be57600080fd5b8201836020820111156102d057600080fd5b803590602001918460208302840111600160201b831117156102f157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506108a6945050505050565b6104546004803603606081101561034557600080fd5b810190602081018135600160201b81111561035f57600080fd5b82018360208201111561037157600080fd5b803590602001918460208302840111600160201b8311171561039257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103e157600080fd5b8201836020820111156103f357600080fd5b803590602001918460208302840111600160201b8311171561041457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506109a3915050565b60408051918252519081900360200190f35b606080600061048b8460018651038151811061047e57fe5b6020026020010151610b8c565b905060608167ffffffffffffffff811180156104a657600080fd5b506040519080825280602002602001820160405280156104d0578160200160208202803683370190505b50905060608267ffffffffffffffff811180156104ec57600080fd5b50604051908082528060200260200182016040528015610516578160200160208202803683370190505b509050610521610e15565b60005b8751610531906001610ba5565b8110156108985761016d88828151811061054757fe5b602002602001015110156105b25788818151811061056157fe5b602002602001015184828151811061057557fe5b60200260200101818152505087818151811061058d57fe5b60200260200101518382815181106105a157fe5b602002602001018181525050610890565b6105ee8882815181106105c157fe5b60200260200101518983600101815181106105d857fe5b6020026020010151610ba590919063ffffffff16565b6020830181905261016d106106095788818151811061056157fe5b602082015161061a9061016d610c02565b6040830152885189908290811061062d57fe5b60209081029190910101516060830152815161068d57816060015184828151811061065457fe5b60200260200101818152505087818151811061066c57fe5b602002602001015183828151811061068057fe5b6020026020010181815250505b88816001018151811061069c57fe5b60200260200101518260800181815250508781600101815181106106bc57fe5b60200260200101518260a001818152505081606001518260800151116106e35760006106e6565b60015b151560c0830181905261070b576080820151606083015161070691610ba5565b61071e565b6060820151608083015161071e91610ba5565b60e0830181905260408301516107349190610c02565b61010083015260015b826040015181101561088e578251610756906001610c69565b808452600090610767908490610c69565b905060008460c0015161079957610100850151610794908861078a856001610ba5565b815181106105d857fe5b6107cf565b6101008501516107cf90886107af856001610ba5565b815181106107b957fe5b6020026020010151610c6990919063ffffffff16565b905060006107ee6107e261016d86610cc3565b8d87815181106107b957fe5b9050818884815181106107fd57fe5b6020026020010181815250508087848151811061081657fe5b60209081029190910101526040860151610831906001610ba5565b841415610883576000610845846001610c69565b9050866080015189828151811061085857fe5b6020026020010181815250508660a0015188828151811061087557fe5b602002602001018181525050505b50505060010161073d565b505b600101610524565b509197909650945050505050565b60608082518451146108f0576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f504152414d5360901b604482015290519081900360640190fd5b6060806108fd8686610466565b8051919350915060608167ffffffffffffffff8111801561091d57600080fd5b50604051908082528060200260200182016040528015610947578160200160208202803683370190505b5090506000805b838110156109935761098986828151811061096557fe5b602002602001015186838151811061097957fe5b6020026020010151858585610d1c565b915060010161094e565b5090989297509195505050505050565b60006109ad610e63565b6109b78342610ba5565b815283516109e590620151809086906000906109cf57fe5b6020026020010151610cc390919063ffffffff16565b815111610a6257610a0062015180856000815181106109cf57fe5b602082018190528151610a139190610ba5565b816060018181525050610a5a8160200151610a54610a3c8460000151896000815181106109cf57fe5b6060850151610a4e9061271090610cc3565b90610c69565b90610c02565b915050610b85565b60015b8451811015610b8257610a81620151808683815181106109cf57fe5b826020018181525050610aa0620151808660018403815181106109cf57fe5b604083018190528251118015610abb57506020820151825111155b15610b7a5760408201518251610ad091610ba5565b60608301819052610af857858181518110610ae757fe5b602002602001015192505050610b85565b81516020830151610b0891610ba5565b60808301819052610b1f57858181518110610ae757fe5b60408201516020830151610b3291610ba5565b8260a0018181525050610b718260a00151610a54610b5a85606001518a86815181106109cf57fe5b610a4e86608001518b60018803815181106109cf57fe5b92505050610b85565b600101610a65565b50505b9392505050565b6000610b9f6003610a4e8461016d610c02565b92915050565b600082821115610bfc576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211610c58576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c6157fe5b049392505050565b600082820183811015610b85576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082610cd257506000610b9f565b82820282848281610cdf57fe5b0414610b855760405162461bcd60e51b8152600401808060200182810382526021815260200180610e9a6021913960400191505060405180910390fd5b600061016d851015610d5a57610d53610d47610d3e610168610a548a8a610cc3565b61271090610c69565b610a5461271080610cc3565b9050610df3565b8461016d1415610d8657610d73610d4761271088610c69565b9050610d7f8382610c69565b9250610df3565b6000610d98612710610a548987610cc3565b9050612710811115610dad5760009150610de5565b610de2610dbc61271089610c69565b610a54610dd9610dd0612710838d8b610cc3565b61271090610ba5565b61271090610cc3565b91505b610def8483610c69565b9350505b80848381518110610e0057fe5b60209081029190910101525090949350505050565b60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207415062ac27205399bdffc2789bc15d05014904406f2bde551323658acbcfd8264736f6c634300060c0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063146c086d146100505780635e1a13831461020c578063954eab791461032f575b600080fd5b6101736004803603604081101561006657600080fd5b810190602081018135600160201b81111561008057600080fd5b82018360208201111561009257600080fd5b803590602001918460208302840111600160201b831117156100b357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561010257600080fd5b82018360208201111561011457600080fd5b803590602001918460208302840111600160201b8311171561013557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610466945050505050565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156101b757818101518382015260200161019f565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156101f65781810151838201526020016101de565b5050505090500194505050505060405180910390f35b6101736004803603604081101561022257600080fd5b810190602081018135600160201b81111561023c57600080fd5b82018360208201111561024e57600080fd5b803590602001918460208302840111600160201b8311171561026f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102be57600080fd5b8201836020820111156102d057600080fd5b803590602001918460208302840111600160201b831117156102f157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506108a6945050505050565b6104546004803603606081101561034557600080fd5b810190602081018135600160201b81111561035f57600080fd5b82018360208201111561037157600080fd5b803590602001918460208302840111600160201b8311171561039257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156103e157600080fd5b8201836020820111156103f357600080fd5b803590602001918460208302840111600160201b8311171561041457600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955050913592506109a3915050565b60408051918252519081900360200190f35b606080600061048b8460018651038151811061047e57fe5b6020026020010151610b8c565b905060608167ffffffffffffffff811180156104a657600080fd5b506040519080825280602002602001820160405280156104d0578160200160208202803683370190505b50905060608267ffffffffffffffff811180156104ec57600080fd5b50604051908082528060200260200182016040528015610516578160200160208202803683370190505b509050610521610e15565b60005b8751610531906001610ba5565b8110156108985761016d88828151811061054757fe5b602002602001015110156105b25788818151811061056157fe5b602002602001015184828151811061057557fe5b60200260200101818152505087818151811061058d57fe5b60200260200101518382815181106105a157fe5b602002602001018181525050610890565b6105ee8882815181106105c157fe5b60200260200101518983600101815181106105d857fe5b6020026020010151610ba590919063ffffffff16565b6020830181905261016d106106095788818151811061056157fe5b602082015161061a9061016d610c02565b6040830152885189908290811061062d57fe5b60209081029190910101516060830152815161068d57816060015184828151811061065457fe5b60200260200101818152505087818151811061066c57fe5b602002602001015183828151811061068057fe5b6020026020010181815250505b88816001018151811061069c57fe5b60200260200101518260800181815250508781600101815181106106bc57fe5b60200260200101518260a001818152505081606001518260800151116106e35760006106e6565b60015b151560c0830181905261070b576080820151606083015161070691610ba5565b61071e565b6060820151608083015161071e91610ba5565b60e0830181905260408301516107349190610c02565b61010083015260015b826040015181101561088e578251610756906001610c69565b808452600090610767908490610c69565b905060008460c0015161079957610100850151610794908861078a856001610ba5565b815181106105d857fe5b6107cf565b6101008501516107cf90886107af856001610ba5565b815181106107b957fe5b6020026020010151610c6990919063ffffffff16565b905060006107ee6107e261016d86610cc3565b8d87815181106107b957fe5b9050818884815181106107fd57fe5b6020026020010181815250508087848151811061081657fe5b60209081029190910101526040860151610831906001610ba5565b841415610883576000610845846001610c69565b9050866080015189828151811061085857fe5b6020026020010181815250508660a0015188828151811061087557fe5b602002602001018181525050505b50505060010161073d565b505b600101610524565b509197909650945050505050565b60608082518451146108f0576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f504152414d5360901b604482015290519081900360640190fd5b6060806108fd8686610466565b8051919350915060608167ffffffffffffffff8111801561091d57600080fd5b50604051908082528060200260200182016040528015610947578160200160208202803683370190505b5090506000805b838110156109935761098986828151811061096557fe5b602002602001015186838151811061097957fe5b6020026020010151858585610d1c565b915060010161094e565b5090989297509195505050505050565b60006109ad610e63565b6109b78342610ba5565b815283516109e590620151809086906000906109cf57fe5b6020026020010151610cc390919063ffffffff16565b815111610a6257610a0062015180856000815181106109cf57fe5b602082018190528151610a139190610ba5565b816060018181525050610a5a8160200151610a54610a3c8460000151896000815181106109cf57fe5b6060850151610a4e9061271090610cc3565b90610c69565b90610c02565b915050610b85565b60015b8451811015610b8257610a81620151808683815181106109cf57fe5b826020018181525050610aa0620151808660018403815181106109cf57fe5b604083018190528251118015610abb57506020820151825111155b15610b7a5760408201518251610ad091610ba5565b60608301819052610af857858181518110610ae757fe5b602002602001015192505050610b85565b81516020830151610b0891610ba5565b60808301819052610b1f57858181518110610ae757fe5b60408201516020830151610b3291610ba5565b8260a0018181525050610b718260a00151610a54610b5a85606001518a86815181106109cf57fe5b610a4e86608001518b60018803815181106109cf57fe5b92505050610b85565b600101610a65565b50505b9392505050565b6000610b9f6003610a4e8461016d610c02565b92915050565b600082821115610bfc576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211610c58576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c6157fe5b049392505050565b600082820183811015610b85576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082610cd257506000610b9f565b82820282848281610cdf57fe5b0414610b855760405162461bcd60e51b8152600401808060200182810382526021815260200180610e9a6021913960400191505060405180910390fd5b600061016d851015610d5a57610d53610d47610d3e610168610a548a8a610cc3565b61271090610c69565b610a5461271080610cc3565b9050610df3565b8461016d1415610d8657610d73610d4761271088610c69565b9050610d7f8382610c69565b9250610df3565b6000610d98612710610a548987610cc3565b9050612710811115610dad5760009150610de5565b610de2610dbc61271089610c69565b610a54610dd9610dd0612710838d8b610cc3565b61271090610ba5565b61271090610cc3565b91505b610def8483610c69565b9350505b80848381518110610e0057fe5b60209081029190910101525090949350505050565b60405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b6040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152509056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212207415062ac27205399bdffc2789bc15d05014904406f2bde551323658acbcfd8264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "interpolateDF(uint256[],uint256[],uint256)": {
        "details": "Triggers to adjust discount factors by interpolating to current loan maturity",
        "params": {
          "date": "Date to calculate discount factors for",
          "discountFactors": "Discount factors array",
          "terms": "Array of terms"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}