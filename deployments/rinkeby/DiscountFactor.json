{
  "address": "0xfAF2286CC49f287EBA1D1C7584fA2Cc18959D7fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "terms",
          "type": "uint256[]"
        }
      ],
      "name": "bootstrapTerms",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "rates",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "terms",
          "type": "uint256[]"
        }
      ],
      "name": "calculateDFs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "discountFactors",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "terms",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "interpolateDF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf3b295d2de6e88ab6cb40b04edeebbb37c938645aca3e5206694d992f1bfadd5",
  "receipt": {
    "to": null,
    "from": "0xDBA767F3DFF3835BEf5dE1eDEe91A9901402AB21",
    "contractAddress": "0xfAF2286CC49f287EBA1D1C7584fA2Cc18959D7fe",
    "transactionIndex": 28,
    "gasUsed": "827203",
    "logsBloom": "0x
    "blockHash": "0x0165d3c7e71b8630e7aa4c0511751ef2eb87e716fffd16c540176648a1ad0d44",
    "transactionHash": "0xf3b295d2de6e88ab6cb40b04edeebbb37c938645aca3e5206694d992f1bfadd5",
    "logs": [],
    "blockNumber": 10907119,
    "cumulativeGasUsed": "15597359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "0fd5a5d025de86963d36bd38be3b6dce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"terms\",\"type\":\"uint256[]\"}],\"name\":\"bootstrapTerms\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rates\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"terms\",\"type\":\"uint256[]\"}],\"name\":\"calculateDFs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"discountFactors\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"terms\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"interpolateDF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"interpolateDF(uint256[],uint256[],uint256)\":{\"details\":\"Triggers to adjust discount factors by interpolating to current loan maturity\",\"params\":{\"date\":\"Date to calculate discount factors for\",\"discountFactors\":\"Discount factors array\",\"terms\":\"Array of terms\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/DiscountFactor.sol\":\"DiscountFactor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/DiscountFactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nlibrary DiscountFactor {\\n    uint256 internal constant BP = 10000; // basis point\\n    uint256 internal constant NON_ANNUAL_TERMS = 3;\\n\\n    function determineDF(\\n        uint256 rate,\\n        uint256 term,\\n        uint256[] memory cache,\\n        uint256 dfSum,\\n        uint256 index\\n    ) internal pure returns (uint256 df) {\\n        if (term < 365) {\\n            df = (BP * BP) / (BP + ((rate * term) / 360));\\n        } else if (term == 365) {\\n            df = (BP * BP) / ((BP + rate));\\n            dfSum = dfSum + df;\\n        } else {\\n            uint256 rateSum = (rate * dfSum) / BP;\\n            if (rateSum > BP) {\\n                df = 0;\\n            } else {\\n                df = (BP * (BP - ((rate * dfSum) / BP))) / (BP + rate);\\n            }\\n            dfSum = dfSum + df;\\n        }\\n\\n        cache[index] = df;\\n\\n        return dfSum;\\n    }\\n\\n    function calculateDFs(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        require(rates.length == terms.length, \\\"INVALID_PARAMS\\\");\\n\\n        (uint256[] memory bootstrapedRates, uint256[] memory bootstrapedTerms) = bootstrapTerms(\\n            rates,\\n            terms\\n        );\\n\\n        uint256 len = bootstrapedTerms.length;\\n        uint256[] memory dfs = new uint256[](len);\\n        uint256 dfSum;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            dfSum = determineDF(bootstrapedRates[i], bootstrapedTerms[i], dfs, dfSum, i);\\n        }\\n\\n        return (dfs, bootstrapedTerms);\\n    }\\n\\n    function maxDFs(uint256 maxTerm) internal pure returns (uint256) {\\n        return maxTerm / 365 + NON_ANNUAL_TERMS;\\n    }\\n\\n    struct TermBootstrapingLocalVars {\\n        uint256 extendedTerms;\\n        uint256 delta;\\n        uint256 numItems;\\n        uint256 lastKnownRate;\\n        uint256 nextKnownRate;\\n        uint256 nextKnownTerm;\\n        bool upwards;\\n        uint256 deltaRate;\\n        uint256 step;\\n    }\\n\\n    function bootstrapTerms(uint256[] memory rates, uint256[] memory terms)\\n        public\\n        pure\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        uint256 len = maxDFs(terms[terms.length - 1]);\\n\\n        uint256[] memory filledRates = new uint256[](len);\\n        uint256[] memory filledTerms = new uint256[](len);\\n        TermBootstrapingLocalVars memory vars;\\n\\n        for (uint256 i = 0; i < terms.length - 1; i++) {\\n            if (terms[i] < 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n            vars.delta = terms[i + 1] - terms[i];\\n\\n            if (vars.delta <= 365) {\\n                filledRates[i] = rates[i];\\n                filledTerms[i] = terms[i];\\n                continue;\\n            }\\n\\n            vars.numItems = vars.delta / 365;\\n            vars.lastKnownRate = rates[i];\\n\\n            if (vars.extendedTerms == 0) {\\n                filledRates[i] = vars.lastKnownRate;\\n                filledTerms[i] = terms[i];\\n            }\\n            vars.nextKnownRate = rates[i + 1];\\n            vars.nextKnownTerm = terms[i + 1];\\n            vars.upwards = vars.nextKnownRate > vars.lastKnownRate ? true : false;\\n            vars.deltaRate = vars.upwards\\n                ? vars.nextKnownRate - vars.lastKnownRate\\n                : vars.lastKnownRate - vars.nextKnownRate;\\n            vars.step = vars.deltaRate / vars.numItems;\\n\\n            for (uint256 j = 1; j < vars.numItems; j++) {\\n                vars.extendedTerms = vars.extendedTerms + 1;\\n\\n                uint256 newIndex = i + vars.extendedTerms;\\n                uint256 missedRate = vars.upwards\\n                    ? filledRates[newIndex - 1] + vars.step\\n                    : filledRates[newIndex - 1] - vars.step;\\n                uint256 missedTerm = terms[i] + uint256(365) * j;\\n\\n                filledRates[newIndex] = missedRate;\\n                filledTerms[newIndex] = missedTerm;\\n\\n                if (j == vars.numItems - 1) {\\n                    uint256 shifterIndex = newIndex + 1;\\n\\n                    filledRates[shifterIndex] = vars.nextKnownRate;\\n                    filledTerms[shifterIndex] = vars.nextKnownTerm;\\n                }\\n            }\\n        }\\n\\n        return (filledRates, filledTerms);\\n    }\\n\\n    struct DFInterpolationLocalVars {\\n        uint256 timeDelta;\\n        uint256 termSeconds;\\n        uint256 prevTermSeconds;\\n        uint256 left;\\n        uint256 right;\\n        uint256 total;\\n    }\\n\\n    /**\\n     * @dev Triggers to adjust discount factors by interpolating to current loan maturity\\n     * @param discountFactors Discount factors array\\n     * @param terms Array of terms\\n     * @param date Date to calculate discount factors for\\n     *\\n     */\\n    function interpolateDF(\\n        uint256[] memory discountFactors,\\n        uint256[] memory terms,\\n        uint256 date\\n    ) public view returns (uint256) {\\n        DFInterpolationLocalVars memory vars;\\n        vars.timeDelta = date - block.timestamp;\\n\\n        if (vars.timeDelta <= terms[0] * 86400) {\\n            vars.termSeconds = terms[0] * 86400;\\n            vars.left = vars.termSeconds - vars.timeDelta;\\n\\n            return (BP * vars.left + (discountFactors[0] * vars.timeDelta)) / (vars.termSeconds);\\n        } else {\\n            for (uint256 i = 1; i < terms.length; i++) {\\n                vars.termSeconds = terms[i] * 86400;\\n                vars.prevTermSeconds = terms[i - 1] * 86400;\\n\\n                if (vars.prevTermSeconds < vars.timeDelta && vars.timeDelta <= vars.termSeconds) {\\n                    vars.left = vars.timeDelta - vars.prevTermSeconds;\\n\\n                    if (vars.left == 0) {\\n                        return discountFactors[i]; // gas savings only\\n                    }\\n\\n                    vars.right = vars.termSeconds - vars.timeDelta;\\n                    if (vars.right == 0) {\\n                        return discountFactors[i];\\n                    }\\n\\n                    vars.total = vars.termSeconds - vars.prevTermSeconds;\\n\\n                    return\\n                        (discountFactors[i - 1] * vars.right + discountFactors[i] * vars.left) /\\n                        vars.total;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7bf2f695544b673126107e9374251de4a229008113f1ca4cc72b565390106c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610dff61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063146c086d146100505780635e1a13831461007a578063954eab791461008d575b600080fd5b61006361005e366004610bd8565b6100ae565b604051610071929190610c77565b60405180910390f35b610063610088366004610bd8565b610603565b6100a061009b366004610ca5565b610716565b604051908152602001610071565b60608060006100e284600186516100c59190610d28565b815181106100d5576100d5610d3f565b60200260200101516109d0565b905060008167ffffffffffffffff8111156100ff576100ff610b27565b604051908082528060200260200182016040528015610128578160200160208202803683370190505b50905060008267ffffffffffffffff81111561014657610146610b27565b60405190808252806020026020018201604052801561016f578160200160208202803683370190505b5090506101c360405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b60005b600188516101d49190610d28565b8110156105f55761016d8882815181106101f0576101f0610d3f565b602002602001015110156102735788818151811061021057610210610d3f565b602002602001015184828151811061022a5761022a610d3f565b60200260200101818152505087818151811061024857610248610d3f565b602002602001015183828151811061026257610262610d3f565b6020026020010181815250506105e3565b87818151811061028557610285610d3f565b60200260200101518882600161029b9190610d55565b815181106102ab576102ab610d3f565b60200260200101516102bd9190610d28565b6020830181905261016d106102de5788818151811061021057610210610d3f565b61016d82602001516102f09190610d6d565b6040830152885189908290811061030957610309610d3f565b60209081029190910101516060830152815161037b57816060015184828151811061033657610336610d3f565b60200260200101818152505087818151811061035457610354610d3f565b602002602001015183828151811061036e5761036e610d3f565b6020026020010181815250505b88610387826001610d55565b8151811061039757610397610d3f565b60209081029190910101516080830152876103b3826001610d55565b815181106103c3576103c3610d3f565b60200260200101518260a001818152505081606001518260800151116103ea5760006103ed565b60015b151560c08301819052610413578160800151826060015161040e9190610d28565b610427565b816060015182608001516104279190610d28565b60e08301819052604083015161043c91610d6d565b61010083015260015b82604001518110156105e157825161045e906001610d55565b80845260009061046e9084610d55565b905060008460c001516104b4576101008501518761048d600185610d28565b8151811061049d5761049d610d3f565b60200260200101516104af9190610d28565b6104e8565b610100850151876104c6600185610d28565b815181106104d6576104d6610d3f565b60200260200101516104e89190610d55565b905060006104f88461016d610d8f565b8c868151811061050a5761050a610d3f565b602002602001015161051c9190610d55565b90508188848151811061053157610531610d3f565b6020026020010181815250508087848151811061055057610550610d3f565b6020026020010181815250506001866040015161056d9190610d28565b8414156105cb576000610581846001610d55565b9050866080015189828151811061059a5761059a610d3f565b6020026020010181815250508660a001518882815181106105bd576105bd610d3f565b602002602001018181525050505b50505080806105d990610dae565b915050610445565b505b806105ed81610dae565b9150506101c6565b509197909650945050505050565b606080825184511461064c5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f504152414d5360901b604482015260640160405180910390fd5b60008061065986866100ae565b8051919350915060008167ffffffffffffffff81111561067b5761067b610b27565b6040519080825280602002602001820160405280156106a4578160200160208202803683370190505b5090506000805b83811015610706576106f28682815181106106c8576106c8610d3f565b60200260200101518683815181106106e2576106e2610d3f565b60200260200101518585856109f0565b9150806106fe81610dae565b9150506106ab565b5090989297509195505050505050565b60006107516040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61075b4284610d28565b81528351849060009061077057610770610d3f565b6020026020010151620151806107869190610d8f565b81511161082657836000815181106107a0576107a0610d3f565b6020026020010151620151806107b69190610d8f565b6020820181905281516107c891610d28565b606082015260208101518151865187906000906107e7576107e7610d3f565b60200260200101516107f99190610d8f565b606083015161080a90612710610d8f565b6108149190610d55565b61081e9190610d6d565b9150506109c9565b60015b84518110156109c65784818151811061084457610844610d3f565b60200260200101516201518061085a9190610d8f565b60208301528461086b600183610d28565b8151811061087b5761087b610d3f565b6020026020010151620151806108919190610d8f565b6040830181905282511180156108ac57506020820151825111155b156109b457604082015182516108c29190610d28565b606083018190526108f0578581815181106108df576108df610d3f565b6020026020010151925050506109c9565b815160208301516109019190610d28565b6080830181905261091e578581815181106108df576108df610d3f565b816040015182602001516109329190610d28565b60a083018190526060830151875188908490811061095257610952610d3f565b60200260200101516109649190610d8f565b608084015188610975600186610d28565b8151811061098557610985610d3f565b60200260200101516109979190610d8f565b6109a19190610d55565b6109ab9190610d6d565b925050506109c9565b806109be81610dae565b915050610829565b50505b9392505050565b600060036109e061016d84610d6d565b6109ea9190610d55565b92915050565b600061016d851015610a3c57610168610a098688610d8f565b610a139190610d6d565b610a1f90612710610d55565b610a2b61271080610d8f565b610a359190610d6d565b9050610aff565b8461016d1415610a7b57610a5286612710610d55565b610a5e61271080610d8f565b610a689190610d6d565b9050610a748184610d55565b9250610aff565b6000612710610a8a8589610d8f565b610a949190610d6d565b9050612710811115610aa95760009150610af1565b610ab587612710610d55565b612710610ac2868a610d8f565b610acc9190610d6d565b610ad890612710610d28565b610ae490612710610d8f565b610aee9190610d6d565b91505b610afb8285610d55565b9350505b80848381518110610b1257610b12610d3f565b60209081029190910101525090949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b4e57600080fd5b8135602067ffffffffffffffff80831115610b6b57610b6b610b27565b8260051b604051601f19603f83011681018181108482111715610b9057610b90610b27565b604052938452858101830193838101925087851115610bae57600080fd5b83870191505b84821015610bcd57813583529183019190830190610bb4565b979650505050505050565b60008060408385031215610beb57600080fd5b823567ffffffffffffffff80821115610c0357600080fd5b610c0f86838701610b3d565b93506020850135915080821115610c2557600080fd5b50610c3285828601610b3d565b9150509250929050565b600081518084526020808501945080840160005b83811015610c6c57815187529582019590820190600101610c50565b509495945050505050565b604081526000610c8a6040830185610c3c565b8281036020840152610c9c8185610c3c565b95945050505050565b600080600060608486031215610cba57600080fd5b833567ffffffffffffffff80821115610cd257600080fd5b610cde87838801610b3d565b94506020860135915080821115610cf457600080fd5b50610d0186828701610b3d565b925050604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b600082821015610d3a57610d3a610d12565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115610d6857610d68610d12565b500190565b600082610d8a57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610da957610da9610d12565b500290565b6000600019821415610dc257610dc2610d12565b506001019056fea26469706673582212206d1af975b0faf25c5f47b915834ba8703e959f188ed1da7b30e41da9e96c81e064736f6c63430008090033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063146c086d146100505780635e1a13831461007a578063954eab791461008d575b600080fd5b61006361005e366004610bd8565b6100ae565b604051610071929190610c77565b60405180910390f35b610063610088366004610bd8565b610603565b6100a061009b366004610ca5565b610716565b604051908152602001610071565b60608060006100e284600186516100c59190610d28565b815181106100d5576100d5610d3f565b60200260200101516109d0565b905060008167ffffffffffffffff8111156100ff576100ff610b27565b604051908082528060200260200182016040528015610128578160200160208202803683370190505b50905060008267ffffffffffffffff81111561014657610146610b27565b60405190808252806020026020018201604052801561016f578160200160208202803683370190505b5090506101c360405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600081525090565b60005b600188516101d49190610d28565b8110156105f55761016d8882815181106101f0576101f0610d3f565b602002602001015110156102735788818151811061021057610210610d3f565b602002602001015184828151811061022a5761022a610d3f565b60200260200101818152505087818151811061024857610248610d3f565b602002602001015183828151811061026257610262610d3f565b6020026020010181815250506105e3565b87818151811061028557610285610d3f565b60200260200101518882600161029b9190610d55565b815181106102ab576102ab610d3f565b60200260200101516102bd9190610d28565b6020830181905261016d106102de5788818151811061021057610210610d3f565b61016d82602001516102f09190610d6d565b6040830152885189908290811061030957610309610d3f565b60209081029190910101516060830152815161037b57816060015184828151811061033657610336610d3f565b60200260200101818152505087818151811061035457610354610d3f565b602002602001015183828151811061036e5761036e610d3f565b6020026020010181815250505b88610387826001610d55565b8151811061039757610397610d3f565b60209081029190910101516080830152876103b3826001610d55565b815181106103c3576103c3610d3f565b60200260200101518260a001818152505081606001518260800151116103ea5760006103ed565b60015b151560c08301819052610413578160800151826060015161040e9190610d28565b610427565b816060015182608001516104279190610d28565b60e08301819052604083015161043c91610d6d565b61010083015260015b82604001518110156105e157825161045e906001610d55565b80845260009061046e9084610d55565b905060008460c001516104b4576101008501518761048d600185610d28565b8151811061049d5761049d610d3f565b60200260200101516104af9190610d28565b6104e8565b610100850151876104c6600185610d28565b815181106104d6576104d6610d3f565b60200260200101516104e89190610d55565b905060006104f88461016d610d8f565b8c868151811061050a5761050a610d3f565b602002602001015161051c9190610d55565b90508188848151811061053157610531610d3f565b6020026020010181815250508087848151811061055057610550610d3f565b6020026020010181815250506001866040015161056d9190610d28565b8414156105cb576000610581846001610d55565b9050866080015189828151811061059a5761059a610d3f565b6020026020010181815250508660a001518882815181106105bd576105bd610d3f565b602002602001018181525050505b50505080806105d990610dae565b915050610445565b505b806105ed81610dae565b9150506101c6565b509197909650945050505050565b606080825184511461064c5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f504152414d5360901b604482015260640160405180910390fd5b60008061065986866100ae565b8051919350915060008167ffffffffffffffff81111561067b5761067b610b27565b6040519080825280602002602001820160405280156106a4578160200160208202803683370190505b5090506000805b83811015610706576106f28682815181106106c8576106c8610d3f565b60200260200101518683815181106106e2576106e2610d3f565b60200260200101518585856109f0565b9150806106fe81610dae565b9150506106ab565b5090989297509195505050505050565b60006107516040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61075b4284610d28565b81528351849060009061077057610770610d3f565b6020026020010151620151806107869190610d8f565b81511161082657836000815181106107a0576107a0610d3f565b6020026020010151620151806107b69190610d8f565b6020820181905281516107c891610d28565b606082015260208101518151865187906000906107e7576107e7610d3f565b60200260200101516107f99190610d8f565b606083015161080a90612710610d8f565b6108149190610d55565b61081e9190610d6d565b9150506109c9565b60015b84518110156109c65784818151811061084457610844610d3f565b60200260200101516201518061085a9190610d8f565b60208301528461086b600183610d28565b8151811061087b5761087b610d3f565b6020026020010151620151806108919190610d8f565b6040830181905282511180156108ac57506020820151825111155b156109b457604082015182516108c29190610d28565b606083018190526108f0578581815181106108df576108df610d3f565b6020026020010151925050506109c9565b815160208301516109019190610d28565b6080830181905261091e578581815181106108df576108df610d3f565b816040015182602001516109329190610d28565b60a083018190526060830151875188908490811061095257610952610d3f565b60200260200101516109649190610d8f565b608084015188610975600186610d28565b8151811061098557610985610d3f565b60200260200101516109979190610d8f565b6109a19190610d55565b6109ab9190610d6d565b925050506109c9565b806109be81610dae565b915050610829565b50505b9392505050565b600060036109e061016d84610d6d565b6109ea9190610d55565b92915050565b600061016d851015610a3c57610168610a098688610d8f565b610a139190610d6d565b610a1f90612710610d55565b610a2b61271080610d8f565b610a359190610d6d565b9050610aff565b8461016d1415610a7b57610a5286612710610d55565b610a5e61271080610d8f565b610a689190610d6d565b9050610a748184610d55565b9250610aff565b6000612710610a8a8589610d8f565b610a949190610d6d565b9050612710811115610aa95760009150610af1565b610ab587612710610d55565b612710610ac2868a610d8f565b610acc9190610d6d565b610ad890612710610d28565b610ae490612710610d8f565b610aee9190610d6d565b91505b610afb8285610d55565b9350505b80848381518110610b1257610b12610d3f565b60209081029190910101525090949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b4e57600080fd5b8135602067ffffffffffffffff80831115610b6b57610b6b610b27565b8260051b604051601f19603f83011681018181108482111715610b9057610b90610b27565b604052938452858101830193838101925087851115610bae57600080fd5b83870191505b84821015610bcd57813583529183019190830190610bb4565b979650505050505050565b60008060408385031215610beb57600080fd5b823567ffffffffffffffff80821115610c0357600080fd5b610c0f86838701610b3d565b93506020850135915080821115610c2557600080fd5b50610c3285828601610b3d565b9150509250929050565b600081518084526020808501945080840160005b83811015610c6c57815187529582019590820190600101610c50565b509495945050505050565b604081526000610c8a6040830185610c3c565b8281036020840152610c9c8185610c3c565b95945050505050565b600080600060608486031215610cba57600080fd5b833567ffffffffffffffff80821115610cd257600080fd5b610cde87838801610b3d565b94506020860135915080821115610cf457600080fd5b50610d0186828701610b3d565b925050604084013590509250925092565b634e487b7160e01b600052601160045260246000fd5b600082821015610d3a57610d3a610d12565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115610d6857610d68610d12565b500190565b600082610d8a57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610da957610da9610d12565b500290565b6000600019821415610dc257610dc2610d12565b506001019056fea26469706673582212206d1af975b0faf25c5f47b915834ba8703e959f188ed1da7b30e41da9e96c81e064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "interpolateDF(uint256[],uint256[],uint256)": {
        "details": "Triggers to adjust discount factors by interpolating to current loan maturity",
        "params": {
          "date": "Date to calculate discount factors for",
          "discountFactors": "Discount factors array",
          "terms": "Array of terms"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}