{
  "address": "0x2938Fcec0Ba1633a35692Fd0863a2dCe6D8F6b33",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "name": "CcyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isCollateral",
          "type": "bool"
        }
      ],
      "name": "CcyCollateralUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "name": "CcySupportUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "haircut",
          "type": "uint256"
        }
      ],
      "name": "HaircutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minMargin",
          "type": "uint256"
        }
      ],
      "name": "MinMarginUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secondCcy",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secondCcy",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "convertBulkToETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amountETH",
          "type": "uint256"
        }
      ],
      "name": "convertFromETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertToETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "currencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "ethDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getHaircut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getHistoricalETHPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getHistoricalUSDPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLastETHPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getLastUSDPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "getMinMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "haircuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isCollateral",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        }
      ],
      "name": "isSupportedCcy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last_ccy_index",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_priceFeedAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isEthPriceFeed",
          "type": "bool"
        }
      ],
      "name": "linkPriceFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "minMargins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isEthPriceFeed",
          "type": "bool"
        }
      ],
      "name": "removePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_ethPriceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_haircut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "supportCurrency",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supportedCurrencies",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_haircut",
          "type": "uint256"
        }
      ],
      "name": "updateCcyHaircut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "updateCollateralSupport",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_isSupported",
          "type": "bool"
        }
      ],
      "name": "updateCurrencySupport",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_minMargin",
          "type": "uint256"
        }
      ],
      "name": "updateMinMargin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usdDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x702666caa4ca942043ad584af88c020df5281f5b0cceab1c29433ba2b3783670",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0x2938Fcec0Ba1633a35692Fd0863a2dCe6D8F6b33",
    "transactionIndex": 26,
    "gasUsed": "1754830",
    "logsBloom": "0x
    "blockHash": "0xe3ae641c529fc8099808b9bafd47f6874bc1ec8db69d8bc961b3528e128136ce",
    "transactionHash": "0x702666caa4ca942043ad584af88c020df5281f5b0cceab1c29433ba2b3783670",
    "logs": [],
    "blockNumber": 10650593,
    "cumulativeGasUsed": "11662148",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c547b2e6a239b041ee2d79dd0b62b5b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"name\":\"CcyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isCollateral\",\"type\":\"bool\"}],\"name\":\"CcyCollateralUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"name\":\"CcySupportUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"haircut\",\"type\":\"uint256\"}],\"name\":\"HaircutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minMargin\",\"type\":\"uint256\"}],\"name\":\"MinMarginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secondCcy\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secondCcy\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"convertBulkToETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amountETH\",\"type\":\"uint256\"}],\"name\":\"convertFromETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"ethDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getHaircut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalUSDPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLastETHPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getLastUSDPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"getMinMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"haircuts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"}],\"name\":\"isSupportedCcy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_ccy_index\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isEthPriceFeed\",\"type\":\"bool\"}],\"name\":\"linkPriceFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"minMargins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isEthPriceFeed\",\"type\":\"bool\"}],\"name\":\"removePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_ethPriceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_haircut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"supportCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportedCurrencies\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_haircut\",\"type\":\"uint256\"}],\"name\":\"updateCcyHaircut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"updateCollateralSupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_isSupported\",\"type\":\"bool\"}],\"name\":\"updateCurrencySupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minMargin\",\"type\":\"uint256\"}],\"name\":\"updateMinMargin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usdDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Currency Controller contract is responsible for managing supported currencies in Secured Finance Protocol Contract links new currencies to ETH Chainlink price feeds, without existing price feed contract owner is not able to add a new currency into the protocol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Lending Market Controller Constructor.\"},\"convertBulkToETH(bytes32,uint256[])\":{\"details\":\"Triggers to get converted amounts of currency to ETH.\",\"params\":{\"_amounts\":\"Array with amounts of funds to be converted\",\"_ccy\":\"Currency that has to be convered to ETH\"}},\"convertFromETH(bytes32,uint256)\":{\"details\":\"Triggers to convert ETH amount of funds to specified currency.\",\"params\":{\"_amountETH\":\"Amount of funds in ETH to be converted\",\"_ccy\":\"Currency that has to be convered from ETH\"}},\"convertToETH(bytes32,uint256)\":{\"details\":\"Triggers to get converted amount of currency in ETH.\",\"params\":{\"_amount\":\"Amount of funds to be converted\",\"_ccy\":\"Currency that has to be convered to ETH\"}},\"getChainId(bytes32)\":{\"details\":\"Triggers to get chainId for a specific currency. Chain ID is a unique identifier of another chain like Bitcoin, Filecoin, etc.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getHaircut(bytes32)\":{\"details\":\"Triggers to get haircut ratio for specific currency. Haircut is used in bilateral netting cross-calculation.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"getHistoricalETHPrice(bytes32,uint80)\":{\"details\":\"Triggers to get historical price in ETH for selected currency.\",\"params\":{\"_ccy\":\"Currency\",\"_roundId\":\"RoundId\"}},\"getHistoricalUSDPrice(bytes32,uint80)\":{\"details\":\"Triggers to get historical price in USD for selected currency.\",\"params\":{\"_ccy\":\"Currency\",\"_roundId\":\"RoundId\"}},\"getLastETHPrice(bytes32)\":{\"details\":\"Triggers to get last price in ETH for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getLastUSDPrice(bytes32)\":{\"details\":\"Triggers to get last price in USD for selected currency.\",\"params\":{\"_ccy\":\"Currency\"}},\"getMinMargin(bytes32)\":{\"details\":\"Triggers to get minimal margin percentage for specific currency.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"isSupportedCcy(bytes32)\":{\"details\":\"Triggers to get if specified currency is supported.\",\"params\":{\"_ccy\":\"Currency short ticket\"}},\"linkPriceFeed(bytes32,address,bool)\":{\"details\":\"Links the contract to existing chainlink price feed.\",\"params\":{\"_ccy\":\"Specified currency short code\",\"_isEthPriceFeed\":\"Boolean for price feed with ETH price\",\"_priceFeedAddr\":\"Chainlink price feed contract address\"}},\"removePriceFeed(bytes32,bool)\":{\"details\":\"Triggers to remove existing chainlink price feed.\",\"params\":{\"_ccy\":\"Specified currency\",\"_isEthPriceFeed\":\"Boolean for price feed with ETH price\"}},\"setOwner(address)\":{\"details\":\"Sets owner of the controller market.\",\"params\":{\"_owner\":\"Address of new owner\"}},\"supportCurrency(bytes32,string,uint16,address,uint256,address)\":{\"details\":\"Triggers to add new currency into the protocol. Links with existing ETH chainlink pricefeed\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_chainId\":\"Chain ID for conversion from bytes32 to bytes\",\"_ethPriceFeed\":\"Address for ETH price feed\",\"_name\":\"Currency full name\"}},\"updateCcyHaircut(bytes32,uint256)\":{\"details\":\"Triggers to update the haircut ratio for supported currency\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_haircut\":\"Currency haircut ratio used to calculate in collateral calculations\"}},\"updateCollateralSupport(bytes32,bool)\":{\"details\":\"Triggers to update if currency is accepted as collateral\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_isSupported\":\"Boolean whether currency supported as collateral or not\"}},\"updateCurrencySupport(bytes32,bool)\":{\"details\":\"Triggers to update currency support\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_isSupported\":\"Boolean whether currency supported as collateral or not\"}},\"updateMinMargin(bytes32,uint256)\":{\"details\":\"Triggers to update the minimal margin requirements for currency supported as collateral\",\"params\":{\"_ccy\":\"Currency short ticket\",\"_minMargin\":\"Currency minimal margin ratio used to calculate collateral coverage\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurrencyController.sol\":\"CurrencyController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x8895ce4f46aba18ee3cdb7b1d180f79edb868225781f60993c7b2181e2ee2583\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"contracts/CurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n */\\ncontract CurrencyController is ICurrencyController {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n\\n    address public override owner;\\n    uint8 public override last_ccy_index;\\n\\n    struct Currency {\\n        bool isSupported;\\n        string name;\\n        uint16 chainId; // chain id for address conversion\\n    }\\n\\n    // Protocol currencies storage\\n    mapping(bytes32 => Currency) public override currencies;\\n    mapping(bytes32 => uint256) public override haircuts;\\n    mapping(bytes32 => uint256) public override minMargins;\\n    mapping(bytes32 => bool) public override isCollateral;\\n    mapping(bytes32 => address) public override tokenAddresses;\\n\\n    // PriceFeed storage\\n    mapping(bytes32 => AggregatorV3Interface) private usdPriceFeeds;\\n    mapping(bytes32 => AggregatorV3Interface) private ethPriceFeeds;\\n    mapping(bytes32 => uint8) public override usdDecimals;\\n    mapping(bytes32 => uint8) public override ethDecimals;\\n\\n    uint8 public override supportedCurrencies;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    modifier supportedCcyOnly(bytes32 _ccy) {\\n        require(isSupportedCcy(_ccy), \\\"Unsupported asset\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Lending Market Controller Constructor.\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Sets owner of the controller market.\\n     * @param _owner Address of new owner\\n     */\\n    function setOwner(address _owner) public override onlyOwner {\\n        require(_owner != address(0), \\\"new owner is the zero address\\\");\\n        emit OwnerChanged(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    // =========== CURRENCY CONTROL SECTION ===========\\n\\n    /**\\n     * @dev Triggers to add new currency into the protocol. Links with existing ETH chainlink pricefeed\\n     * @param _ccy Currency short ticket\\n     * @param _name Currency full name\\n     * @param _chainId Chain ID for conversion from bytes32 to bytes\\n     * @param _ethPriceFeed Address for ETH price feed\\n     */\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) public override onlyOwner returns (bool) {\\n        last_ccy_index = last_ccy_index++;\\n\\n        Currency memory currency;\\n        currency.name = _name;\\n        if (_chainId != 0) {\\n            currency.chainId = _chainId;\\n        }\\n\\n        if (_tokenAddress != address(0)) {\\n            tokenAddresses[_ccy] = _tokenAddress;\\n        }\\n\\n        currency.isSupported = true;\\n\\n        currencies[_ccy] = currency;\\n        haircuts[_ccy] = _haircut;\\n\\n        if (_ccy != \\\"ETH\\\") {\\n            require(\\n                linkPriceFeed(_ccy, _ethPriceFeed, true),\\n                \\\"Invalid PriceFeed\\\"\\n            );\\n        } else {\\n            require(\\n                linkPriceFeed(_ccy, _ethPriceFeed, false),\\n                \\\"Invalid PriceFeed\\\"\\n            );\\n        }\\n        emit CcyAdded(_ccy, _name, _chainId, _haircut);\\n    }\\n\\n    /**\\n     * @dev Triggers to update currency support\\n     * @param _ccy Currency short ticket\\n     * @param _isSupported Boolean whether currency supported as collateral or not\\n     */\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        Currency storage currency = currencies[_ccy];\\n        currency.isSupported = _isSupported;\\n\\n        emit CcySupportUpdate(_ccy, _isSupported);\\n    }\\n\\n    /**\\n     * @dev Triggers to update if currency is accepted as collateral\\n     * @param _ccy Currency short ticket\\n     * @param _isSupported Boolean whether currency supported as collateral or not\\n     */\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        public\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n        returns (bool)\\n    {\\n        isCollateral[_ccy] = _isSupported;\\n\\n        emit CcyCollateralUpdate(_ccy, _isSupported);\\n    }\\n\\n    /**\\n     * @dev Triggers to update the haircut ratio for supported currency\\n     * @param _ccy Currency short ticket\\n     * @param _haircut Currency haircut ratio used to calculate in collateral calculations\\n     */\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        public\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n        returns (bool)\\n    {\\n        require(_haircut > 0, \\\"Incorrect haircut ratio\\\");\\n        require(_haircut <= 10000, \\\"Haircut ratio overflow\\\");\\n\\n        haircuts[_ccy] = _haircut;\\n\\n        emit HaircutUpdated(_ccy, _haircut);\\n    }\\n\\n    /**\\n     * @dev Triggers to update the minimal margin requirements for currency supported as collateral\\n     * @param _ccy Currency short ticket\\n     * @param _minMargin Currency minimal margin ratio used to calculate collateral coverage\\n     */\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        public\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n        returns (bool)\\n    {\\n        require(_minMargin > 0, \\\"Incorrect MinMargin\\\");\\n        require(_minMargin <= 10000, \\\"MinMargin overflow\\\");\\n        require(isCollateral[_ccy], \\\"Unable to set MinMargin\\\");\\n\\n        minMargins[_ccy] = _minMargin;\\n\\n        emit MinMarginUpdated(_ccy, _minMargin);\\n    }\\n\\n    // =========== EXTERNAL GET FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers to get haircut ratio for specific currency.\\n     * Haircut is used in bilateral netting cross-calculation.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getHaircut(bytes32 _ccy) external view override returns (uint256) {\\n        return haircuts[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get minimal margin percentage for specific currency.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getMinMargin(bytes32 _ccy)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(isCollateral[_ccy], \\\"Unable to get MinMargin\\\");\\n        return minMargins[_ccy];\\n    }\\n\\n    /**\\n     * @dev Triggers to get if specified currency is supported.\\n     * @param _ccy Currency short ticket\\n     */\\n    function isSupportedCcy(bytes32 _ccy) public view override returns (bool) {\\n        return currencies[_ccy].isSupported;\\n    }\\n\\n    /**\\n     * @dev Triggers to get chainId for a specific currency.\\n     * Chain ID is a unique identifier of another chain like Bitcoin, Filecoin, etc.\\n     * @param _ccy Currency short ticket\\n     */\\n    function getChainId(bytes32 _ccy) external view override returns (uint16) {\\n        return currencies[_ccy].chainId;\\n    }\\n\\n    // =========== CHAINLINK PRICE FEED FUNCTIONS ===========\\n    // TODO: add additional price feeds in case if chainlink is not reliable\\n\\n    /**\\n     * @dev Links the contract to existing chainlink price feed.\\n     * @param _ccy Specified currency short code\\n     * @param _priceFeedAddr Chainlink price feed contract address\\n     * @param _isEthPriceFeed Boolean for price feed with ETH price\\n     */\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) public override onlyOwner returns (bool) {\\n        require(_priceFeedAddr != address(0), \\\"Couldn't link 0x0 address\\\");\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(_priceFeedAddr);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        require(price >= 0, \\\"Invalid PriceFeed\\\");\\n\\n        uint8 decimals = priceFeed.decimals();\\n        require(decimals <= 18, \\\"Invalid decimals\\\");\\n\\n        if (_isEthPriceFeed) {\\n            require(!_isETH(_ccy), \\\"Can't link to ETH\\\");\\n            ethPriceFeeds[_ccy] = priceFeed;\\n            ethDecimals[_ccy] = decimals;\\n            emit PriceFeedAdded(_ccy, \\\"ETH\\\", _priceFeedAddr);\\n        } else {\\n            usdPriceFeeds[_ccy] = priceFeed;\\n            usdDecimals[_ccy] = decimals;\\n            emit PriceFeedAdded(_ccy, \\\"USD\\\", _priceFeedAddr);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Triggers to remove existing chainlink price feed.\\n     * @param _ccy Specified currency\\n     * @param _isEthPriceFeed Boolean for price feed with ETH price\\n     */\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed)\\n        external\\n        override\\n        onlyOwner\\n        supportedCcyOnly(_ccy)\\n    {\\n        if (_isEthPriceFeed == true) {\\n            address priceFeed = address(ethPriceFeeds[_ccy]);\\n\\n            require(priceFeed != address(0), \\\"Invalid PriceFeed\\\");\\n            delete ethPriceFeeds[_ccy];\\n            delete ethDecimals[_ccy];\\n\\n            emit PriceFeedRemoved(_ccy, \\\"ETH\\\", priceFeed);\\n        } else {\\n            address priceFeed = address(usdPriceFeeds[_ccy]);\\n\\n            require(priceFeed != address(0), \\\"Invalid PriceFeed\\\");\\n            delete usdPriceFeeds[_ccy];\\n            delete usdDecimals[_ccy];\\n\\n            emit PriceFeedRemoved(_ccy, \\\"USD\\\", priceFeed);\\n        }\\n    }\\n\\n    // =========== GET PRICE FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers to get last price in USD for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getLastUSDPrice(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        AggregatorV3Interface priceFeed = usdPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get historical price in USD for selected currency.\\n     * @param _ccy Currency\\n     * @param _roundId RoundId\\n     */\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        AggregatorV3Interface priceFeed = usdPriceFeeds[_ccy];\\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.getRoundData(\\n            _roundId\\n        );\\n\\n        require(timeStamp > 0, \\\"Round not completed yet\\\");\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get last price in ETH for selected currency.\\n     * @param _ccy Currency\\n     */\\n    function getLastETHPrice(bytes32 _ccy)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        if (_isETH(_ccy)) return 1e18;\\n\\n        AggregatorV3Interface priceFeed = ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get historical price in ETH for selected currency.\\n     * @param _ccy Currency\\n     * @param _roundId RoundId\\n     */\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        public\\n        view\\n        override\\n        returns (int256)\\n    {\\n        if (_isETH(_ccy)) return 1e18;\\n\\n        AggregatorV3Interface priceFeed = ethPriceFeeds[_ccy];\\n        (, int256 price, , uint256 timeStamp, ) = priceFeed.getRoundData(\\n            _roundId\\n        );\\n\\n        require(timeStamp > 0, \\\"Round not completed yet\\\");\\n        return price;\\n    }\\n\\n    /**\\n     * @dev Triggers to get converted amount of currency in ETH.\\n     * @param _ccy Currency that has to be convered to ETH\\n     * @param _amount Amount of funds to be converted\\n     */\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_isETH(_ccy)) return _amount;\\n\\n        AggregatorV3Interface priceFeed = ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return _amount.mul(uint256(price)).div(1e18);\\n    }\\n\\n    /**\\n     * @dev Triggers to get converted amounts of currency to ETH.\\n     * @param _ccy Currency that has to be convered to ETH\\n     * @param _amounts Array with amounts of funds to be converted\\n     */\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        public\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        if (_isETH(_ccy)) return _amounts;\\n\\n        AggregatorV3Interface priceFeed = ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256[] memory amounts = new uint256[](_amounts.length);\\n\\n        for (uint256 i = 0; i < _amounts.length; i++) {\\n            uint256 amount = _amounts[i];\\n\\n            if (amount > 0) {\\n                amounts[i] = amount.mul(uint256(price)).div(1e18);\\n            } else {\\n                amounts[i] = 0;\\n            }\\n        }\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @dev Triggers to convert ETH amount of funds to specified currency.\\n     * @param _ccy Currency that has to be convered from ETH\\n     * @param _amountETH Amount of funds in ETH to be converted\\n     */\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_isETH(_ccy)) return _amountETH;\\n\\n        AggregatorV3Interface priceFeed = ethPriceFeeds[_ccy];\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        return (_amountETH.mul(1e18)).div(uint256(price)); // add decimals checks\\n    }\\n\\n    function _isETH(bytes32 _ccy) internal pure returns (bool) {\\n        return _ccy == \\\"ETH\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x52ca99ecd619ffa93268429fec337cf1ee5c6f368336319c65e5511078e3d096\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n\\n    function tokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x24197e936f7701c82a04656685d419f65295bfa847a7ce34b8b270d6db8e64aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055611e63806100326000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806360cd447811610104578063a38061c9116100a2578063cc106de111610071578063cc106de11461066c578063cc8dd9f114610766578063d4d4f6ce1461079a578063ea6c88a5146107b7576101cf565b8063a38061c9146105f0578063b11459b41461060d578063b43a9e6c14610630578063c94f815714610664576101cf565b80637b7904e3116100de5780637b7904e3146104d95780638da5cb5b146104fe578063958c3490146105065780639abdb38a146105d3576101cf565b806360cd44781461045e57806367a320001461048d5780636d01544d146104aa576101cf565b8063370adc951161017157806346498c2e1161014b57806346498c2e146103e257806350326d22146104075780635d95df8a146104245780635e4d489514610441576101cf565b8063370adc95146102dd5780633a2dbe2a1461038657806344a6ecdd146103bf576101cf565b80631743ffce116101ad5780631743ffce1461024e5780632c58824c1461026b578063326885f11461028957806334cc1f36146102a6576101cf565b806306d062ad146101d45780630b17440a1461020957806313af403514610226575b600080fd5b6101f7600480360360408110156101ea57600080fd5b50803590602001356107dc565b60408051918252519081900360200190f35b6101f76004803603602081101561021f57600080fd5b503561089e565b61024c6004803603602081101561023c57600080fd5b50356001600160a01b03166108b0565b005b6101f76004803603602081101561026457600080fd5b503561097d565b610273610a28565b6040805160ff9092168252519081900360200190f35b6101f76004803603602081101561029f57600080fd5b5035610a31565b6102c9600480360360408110156102bc57600080fd5b5080359060200135610a43565b604080519115158252519081900360200190f35b6102fa600480360360208110156102f357600080fd5b5035610bf2565b604051808415158152602001806020018361ffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610349578181015183820152602001610331565b50505050905090810190601f1680156103765780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6103a36004803603602081101561039c57600080fd5b5035610ca9565b604080516001600160a01b039092168252519081900360200190f35b6101f7600480360360408110156103d557600080fd5b5080359060200135610cc4565b6102c9600480360360408110156103f857600080fd5b50803590602001351515610d75565b6101f76004803603602081101561041d57600080fd5b5035610e36565b6102c96004803603602081101561043a57600080fd5b5035610e89565b6102736004803603602081101561045757600080fd5b5035610e9e565b6101f76004803603604081101561047457600080fd5b508035906020013569ffffffffffffffffffff16610eb3565b610273600480360360208110156104a357600080fd5b5035610fce565b6101f7600480360360408110156104c057600080fd5b508035906020013569ffffffffffffffffffff16610fe3565b61024c600480360360408110156104ef57600080fd5b5080359060200135151561104b565b6103a361128b565b6102c9600480360360c081101561051c57600080fd5b8135919081019060408101602082013564010000000081111561053e57600080fd5b82018360208201111561055057600080fd5b8035906020019184600183028401116401000000008311171561057257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505061ffff8335169350506001600160a01b03602083013581169260408101359250606001351661129a565b6101f7600480360360208110156105e957600080fd5b503561150e565b6101f76004803603602081101561060657600080fd5b5035611520565b6102c96004803603604081101561062357600080fd5b5080359060200135611596565b61064d6004803603602081101561064657600080fd5b50356116f0565b6040805161ffff9092168252519081900360200190f35b610273611709565b6107166004803603604081101561068257600080fd5b813591908101906040810160208201356401000000008111156106a457600080fd5b8201836020820111156106b657600080fd5b803590602001918460208302840111640100000000831117156106d857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611719945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561075257818101518382015260200161073a565b505050509050019250505060405180910390f35b6102c96004803603606081101561077c57600080fd5b508035906001600160a01b036020820135169060400135151561188b565b6102c9600480360360208110156107b057600080fd5b5035611bf8565b6102c9600480360360408110156107cd57600080fd5b50803590602001351515611c0d565b60006107e783611c80565b156107f3575080610898565b600083815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d60a081101561087057600080fd5b506020015190506108938161088d86670de0b6b3a7640000611c8b565b90611ceb565b925050505b92915050565b60036020526000908152604090205481565b6000546001600160a01b031633146108c757600080fd5b6001600160a01b038116610922576040805162461bcd60e51b815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061098882611c80565b1561099c5750670de0b6b3a7640000610a23565b600082815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d60a0811015610a1957600080fd5b5060200151925050505b919050565b600a5460ff1681565b60026020526000908152604090205481565b600080546001600160a01b03163314610a5b57600080fd5b82610a6581611bf8565b610aaa576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b60008311610af5576040805162461bcd60e51b815260206004820152601360248201527224b731b7b93932b1ba1026b4b726b0b933b4b760691b604482015290519081900360640190fd5b612710831115610b41576040805162461bcd60e51b81526020600482015260126024820152714d696e4d617267696e206f766572666c6f7760701b604482015290519081900360640190fd5b60008481526004602052604090205460ff16610ba4576040805162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20736574204d696e4d617267696e000000000000000000604482015290519081900360640190fd5b6000848152600360209081526040918290208590558151858152915186927f93aab202383cdcea234ec12d5ae14be597c1fcbe7c93b4843b5df57793917f0c92908290030190a25092915050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260ff90911694919392909190830182828015610c955780601f10610c6a57610100808354040283529160200191610c95565b820191906000526020600020905b815481529060010190602001808311610c7857829003601f168201915b5050506002909301549192505061ffff1683565b6005602052600090815260409020546001600160a01b031681565b6000610ccf83611c80565b15610cdb575080610898565b600083815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d60a0811015610d5857600080fd5b50602001519050610893670de0b6b3a764000061088d8684611c8b565b600080546001600160a01b03163314610d8d57600080fd5b82610d9781611bf8565b610ddc576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b600084815260046020908152604091829020805460ff19168615159081179091558251908152915186927f2184292b9bb18c7204e8a0f1e8b90159dc7830d4f547cf8c2ba0358ef18b05b292908290030190a25092915050565b600081815260066020526040808220548151633fabe5a360e21b815291516001600160a01b03909116918391839163feaf968c9160048083019260a0929190829003018186803b1580156109ef57600080fd5b60046020526000908152604090205460ff1681565b60086020526000908152604090205460ff1681565b6000610ebe83611c80565b15610ed25750670de0b6b3a7640000610898565b600083815260076020526040808220548151639a6fc8f560e01b815269ffffffffffffffffffff8616600482015291516001600160a01b03909116929182918491639a6fc8f59160248083019260a0929190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d60a0811015610f6257600080fd5b506020810151606090910151909250905080610fc5576040805162461bcd60e51b815260206004820152601760248201527f526f756e64206e6f7420636f6d706c6574656420796574000000000000000000604482015290519081900360640190fd5b50949350505050565b60096020526000908152604090205460ff1681565b600082815260066020526040808220548151639a6fc8f560e01b815269ffffffffffffffffffff8516600482015291516001600160a01b0390911691839182918491639a6fc8f59160248082019260a092909190829003018186803b158015610f3857600080fd5b6000546001600160a01b0316331461106257600080fd5b8161106c81611bf8565b6110b1576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b600182151514156111a3576000838152600760205260409020546001600160a01b03168061111a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b600084815260076020908152604080832080546001600160a01b03191690556009825291829020805460ff1916905581518681529081018290526003818301526208aa8960eb1b606082015290516001600160a01b038316917ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee7919081900360800190a250611286565b6000838152600660205260409020546001600160a01b031680611201576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b600084815260066020908152604080832080546001600160a01b03191690556008825291829020805460ff191690558151868152908101829052600381830152621554d160ea1b606082015290516001600160a01b038316917ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee7919081900360800190a2505b505050565b6000546001600160a01b031681565b600080546001600160a01b031633146112b257600080fd5b6000805460ff600160a01b808304821680820260019091019092160260ff60a01b19928316179091161790556112e6611d52565b6020810187905261ffff8616156113025761ffff861660408201525b6001600160a01b0383161561133957600088815260056020526040902080546001600160a01b0319166001600160a01b0385161790555b60018082526000898152602082815260409091208351815460ff191690151517815581840151805185949293611373938501920190611d79565b506040918201516002918201805461ffff191661ffff90921691909117905560008a8152602091909152208490556208aa8960eb1b8814611404576113ba8886600161188b565b6113ff576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b611455565b6114108886600061188b565b611455576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b877f21a7b05fe083404c8a10ea8f1540c6ad43af65fd6b113abe370221d23f5473ac88888760405180806020018461ffff168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156114c75781810151838201526020016114af565b50505050905090810190601f1680156114f45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2509695505050505050565b60009081526002602052604090205490565b60008181526004602052604081205460ff16611583576040805162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20676574204d696e4d617267696e000000000000000000604482015290519081900360640190fd5b5060009081526003602052604090205490565b600080546001600160a01b031633146115ae57600080fd5b826115b881611bf8565b6115fd576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b60008311611652576040805162461bcd60e51b815260206004820152601760248201527f496e636f7272656374206861697263757420726174696f000000000000000000604482015290519081900360640190fd5b6127108311156116a2576040805162461bcd60e51b81526020600482015260166024820152754861697263757420726174696f206f766572666c6f7760501b604482015290519081900360640190fd5b6000848152600260209081526040918290208590558151858152915186927f99d976082a5e53ffddd334dbf2aec9b617affac6394470feb508f5fb662e0a1a92908290030190a25092915050565b60009081526001602052604090206002015461ffff1690565b600054600160a01b900460ff1681565b606061172483611c80565b15611730575080610898565b600083815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60a08110156117ad57600080fd5b5060200151845190915060609067ffffffffffffffff811180156117d057600080fd5b506040519080825280602002602001820160405280156117fa578160200160208202803683370190505b50905060005b855181101561188157600086828151811061181757fe5b60200260200101519050600081111561185d57611840670de0b6b3a764000061088d8387611c8b565b83838151811061184c57fe5b602002602001018181525050611878565b600083838151811061186b57fe5b6020026020010181815250505b50600101611800565b5095945050505050565b600080546001600160a01b031633146118a357600080fd5b6001600160a01b0383166118fe576040805162461bcd60e51b815260206004820152601960248201527f436f756c646e2774206c696e6b20307830206164647265737300000000000000604482015290519081900360640190fd5b60008390506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d60a081101561196857600080fd5b5060200151905060008112156119b9576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f457600080fd5b505afa158015611a08573d6000803e3d6000fd5b505050506040513d6020811015611a1e57600080fd5b50519050601260ff82161115611a6e576040805162461bcd60e51b815260206004820152601060248201526f496e76616c696420646563696d616c7360801b604482015290519081900360640190fd5b8415611b5957611a7d87611c80565b15611ac3576040805162461bcd60e51b8152602060048201526011602482015270086c2dc4ee840d8d2dcd640e8de408aa89607b1b604482015290519081900360640190fd5b600087815260076020908152604080832080546001600160a01b0319166001600160a01b03888116919091179091556009835292819020805460ff191660ff861617905580518a81529182018190526003828201526208aa8960eb1b606083015251918816917f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a916080908290030190a2611beb565b600087815260066020908152604080832080546001600160a01b0319166001600160a01b03888116919091179091556008835292819020805460ff191660ff861617905580518a8152918201819052600382820152621554d160ea1b606083015251918816917f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a916080908290030190a25b5060019695505050505050565b60009081526001602052604090205460ff1690565b600080546001600160a01b03163314611c2557600080fd5b600083815260016020908152604091829020805460ff1916851515908117825583519081529251909286927f9abbefd519a8bdb26fbc476187bc19038a6a41a175946595f6e9e900d9eb2a3192918290030190a25092915050565b6208aa8960eb1b1490565b600082611c9a57506000610898565b82820282848281611ca757fe5b0414611ce45760405162461bcd60e51b8152600401808060200182810382526021815260200180611e0d6021913960400191505060405180910390fd5b9392505050565b6000808211611d41576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611d4a57fe5b049392505050565b604051806060016040528060001515815260200160608152602001600061ffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611dba57805160ff1916838001178555611de7565b82800160010185558215611de7579182015b82811115611de7578251825591602001919060010190611dcc565b50611df3929150611df7565b5090565b5b80821115611df35760008155600101611df856fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212209cace1ad5c9d7f559561c5edeb0501a713728c062845510ff801c2768450d07764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806360cd447811610104578063a38061c9116100a2578063cc106de111610071578063cc106de11461066c578063cc8dd9f114610766578063d4d4f6ce1461079a578063ea6c88a5146107b7576101cf565b8063a38061c9146105f0578063b11459b41461060d578063b43a9e6c14610630578063c94f815714610664576101cf565b80637b7904e3116100de5780637b7904e3146104d95780638da5cb5b146104fe578063958c3490146105065780639abdb38a146105d3576101cf565b806360cd44781461045e57806367a320001461048d5780636d01544d146104aa576101cf565b8063370adc951161017157806346498c2e1161014b57806346498c2e146103e257806350326d22146104075780635d95df8a146104245780635e4d489514610441576101cf565b8063370adc95146102dd5780633a2dbe2a1461038657806344a6ecdd146103bf576101cf565b80631743ffce116101ad5780631743ffce1461024e5780632c58824c1461026b578063326885f11461028957806334cc1f36146102a6576101cf565b806306d062ad146101d45780630b17440a1461020957806313af403514610226575b600080fd5b6101f7600480360360408110156101ea57600080fd5b50803590602001356107dc565b60408051918252519081900360200190f35b6101f76004803603602081101561021f57600080fd5b503561089e565b61024c6004803603602081101561023c57600080fd5b50356001600160a01b03166108b0565b005b6101f76004803603602081101561026457600080fd5b503561097d565b610273610a28565b6040805160ff9092168252519081900360200190f35b6101f76004803603602081101561029f57600080fd5b5035610a31565b6102c9600480360360408110156102bc57600080fd5b5080359060200135610a43565b604080519115158252519081900360200190f35b6102fa600480360360208110156102f357600080fd5b5035610bf2565b604051808415158152602001806020018361ffff168152602001828103825284818151815260200191508051906020019080838360005b83811015610349578181015183820152602001610331565b50505050905090810190601f1680156103765780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b6103a36004803603602081101561039c57600080fd5b5035610ca9565b604080516001600160a01b039092168252519081900360200190f35b6101f7600480360360408110156103d557600080fd5b5080359060200135610cc4565b6102c9600480360360408110156103f857600080fd5b50803590602001351515610d75565b6101f76004803603602081101561041d57600080fd5b5035610e36565b6102c96004803603602081101561043a57600080fd5b5035610e89565b6102736004803603602081101561045757600080fd5b5035610e9e565b6101f76004803603604081101561047457600080fd5b508035906020013569ffffffffffffffffffff16610eb3565b610273600480360360208110156104a357600080fd5b5035610fce565b6101f7600480360360408110156104c057600080fd5b508035906020013569ffffffffffffffffffff16610fe3565b61024c600480360360408110156104ef57600080fd5b5080359060200135151561104b565b6103a361128b565b6102c9600480360360c081101561051c57600080fd5b8135919081019060408101602082013564010000000081111561053e57600080fd5b82018360208201111561055057600080fd5b8035906020019184600183028401116401000000008311171561057257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505061ffff8335169350506001600160a01b03602083013581169260408101359250606001351661129a565b6101f7600480360360208110156105e957600080fd5b503561150e565b6101f76004803603602081101561060657600080fd5b5035611520565b6102c96004803603604081101561062357600080fd5b5080359060200135611596565b61064d6004803603602081101561064657600080fd5b50356116f0565b6040805161ffff9092168252519081900360200190f35b610273611709565b6107166004803603604081101561068257600080fd5b813591908101906040810160208201356401000000008111156106a457600080fd5b8201836020820111156106b657600080fd5b803590602001918460208302840111640100000000831117156106d857600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611719945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561075257818101518382015260200161073a565b505050509050019250505060405180910390f35b6102c96004803603606081101561077c57600080fd5b508035906001600160a01b036020820135169060400135151561188b565b6102c9600480360360208110156107b057600080fd5b5035611bf8565b6102c9600480360360408110156107cd57600080fd5b50803590602001351515611c0d565b60006107e783611c80565b156107f3575080610898565b600083815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b15801561084657600080fd5b505afa15801561085a573d6000803e3d6000fd5b505050506040513d60a081101561087057600080fd5b506020015190506108938161088d86670de0b6b3a7640000611c8b565b90611ceb565b925050505b92915050565b60036020526000908152604090205481565b6000546001600160a01b031633146108c757600080fd5b6001600160a01b038116610922576040805162461bcd60e51b815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015290519081900360640190fd5b600080546040516001600160a01b03808516939216917fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c91a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600061098882611c80565b1561099c5750670de0b6b3a7640000610a23565b600082815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b1580156109ef57600080fd5b505afa158015610a03573d6000803e3d6000fd5b505050506040513d60a0811015610a1957600080fd5b5060200151925050505b919050565b600a5460ff1681565b60026020526000908152604090205481565b600080546001600160a01b03163314610a5b57600080fd5b82610a6581611bf8565b610aaa576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b60008311610af5576040805162461bcd60e51b815260206004820152601360248201527224b731b7b93932b1ba1026b4b726b0b933b4b760691b604482015290519081900360640190fd5b612710831115610b41576040805162461bcd60e51b81526020600482015260126024820152714d696e4d617267696e206f766572666c6f7760701b604482015290519081900360640190fd5b60008481526004602052604090205460ff16610ba4576040805162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20736574204d696e4d617267696e000000000000000000604482015290519081900360640190fd5b6000848152600360209081526040918290208590558151858152915186927f93aab202383cdcea234ec12d5ae14be597c1fcbe7c93b4843b5df57793917f0c92908290030190a25092915050565b600160208181526000928352604092839020805481840180548651600261010097831615979097026000190190911695909504601f810185900485028601850190965285855260ff90911694919392909190830182828015610c955780601f10610c6a57610100808354040283529160200191610c95565b820191906000526020600020905b815481529060010190602001808311610c7857829003601f168201915b5050506002909301549192505061ffff1683565b6005602052600090815260409020546001600160a01b031681565b6000610ccf83611c80565b15610cdb575080610898565b600083815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d60a0811015610d5857600080fd5b50602001519050610893670de0b6b3a764000061088d8684611c8b565b600080546001600160a01b03163314610d8d57600080fd5b82610d9781611bf8565b610ddc576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b600084815260046020908152604091829020805460ff19168615159081179091558251908152915186927f2184292b9bb18c7204e8a0f1e8b90159dc7830d4f547cf8c2ba0358ef18b05b292908290030190a25092915050565b600081815260066020526040808220548151633fabe5a360e21b815291516001600160a01b03909116918391839163feaf968c9160048083019260a0929190829003018186803b1580156109ef57600080fd5b60046020526000908152604090205460ff1681565b60086020526000908152604090205460ff1681565b6000610ebe83611c80565b15610ed25750670de0b6b3a7640000610898565b600083815260076020526040808220548151639a6fc8f560e01b815269ffffffffffffffffffff8616600482015291516001600160a01b03909116929182918491639a6fc8f59160248083019260a0929190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d60a0811015610f6257600080fd5b506020810151606090910151909250905080610fc5576040805162461bcd60e51b815260206004820152601760248201527f526f756e64206e6f7420636f6d706c6574656420796574000000000000000000604482015290519081900360640190fd5b50949350505050565b60096020526000908152604090205460ff1681565b600082815260066020526040808220548151639a6fc8f560e01b815269ffffffffffffffffffff8516600482015291516001600160a01b0390911691839182918491639a6fc8f59160248082019260a092909190829003018186803b158015610f3857600080fd5b6000546001600160a01b0316331461106257600080fd5b8161106c81611bf8565b6110b1576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b600182151514156111a3576000838152600760205260409020546001600160a01b03168061111a576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b600084815260076020908152604080832080546001600160a01b03191690556009825291829020805460ff1916905581518681529081018290526003818301526208aa8960eb1b606082015290516001600160a01b038316917ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee7919081900360800190a250611286565b6000838152600660205260409020546001600160a01b031680611201576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b600084815260066020908152604080832080546001600160a01b03191690556008825291829020805460ff191690558151868152908101829052600381830152621554d160ea1b606082015290516001600160a01b038316917ea0d5a605fe34a5efa696fb7b7fc385f4efcc9d0ff516d7dc7a1cbfbe065ee7919081900360800190a2505b505050565b6000546001600160a01b031681565b600080546001600160a01b031633146112b257600080fd5b6000805460ff600160a01b808304821680820260019091019092160260ff60a01b19928316179091161790556112e6611d52565b6020810187905261ffff8616156113025761ffff861660408201525b6001600160a01b0383161561133957600088815260056020526040902080546001600160a01b0319166001600160a01b0385161790555b60018082526000898152602082815260409091208351815460ff191690151517815581840151805185949293611373938501920190611d79565b506040918201516002918201805461ffff191661ffff90921691909117905560008a8152602091909152208490556208aa8960eb1b8814611404576113ba8886600161188b565b6113ff576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b611455565b6114108886600061188b565b611455576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b877f21a7b05fe083404c8a10ea8f1540c6ad43af65fd6b113abe370221d23f5473ac88888760405180806020018461ffff168152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156114c75781810151838201526020016114af565b50505050905090810190601f1680156114f45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2509695505050505050565b60009081526002602052604090205490565b60008181526004602052604081205460ff16611583576040805162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f20676574204d696e4d617267696e000000000000000000604482015290519081900360640190fd5b5060009081526003602052604090205490565b600080546001600160a01b031633146115ae57600080fd5b826115b881611bf8565b6115fd576040805162461bcd60e51b8152602060048201526011602482015270155b9cdd5c1c1bdc9d195908185cdcd95d607a1b604482015290519081900360640190fd5b60008311611652576040805162461bcd60e51b815260206004820152601760248201527f496e636f7272656374206861697263757420726174696f000000000000000000604482015290519081900360640190fd5b6127108311156116a2576040805162461bcd60e51b81526020600482015260166024820152754861697263757420726174696f206f766572666c6f7760501b604482015290519081900360640190fd5b6000848152600260209081526040918290208590558151858152915186927f99d976082a5e53ffddd334dbf2aec9b617affac6394470feb508f5fb662e0a1a92908290030190a25092915050565b60009081526001602052604090206002015461ffff1690565b600054600160a01b900460ff1681565b606061172483611c80565b15611730575080610898565b600083815260076020526040808220548151633fabe5a360e21b815291516001600160a01b039091169291839163feaf968c9160048082019260a092909190829003018186803b15801561178357600080fd5b505afa158015611797573d6000803e3d6000fd5b505050506040513d60a08110156117ad57600080fd5b5060200151845190915060609067ffffffffffffffff811180156117d057600080fd5b506040519080825280602002602001820160405280156117fa578160200160208202803683370190505b50905060005b855181101561188157600086828151811061181757fe5b60200260200101519050600081111561185d57611840670de0b6b3a764000061088d8387611c8b565b83838151811061184c57fe5b602002602001018181525050611878565b600083838151811061186b57fe5b6020026020010181815250505b50600101611800565b5095945050505050565b600080546001600160a01b031633146118a357600080fd5b6001600160a01b0383166118fe576040805162461bcd60e51b815260206004820152601960248201527f436f756c646e2774206c696e6b20307830206164647265737300000000000000604482015290519081900360640190fd5b60008390506000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561193e57600080fd5b505afa158015611952573d6000803e3d6000fd5b505050506040513d60a081101561196857600080fd5b5060200151905060008112156119b9576040805162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908141c9a58d951995959607a1b604482015290519081900360640190fd5b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156119f457600080fd5b505afa158015611a08573d6000803e3d6000fd5b505050506040513d6020811015611a1e57600080fd5b50519050601260ff82161115611a6e576040805162461bcd60e51b815260206004820152601060248201526f496e76616c696420646563696d616c7360801b604482015290519081900360640190fd5b8415611b5957611a7d87611c80565b15611ac3576040805162461bcd60e51b8152602060048201526011602482015270086c2dc4ee840d8d2dcd640e8de408aa89607b1b604482015290519081900360640190fd5b600087815260076020908152604080832080546001600160a01b0319166001600160a01b03888116919091179091556009835292819020805460ff191660ff861617905580518a81529182018190526003828201526208aa8960eb1b606083015251918816917f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a916080908290030190a2611beb565b600087815260066020908152604080832080546001600160a01b0319166001600160a01b03888116919091179091556008835292819020805460ff191660ff861617905580518a8152918201819052600382820152621554d160ea1b606083015251918816917f6537ffaaeebdb294479a8b7fab1081c2b15de1a4bc9df657aad801547748fa4a916080908290030190a25b5060019695505050505050565b60009081526001602052604090205460ff1690565b600080546001600160a01b03163314611c2557600080fd5b600083815260016020908152604091829020805460ff1916851515908117825583519081529251909286927f9abbefd519a8bdb26fbc476187bc19038a6a41a175946595f6e9e900d9eb2a3192918290030190a25092915050565b6208aa8960eb1b1490565b600082611c9a57506000610898565b82820282848281611ca757fe5b0414611ce45760405162461bcd60e51b8152600401808060200182810382526021815260200180611e0d6021913960400191505060405180910390fd5b9392505050565b6000808211611d41576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611d4a57fe5b049392505050565b604051806060016040528060001515815260200160608152602001600061ffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611dba57805160ff1916838001178555611de7565b82800160010185558215611de7579182015b82811115611de7578251825591602001919060010190611dcc565b50611df3929150611df7565b5090565b5b80821115611df35760008155600101611df856fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212209cace1ad5c9d7f559561c5edeb0501a713728c062845510ff801c2768450d07764736f6c634300060c0033",
  "devdoc": {
    "details": "Currency Controller contract is responsible for managing supported currencies in Secured Finance Protocol Contract links new currencies to ETH Chainlink price feeds, without existing price feed contract owner is not able to add a new currency into the protocol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Lending Market Controller Constructor."
      },
      "convertBulkToETH(bytes32,uint256[])": {
        "details": "Triggers to get converted amounts of currency to ETH.",
        "params": {
          "_amounts": "Array with amounts of funds to be converted",
          "_ccy": "Currency that has to be convered to ETH"
        }
      },
      "convertFromETH(bytes32,uint256)": {
        "details": "Triggers to convert ETH amount of funds to specified currency.",
        "params": {
          "_amountETH": "Amount of funds in ETH to be converted",
          "_ccy": "Currency that has to be convered from ETH"
        }
      },
      "convertToETH(bytes32,uint256)": {
        "details": "Triggers to get converted amount of currency in ETH.",
        "params": {
          "_amount": "Amount of funds to be converted",
          "_ccy": "Currency that has to be convered to ETH"
        }
      },
      "getChainId(bytes32)": {
        "details": "Triggers to get chainId for a specific currency. Chain ID is a unique identifier of another chain like Bitcoin, Filecoin, etc.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getHaircut(bytes32)": {
        "details": "Triggers to get haircut ratio for specific currency. Haircut is used in bilateral netting cross-calculation.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "getHistoricalETHPrice(bytes32,uint80)": {
        "details": "Triggers to get historical price in ETH for selected currency.",
        "params": {
          "_ccy": "Currency",
          "_roundId": "RoundId"
        }
      },
      "getHistoricalUSDPrice(bytes32,uint80)": {
        "details": "Triggers to get historical price in USD for selected currency.",
        "params": {
          "_ccy": "Currency",
          "_roundId": "RoundId"
        }
      },
      "getLastETHPrice(bytes32)": {
        "details": "Triggers to get last price in ETH for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getLastUSDPrice(bytes32)": {
        "details": "Triggers to get last price in USD for selected currency.",
        "params": {
          "_ccy": "Currency"
        }
      },
      "getMinMargin(bytes32)": {
        "details": "Triggers to get minimal margin percentage for specific currency.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "isSupportedCcy(bytes32)": {
        "details": "Triggers to get if specified currency is supported.",
        "params": {
          "_ccy": "Currency short ticket"
        }
      },
      "linkPriceFeed(bytes32,address,bool)": {
        "details": "Links the contract to existing chainlink price feed.",
        "params": {
          "_ccy": "Specified currency short code",
          "_isEthPriceFeed": "Boolean for price feed with ETH price",
          "_priceFeedAddr": "Chainlink price feed contract address"
        }
      },
      "removePriceFeed(bytes32,bool)": {
        "details": "Triggers to remove existing chainlink price feed.",
        "params": {
          "_ccy": "Specified currency",
          "_isEthPriceFeed": "Boolean for price feed with ETH price"
        }
      },
      "setOwner(address)": {
        "details": "Sets owner of the controller market.",
        "params": {
          "_owner": "Address of new owner"
        }
      },
      "supportCurrency(bytes32,string,uint16,address,uint256,address)": {
        "details": "Triggers to add new currency into the protocol. Links with existing ETH chainlink pricefeed",
        "params": {
          "_ccy": "Currency short ticket",
          "_chainId": "Chain ID for conversion from bytes32 to bytes",
          "_ethPriceFeed": "Address for ETH price feed",
          "_name": "Currency full name"
        }
      },
      "updateCcyHaircut(bytes32,uint256)": {
        "details": "Triggers to update the haircut ratio for supported currency",
        "params": {
          "_ccy": "Currency short ticket",
          "_haircut": "Currency haircut ratio used to calculate in collateral calculations"
        }
      },
      "updateCollateralSupport(bytes32,bool)": {
        "details": "Triggers to update if currency is accepted as collateral",
        "params": {
          "_ccy": "Currency short ticket",
          "_isSupported": "Boolean whether currency supported as collateral or not"
        }
      },
      "updateCurrencySupport(bytes32,bool)": {
        "details": "Triggers to update currency support",
        "params": {
          "_ccy": "Currency short ticket",
          "_isSupported": "Boolean whether currency supported as collateral or not"
        }
      },
      "updateMinMargin(bytes32,uint256)": {
        "details": "Triggers to update the minimal margin requirements for currency supported as collateral",
        "params": {
          "_ccy": "Currency short ticket",
          "_minMargin": "Currency minimal margin ratio used to calculate collateral coverage"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11907,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11910,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "last_ccy_index",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 11922,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "currencies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Currency)11917_storage)"
      },
      {
        "astId": 11927,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "haircuts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 11932,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "minMargins",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 11937,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "isCollateral",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 11942,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 11946,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "usdPriceFeeds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)102)"
      },
      {
        "astId": 11950,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "ethPriceFeeds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)102)"
      },
      {
        "astId": 11955,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "usdDecimals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint8)"
      },
      {
        "astId": 11960,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "ethDecimals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint8)"
      },
      {
        "astId": 11963,
        "contract": "contracts/CurrencyController.sol:CurrencyController",
        "label": "supportedCurrencies",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_contract(AggregatorV3Interface)102)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)102"
      },
      "t_mapping(t_bytes32,t_struct(Currency)11917_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct CurrencyController.Currency)",
        "numberOfBytes": "32",
        "value": "t_struct(Currency)11917_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Currency)11917_storage": {
        "encoding": "inplace",
        "label": "struct CurrencyController.Currency",
        "members": [
          {
            "astId": 11912,
            "contract": "contracts/CurrencyController.sol:CurrencyController",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 11914,
            "contract": "contracts/CurrencyController.sol:CurrencyController",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 11916,
            "contract": "contracts/CurrencyController.sol:CurrencyController",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}