{
  "address": "0xB0D4b6A17E71F19f198859Ff6f04a9883bad2E01",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "prefix",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "product",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "RegisterProduct",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_prefix",
          "type": "bytes4"
        }
      ],
      "name": "getControllerContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dealId",
          "type": "bytes32"
        }
      ],
      "name": "getControllerContractByDealId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_prefix",
          "type": "bytes4"
        }
      ],
      "name": "getProductContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dealId",
          "type": "bytes32"
        }
      ],
      "name": "getProductContractByDealId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_prefix",
          "type": "bytes4"
        }
      ],
      "name": "isSupportedProduct",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dealId",
          "type": "bytes32"
        }
      ],
      "name": "isSupportedProductByDealId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_prefix",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "registerProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "_prefixes",
          "type": "bytes4[]"
        },
        {
          "internalType": "address[]",
          "name": "_contracts",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_controllers",
          "type": "address[]"
        }
      ],
      "name": "registerProducts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x796d9d0929f89cf92fa2d33658a3ae7d78ba461f4049787c9e321f1430a57a25",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xB0D4b6A17E71F19f198859Ff6f04a9883bad2E01",
    "transactionIndex": 36,
    "gasUsed": "599725",
    "logsBloom": "0x
    "blockHash": "0x0a348b3afc4e6b6b15d74d54d7be01ddf17b2fd298017851fb4455c9cf15b44e",
    "transactionHash": "0x796d9d0929f89cf92fa2d33658a3ae7d78ba461f4049787c9e321f1430a57a25",
    "logs": [],
    "blockNumber": 10650659,
    "cumulativeGasUsed": "11362374",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c547b2e6a239b041ee2d79dd0b62b5b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"prefix\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"product\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"RegisterProduct\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_prefix\",\"type\":\"bytes4\"}],\"name\":\"getControllerContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dealId\",\"type\":\"bytes32\"}],\"name\":\"getControllerContractByDealId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_prefix\",\"type\":\"bytes4\"}],\"name\":\"getProductContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dealId\",\"type\":\"bytes32\"}],\"name\":\"getProductContractByDealId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_prefix\",\"type\":\"bytes4\"}],\"name\":\"isSupportedProduct\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dealId\",\"type\":\"bytes32\"}],\"name\":\"isSupportedProductByDealId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_prefix\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"registerProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"_prefixes\",\"type\":\"bytes4[]\"},{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_controllers\",\"type\":\"address[]\"}],\"name\":\"registerProducts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Contract constructor function.\"},\"getControllerContract(bytes4)\":{\"details\":\"Trigers to get market controller address by short prefix.\",\"params\":{\"_prefix\":\"Bytes4 prefix for product type\"}},\"getControllerContractByDealId(bytes32)\":{\"details\":\"Trigers to get market controller address by deal id\",\"params\":{\"_dealId\":\"Product deal idenfitier\"}},\"getProductContract(bytes4)\":{\"details\":\"Trigers to get product address by short prefix.\",\"params\":{\"_prefix\":\"Bytes4 prefix for product type\"}},\"getProductContractByDealId(bytes32)\":{\"details\":\"Trigers to get product address by deal id\",\"params\":{\"_dealId\":\"Product deal idenfitier\"}},\"isSupportedProduct(bytes4)\":{\"details\":\"Triggers to verify if a specific product is supported by short prefix.\",\"params\":{\"_prefix\":\"Bytes4 prefix for product type\"}},\"isSupportedProductByDealId(bytes32)\":{\"details\":\"Triggers to verify if a specific product is supported by deal id.\",\"params\":{\"_dealId\":\"Product deal idenfitier\"}},\"registerProduct(bytes4,address,address)\":{\"details\":\"Trigers to register new product type in a address resolver\",\"params\":{\"_contract\":\"Product contract address\",\"_prefix\":\"Bytes4 prefix for product type\"}},\"registerProducts(bytes4[],address[],address[])\":{\"details\":\"Trigers to register several product types in a address resolver\",\"params\":{\"_contracts\":\"Array of smart contract addresses for each product\",\"_prefixes\":\"Array of Bytes4 prefixes for each product type\"}}},\"title\":\"ProductAddressResolver contract is used to store addresses for each product type supported on the protocol. Addresses stored per bytes4 prefixes which are a simple identifiers of the product type\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":\"sets contract deployer as owner of this contract\",\"getControllerContract(bytes4)\":{\"notice\":\"To work with the contract this address should be wrapped around IYieldCurve interface\"},\"getControllerContractByDealId(bytes32)\":{\"notice\":\"To work with the contract this address should be wrapped around IYieldCurve interface\"},\"getProductContract(bytes4)\":{\"notice\":\"To work with the contract this address should be wrapped around IProduct interface\"},\"getProductContractByDealId(bytes32)\":{\"notice\":\"To work with the contract this address should be wrapped around IProduct interface\"},\"registerProduct(bytes4,address,address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving contract which is not supporting a common interface\"},\"registerProducts(bytes4[],address[],address[])\":{\"notice\":\"Trigers only be contract ownerReverts on saving contract which is not supporting common interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProductAddressResolver.sol\":\"ProductAddressResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/ProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IProductAddressResolver.sol\\\";\\nimport \\\"./libraries/DealId.sol\\\";\\n\\n/**\\n * @title ProductAddressResolver contract is used to store addresses for each product\\n * type supported on the protocol. Addresses stored per bytes4 prefixes which\\n * are a simple identifiers of the product type\\n */\\ncontract ProductAddressResolver is IProductAddressResolver {\\n    using Address for address;\\n\\n    event RegisterProduct(\\n        bytes4 prefix,\\n        address indexed product,\\n        address indexed controller\\n    );\\n\\n    address public owner;\\n\\n    // Mapping for storing product contract addresses\\n    mapping(bytes4 => address) _productContracts;\\n    mapping(bytes4 => address) _controllerContracts;\\n\\n    /**\\n     * @dev Modifier to check if passed prefix is valid\\n     */\\n    modifier validPrefix(bytes4 _prefix) {\\n        require(_productContracts[_prefix] != address(0), \\\"INVALID_ADDRESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"INVALID_ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Trigers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) public override onlyOwner {\\n        require(_contract.isContract(), \\\"Can't add non-contract address\\\");\\n        require(_controller.isContract(), \\\"Can't add non-contract address\\\");\\n        _productContracts[_prefix] = _contract;\\n        _controllerContracts[_prefix] = _controller;\\n        emit RegisterProduct(_prefix, _contract, _controller);\\n    }\\n\\n    /**\\n     * @dev Trigers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) public override onlyOwner {\\n        require(_prefixes.length == _contracts.length, \\\"Invalid input lengths\\\");\\n\\n        for (uint256 i = 0; i < _prefixes.length; i++) {\\n            bytes4 prefix = _prefixes[i];\\n            address addr = _contracts[i];\\n            require(addr.isContract(), \\\"Can't add non-contract address\\\");\\n\\n            address controller = _controllers[i];\\n            require(controller.isContract(), \\\"Can't add non-contract address\\\");\\n\\n            _productContracts[prefix] = addr;\\n            _controllerContracts[prefix] = controller;\\n\\n            emit RegisterProduct(prefix, addr, controller);\\n        }\\n    }\\n\\n    /**\\n     * @dev Trigers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _productContracts[_prefix];\\n    }\\n\\n    /**\\n     * @dev Trigers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        bytes4 prefix = DealId.getPrefix(_dealId);\\n        return _productContracts[prefix];\\n    }\\n\\n    /**\\n     * @dev Trigers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _controllerContracts[_prefix];\\n    }\\n\\n    /**\\n     * @dev Trigers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        bytes4 prefix = DealId.getPrefix(_dealId);\\n        return _controllerContracts[prefix];\\n    }\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _productContracts[_prefix] != address(0);\\n    }\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        bytes4 prefix = DealId.getPrefix(_dealId);\\n        return _productContracts[prefix] != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x9eb2b5a4ef69b9e3c1abfb2d82773351134fb09cc009589394d1ff073b38fe41\",\"license\":\"MIT\"},\"contracts/interfaces/IProductAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IProductAddressResolver {\\n    event RegisterProduct(\\n        bytes4 prefix,\\n        address indexed product,\\n        address indexed controller\\n    );\\n\\n    /**\\n     * @dev Trigers to register new product type in a address resolver\\n     * @param _prefix Bytes4 prefix for product type\\n     * @param _contract Product contract address\\n     * @param _controller Market controller address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting a common interface\\n     */\\n    function registerProduct(\\n        bytes4 _prefix,\\n        address _contract,\\n        address _controller\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register several product types in a address resolver\\n     * @param _prefixes Array of Bytes4 prefixes for each product type\\n     * @param _contracts Array of smart contract addresses for each product\\n     * @param _controllers Array of market controller addresses\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving contract which is not supporting common interface\\n     */\\n    function registerProducts(\\n        bytes4[] calldata _prefixes,\\n        address[] calldata _contracts,\\n        address[] calldata _controllers\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get product address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContract(bytes4 _prefix) external view returns (address);\\n\\n    /**\\n     * @dev Trigers to get product address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IProduct interface\\n     */\\n    function getProductContractByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Trigers to get market controller address by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContract(bytes4 _prefix)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Trigers to get market controller address by deal id\\n     * @param _dealId Product deal idenfitier\\n     * @notice To work with the contract this address should be wrapped around IYieldCurve interface\\n     */\\n    function getControllerContractByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by short prefix.\\n     * @param _prefix Bytes4 prefix for product type\\n     */\\n    function isSupportedProduct(bytes4 _prefix) external view returns (bool);\\n\\n    /**\\n     * @dev Triggers to verify if a specific product is supported by deal id.\\n     * @param _dealId Product deal idenfitier\\n     */\\n    function isSupportedProductByDealId(bytes32 _dealId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x725c8887c2695629e6e6cda13d2ec086d58098b8c1de007efc2d74ee5dabd6ef\",\"license\":\"MIT\"},\"contracts/libraries/DealId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary DealId {\\n    /**\\n     * @dev Generates a deal id using a product prefix and deal number\\n     * @param prefix Product type prefix in bytes4\\n     * @param counter Number of deal to be generated\\n     * @return id in bytes32 with prefix on the left and counter on the right side\\n     */\\n    function generate(bytes32 prefix, uint256 counter)\\n        public\\n        pure\\n        returns (bytes32 id)\\n    {\\n        uint224 num = toUint224(counter);\\n        bytes4 r;\\n        bytes32 zero = 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000;\\n        assembly {\\n            r := and(prefix, zero)\\n            id := add(r, num)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns product based prefix from deal id\\n     * @param id Deal unique identification string\\n     * @return prefix in bytes4\\n     */\\n    function getPrefix(bytes32 id) public pure returns (bytes4 prefix) {\\n        assembly {\\n            prefix := shl(0, id)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns converted number from uint256 to uint224\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"NUMBER_OVERFLOW\\\");\\n        return uint224(value);\\n    }\\n}\\n\",\"keccak256\":\"0x21952ac52bc146311f6e0b912c4d4a7a48185c72063e7ab84d11ff6ba3923116\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561097c806100326000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634d86283f116100665780634d86283f1461026a578063624d7622146102875780638da5cb5b146102a4578063aaa30df0146102ac578063c8134670146102c957610093565b80630b6aa9d91461009857806310091039146101ae57806326ad89a2146101f15780634cb2ee721461022c575b600080fd5b6101ac600480360360608110156100ae57600080fd5b8101906020810181356401000000008111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460208302840111640100000000831117156100fd57600080fd5b91939092909160208101903564010000000081111561011b57600080fd5b82018360208201111561012d57600080fd5b8035906020019184602083028401116401000000008311171561014f57600080fd5b91939092909160208101903564010000000081111561016d57600080fd5b82018360208201111561017f57600080fd5b803590602001918460208302840111640100000000831117156101a157600080fd5b5090925090506102f0565b005b6101d5600480360360208110156101c457600080fd5b50356001600160e01b031916610530565b604080516001600160a01b039092168252519081900360200190f35b6102186004803603602081101561020757600080fd5b50356001600160e01b031916610555565b604080519115158252519081900360200190f35b6101ac6004803603606081101561024257600080fd5b506001600160e01b0319813516906001600160a01b036020820135811691604001351661057c565b6101d56004803603602081101561028057600080fd5b50356106f5565b6102186004803603602081101561029d57600080fd5b503561079c565b6101d5610845565b6101d5600480360360208110156102c257600080fd5b5035610854565b6101d5600480360360208110156102df57600080fd5b50356001600160e01b0319166108fb565b6000546001600160a01b03163314610340576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41434345535360901b604482015290519081900360640190fd5b84831461038c576040805162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e707574206c656e6774687360581b604482015290519081900360640190fd5b60005b858110156105275760008787838181106103a557fe5b905060200201356001600160e01b031916905060008686848181106103c657fe5b905060200201356001600160a01b031690506103ea816001600160a01b0316610920565b610429576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b600085858581811061043757fe5b905060200201356001600160a01b0316905061045b816001600160a01b0316610920565b61049a576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b6001600160e01b03198316600081815260016020908152604080832080546001600160a01b03199081166001600160a01b038981169182179093556002855294839020805490911691871691821790558151948552905190937f888090231065fb3d22247ad5ac8e9b79ec709ce109c099c550d0e23f1f941f0f92908290030190a350505060010161038f565b50505050505050565b6001600160e01b0319166000908152600160205260409020546001600160a01b031690565b6001600160e01b0319166000908152600160205260409020546001600160a01b0316151590565b6000546001600160a01b031633146105cc576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41434345535360901b604482015290519081900360640190fd5b6105de826001600160a01b0316610920565b61061d576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b61062f816001600160a01b0316610920565b61066e576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b6001600160e01b03198316600081815260016020908152604080832080546001600160a01b03199081166001600160a01b038981169182179093556002855294839020805490911691871691821790558151948552905190937f888090231065fb3d22247ad5ac8e9b79ec709ce109c099c550d0e23f1f941f0f92908290030190a3505050565b600080737296b5194f4E140B2d64Ec967285e007d9880365630d6267e8846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561074757600080fd5b505af415801561075b573d6000803e3d6000fd5b505050506040513d602081101561077157600080fd5b50516001600160e01b0319166000908152600160205260409020546001600160a01b03169392505050565b600080737296b5194f4E140B2d64Ec967285e007d9880365630d6267e8846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156107ee57600080fd5b505af4158015610802573d6000803e3d6000fd5b505050506040513d602081101561081857600080fd5b50516001600160e01b0319166000908152600160205260409020546001600160a01b031615159392505050565b6000546001600160a01b031681565b600080737296b5194f4E140B2d64Ec967285e007d9880365630d6267e8846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156108a657600080fd5b505af41580156108ba573d6000803e3d6000fd5b505050506040513d60208110156108d057600080fd5b50516001600160e01b0319166000908152600260205260409020546001600160a01b03169392505050565b6001600160e01b0319166000908152600260205260409020546001600160a01b031690565b3b15159056fe43616e277420616464206e6f6e2d636f6e747261637420616464726573730000a264697066735822122025dd616b3ee516d7d1947e16e2c52eb13b20c80a3daf0f6a5217b2157a0af71664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80634d86283f116100665780634d86283f1461026a578063624d7622146102875780638da5cb5b146102a4578063aaa30df0146102ac578063c8134670146102c957610093565b80630b6aa9d91461009857806310091039146101ae57806326ad89a2146101f15780634cb2ee721461022c575b600080fd5b6101ac600480360360608110156100ae57600080fd5b8101906020810181356401000000008111156100c957600080fd5b8201836020820111156100db57600080fd5b803590602001918460208302840111640100000000831117156100fd57600080fd5b91939092909160208101903564010000000081111561011b57600080fd5b82018360208201111561012d57600080fd5b8035906020019184602083028401116401000000008311171561014f57600080fd5b91939092909160208101903564010000000081111561016d57600080fd5b82018360208201111561017f57600080fd5b803590602001918460208302840111640100000000831117156101a157600080fd5b5090925090506102f0565b005b6101d5600480360360208110156101c457600080fd5b50356001600160e01b031916610530565b604080516001600160a01b039092168252519081900360200190f35b6102186004803603602081101561020757600080fd5b50356001600160e01b031916610555565b604080519115158252519081900360200190f35b6101ac6004803603606081101561024257600080fd5b506001600160e01b0319813516906001600160a01b036020820135811691604001351661057c565b6101d56004803603602081101561028057600080fd5b50356106f5565b6102186004803603602081101561029d57600080fd5b503561079c565b6101d5610845565b6101d5600480360360208110156102c257600080fd5b5035610854565b6101d5600480360360208110156102df57600080fd5b50356001600160e01b0319166108fb565b6000546001600160a01b03163314610340576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41434345535360901b604482015290519081900360640190fd5b84831461038c576040805162461bcd60e51b8152602060048201526015602482015274496e76616c696420696e707574206c656e6774687360581b604482015290519081900360640190fd5b60005b858110156105275760008787838181106103a557fe5b905060200201356001600160e01b031916905060008686848181106103c657fe5b905060200201356001600160a01b031690506103ea816001600160a01b0316610920565b610429576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b600085858581811061043757fe5b905060200201356001600160a01b0316905061045b816001600160a01b0316610920565b61049a576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b6001600160e01b03198316600081815260016020908152604080832080546001600160a01b03199081166001600160a01b038981169182179093556002855294839020805490911691871691821790558151948552905190937f888090231065fb3d22247ad5ac8e9b79ec709ce109c099c550d0e23f1f941f0f92908290030190a350505060010161038f565b50505050505050565b6001600160e01b0319166000908152600160205260409020546001600160a01b031690565b6001600160e01b0319166000908152600160205260409020546001600160a01b0316151590565b6000546001600160a01b031633146105cc576040805162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f41434345535360901b604482015290519081900360640190fd5b6105de826001600160a01b0316610920565b61061d576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b61062f816001600160a01b0316610920565b61066e576040805162461bcd60e51b815260206004820152601e6024820152600080516020610927833981519152604482015290519081900360640190fd5b6001600160e01b03198316600081815260016020908152604080832080546001600160a01b03199081166001600160a01b038981169182179093556002855294839020805490911691871691821790558151948552905190937f888090231065fb3d22247ad5ac8e9b79ec709ce109c099c550d0e23f1f941f0f92908290030190a3505050565b60008073__$840828ea7a247221c7100f4d3622b584a5$__630d6267e8846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561074757600080fd5b505af415801561075b573d6000803e3d6000fd5b505050506040513d602081101561077157600080fd5b50516001600160e01b0319166000908152600160205260409020546001600160a01b03169392505050565b60008073__$840828ea7a247221c7100f4d3622b584a5$__630d6267e8846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156107ee57600080fd5b505af4158015610802573d6000803e3d6000fd5b505050506040513d602081101561081857600080fd5b50516001600160e01b0319166000908152600160205260409020546001600160a01b031615159392505050565b6000546001600160a01b031681565b60008073__$840828ea7a247221c7100f4d3622b584a5$__630d6267e8846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156108a657600080fd5b505af41580156108ba573d6000803e3d6000fd5b505050506040513d60208110156108d057600080fd5b50516001600160e01b0319166000908152600260205260409020546001600160a01b03169392505050565b6001600160e01b0319166000908152600260205260409020546001600160a01b031690565b3b15159056fe43616e277420616464206e6f6e2d636f6e747261637420616464726573730000a264697066735822122025dd616b3ee516d7d1947e16e2c52eb13b20c80a3daf0f6a5217b2157a0af71664736f6c634300060c0033",
  "libraries": {
    "DealId": "0x7296b5194f4E140B2d64Ec967285e007d9880365"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Contract constructor function."
      },
      "getControllerContract(bytes4)": {
        "details": "Trigers to get market controller address by short prefix.",
        "params": {
          "_prefix": "Bytes4 prefix for product type"
        }
      },
      "getControllerContractByDealId(bytes32)": {
        "details": "Trigers to get market controller address by deal id",
        "params": {
          "_dealId": "Product deal idenfitier"
        }
      },
      "getProductContract(bytes4)": {
        "details": "Trigers to get product address by short prefix.",
        "params": {
          "_prefix": "Bytes4 prefix for product type"
        }
      },
      "getProductContractByDealId(bytes32)": {
        "details": "Trigers to get product address by deal id",
        "params": {
          "_dealId": "Product deal idenfitier"
        }
      },
      "isSupportedProduct(bytes4)": {
        "details": "Triggers to verify if a specific product is supported by short prefix.",
        "params": {
          "_prefix": "Bytes4 prefix for product type"
        }
      },
      "isSupportedProductByDealId(bytes32)": {
        "details": "Triggers to verify if a specific product is supported by deal id.",
        "params": {
          "_dealId": "Product deal idenfitier"
        }
      },
      "registerProduct(bytes4,address,address)": {
        "details": "Trigers to register new product type in a address resolver",
        "params": {
          "_contract": "Product contract address",
          "_prefix": "Bytes4 prefix for product type"
        }
      },
      "registerProducts(bytes4[],address[],address[])": {
        "details": "Trigers to register several product types in a address resolver",
        "params": {
          "_contracts": "Array of smart contract addresses for each product",
          "_prefixes": "Array of Bytes4 prefixes for each product type"
        }
      }
    },
    "title": "ProductAddressResolver contract is used to store addresses for each product type supported on the protocol. Addresses stored per bytes4 prefixes which are a simple identifiers of the product type",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": "sets contract deployer as owner of this contract",
      "getControllerContract(bytes4)": {
        "notice": "To work with the contract this address should be wrapped around IYieldCurve interface"
      },
      "getControllerContractByDealId(bytes32)": {
        "notice": "To work with the contract this address should be wrapped around IYieldCurve interface"
      },
      "getProductContract(bytes4)": {
        "notice": "To work with the contract this address should be wrapped around IProduct interface"
      },
      "getProductContractByDealId(bytes32)": {
        "notice": "To work with the contract this address should be wrapped around IProduct interface"
      },
      "registerProduct(bytes4,address,address)": {
        "notice": "Trigers only be contract ownerReverts on saving contract which is not supporting a common interface"
      },
      "registerProducts(bytes4[],address[],address[])": {
        "notice": "Trigers only be contract ownerReverts on saving contract which is not supporting common interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18996,
        "contract": "contracts/ProductAddressResolver.sol:ProductAddressResolver",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19000,
        "contract": "contracts/ProductAddressResolver.sol:ProductAddressResolver",
        "label": "_productContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes4,t_address)"
      },
      {
        "astId": 19004,
        "contract": "contracts/ProductAddressResolver.sol:ProductAddressResolver",
        "label": "_controllerContracts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes4,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_bytes4,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}