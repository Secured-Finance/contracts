{
  "address": "0xEA103561aB3c058629aA48D0e5922089529Ca86A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_requestFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_settlementEngine",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccy",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_txHash",
          "type": "string"
        }
      ],
      "name": "createRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_from",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_to",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_txHash",
          "type": "string"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isRequested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jobId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "updateChainlinkOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        }
      ],
      "name": "updateJobId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestFee",
          "type": "uint256"
        }
      ],
      "name": "updateRequestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb983172d9d7a33197d4e8374db827ca42450f0c60e485a3e870ec2173a1c503e",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xEA103561aB3c058629aA48D0e5922089529Ca86A",
    "transactionIndex": 36,
    "gasUsed": "1475777",
    "logsBloom": "0x
    "blockHash": "0xb127bbe1897eb42d6f2aa7280e91d4157c5f26e40721632e772469c07e1e8f58",
    "transactionHash": "0xb983172d9d7a33197d4e8374db827ca42450f0c60e485a3e870ec2173a1c503e",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 10650653,
        "transactionHash": "0xb983172d9d7a33197d4e8374db827ca42450f0c60e485a3e870ec2173a1c503e",
        "address": "0xEA103561aB3c058629aA48D0e5922089529Ca86A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000057ab42d4fa756b6956b0caf986a5f53ba90d9e28"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0xb127bbe1897eb42d6f2aa7280e91d4157c5f26e40721632e772469c07e1e8f58"
      }
    ],
    "blockNumber": 10650653,
    "cumulativeGasUsed": "11920810",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x04A909955AcF331Ca73066bfc3c0F490cd2908e3",
    "0x3863356238303064333165633439633138303465663832376265383163306663",
    "100000000000000000",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0x46494c0000000000000000000000000000000000000000000000000000000000",
    "0x604BC283e44389549733751Fb9bcfBbcbD89E47a"
  ],
  "numDeployments": 1,
  "solcInputHash": "58bec008f567b23afb790d5d6fbc8a26",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_requestFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_settlementEngine\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccy\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"createRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_txHash\",\"type\":\"string\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updateChainlinkOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"updateJobId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestFee\",\"type\":\"uint256\"}],\"name\":\"updateRequestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelRequest(bytes32,bytes4,uint256)\":{\"details\":\"Triggers to cancell a request if it has not been fulfilled\",\"params\":{\"_callbackFunctionId\":\"The callback function specified for the request\",\"_expiration\":\"The time of the expiration for the request\",\"_requestId\":\"The id to specify a request\"}},\"constructor\":{\"details\":\"Contract constructor function.\",\"params\":{\"_jobId\":\"The job id on the Cahinlink node\",\"_link\":\"The address of the LINK token contract\",\"_oracle\":\"The address of the oracle contract\",\"_requestFee\":\"The amount of LINK sent for the request\"}},\"createRequest(string)\":{\"details\":\"Triggers to request the data from Chainlink External Adaptor. This function specify a callback function name\",\"params\":{\"_txHash\":\"The hash that is specify the data to get\"}},\"fulfill(bytes32,string,string,uint256,uint256,string)\":{\"details\":\"Triggers to receive the data from a job that is specified by `createRequestTo` function. This function name is specified when `buildChainlinkRequest` is called\",\"params\":{\"_from\":\"The from address of the data received\",\"_requestId\":\"The id to specify a request\",\"_timestamp\":\"The timestamp of the data received\",\"_to\":\"The to address of the data received\",\"_value\":\"The value of the data received\"}},\"getChainlinkOracle()\":{\"details\":\"Gets contract address of the oracle that is set at constructor\",\"returns\":{\"_0\":\"address The address of the oracle contract\"}},\"getChainlinkToken()\":{\"details\":\"Gets contract address of the LINK token that is set at constructor\",\"returns\":{\"_0\":\"address The address of the LINK token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateChainlinkOracle(address)\":{\"details\":\"Updates the stored oracle address\",\"params\":{\"_oracle\":\"The address of the oracle contract\"}},\"updateJobId(bytes32)\":{\"details\":\"Updates the stored job id\",\"params\":{\"_jobId\":\"The job id on the Cahinlink node\"}},\"updateRequestFee(uint256)\":{\"details\":\"Updates the stored amount of LINK to send for the request\",\"params\":{\"_requestFee\":\"The amount of LINK sent for the request\"}},\"withdrawLink()\":{\"details\":\"Triggers to withdraw LINK Token. LINK token is needed to hold by this contract to use the Chainlink\"}},\"title\":\"ChainlinkSettlementAdapter is managing requests to Chainlink for a settlement process.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"`_link` is provided for development usage\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChainlinkSettlementAdaptor.sol\":\"ChainlinkSettlementAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x478824bd30ceb9ca90a1ab7af243a6d0eb3a4f5108add98b3a8a3654ae2416e8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdf6c13e3d09e62494dd7bc719f28be3b13ef66dc6f90475b9e14f6745581ff40\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5461aa441a5578fdb7181169e0060b8cb3e7eb96441140e8353424deae730073\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xbcc882630a19fcf5624418e16da7b6120189fdb15d3b9dfa2bcba26bc01681b9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0x61bb541e43d816b7a6955cb659fcaf6d522fa5f376a4b18b8198268f1fb0b593\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\nimport \\\"./OracleInterface.sol\\\";\\n\\ninterface OperatorInterface is ChainlinkRequestInterface, OracleInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xdaf32685096f5656e06d42a0b4b21b40d6cae01785bd6c422d3cd5205490ebf5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7ad27eb013cd09554025f0db7a7db9eb1eb020f948fe891d9ed8c0215680f498\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x1a8dd8a731f8a21031d2b77f6dacd71886bd36ba284c124610968d5a4ca32a7d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    uint256 mask = 256**(32 - len) - 1;\\n    assembly {\\n      let srcpart := and(mload(src), not(mask))\\n      let destpart := and(mload(dest), mask)\\n      mstore(dest, or(destpart, srcpart))\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    // Right-align data\\n    data = data >> (8 * (32 - len));\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = 256**len - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x0e32a9fae6007927208e03b9147651715d8174a4a2ed9e5858defd1b35a31494\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.7/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0xeaeeab9e72f50bbfd1feeaf2c039a6586a04873b419330a7d6ca30d143be037d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/ChainlinkSettlementAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@chainlink/contracts/src/v0.7/ChainlinkClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISettlementEngine.sol\\\";\\nimport \\\"./interfaces/IExternalAdapterTxResponse.sol\\\";\\n\\n/**\\n * @title ChainlinkSettlementAdapter is managing requests to Chainlink for a settlement process.\\n */\\ncontract ChainlinkSettlementAdapter is\\n    ChainlinkClient,\\n    Ownable,\\n    IExternalAdapterTxResponse\\n{\\n    using Chainlink for Chainlink.Request;\\n\\n    mapping(string => bool) public isRequested;\\n    bytes32 public jobId;\\n    uint256 public requestFee;\\n    bytes32 public ccy;\\n\\n    ISettlementEngine private settlementEngine;\\n\\n    /**\\n     * @dev Contract constructor function.\\n     * @param _oracle The address of the oracle contract\\n     * @param _jobId The job id on the Cahinlink node\\n     * @param _requestFee The amount of LINK sent for the request\\n     * @param _link The address of the LINK token contract\\n     *\\n     * @notice `_link` is provided for development usage\\n     */\\n    constructor(\\n        address _oracle,\\n        bytes32 _jobId,\\n        uint256 _requestFee,\\n        address _link,\\n        bytes32 _ccy,\\n        address _settlementEngine\\n    ) public Ownable() {\\n        setChainlinkOracle(_oracle);\\n        jobId = _jobId;\\n        ccy = _ccy;\\n\\n        requestFee = _requestFee;\\n\\n        settlementEngine = ISettlementEngine(_settlementEngine);\\n\\n        if (_link == address(0)) {\\n            setPublicChainlinkToken();\\n        } else {\\n            setChainlinkToken(_link);\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets contract address of the LINK token that is set at constructor\\n     *\\n     * @return address The address of the LINK token\\n     */\\n    function getChainlinkToken() public view returns (address) {\\n        return chainlinkTokenAddress();\\n    }\\n\\n    /**\\n     * @dev Gets contract address of the oracle that is set at constructor\\n     *\\n     * @return address The address of the oracle contract\\n     */\\n    function getChainlinkOracle() public view returns (address) {\\n        return chainlinkOracleAddress();\\n    }\\n\\n    /**\\n     * @dev Updates the stored oracle address\\n     * @param _oracle The address of the oracle contract\\n     */\\n    function updateChainlinkOracle(address _oracle) public onlyOwner {\\n        setChainlinkOracle(_oracle);\\n    }\\n\\n    /**\\n     * @dev Updates the stored job id\\n     * @param _jobId The job id on the Cahinlink node\\n     */\\n    function updateJobId(bytes32 _jobId) public onlyOwner {\\n        jobId = _jobId;\\n    }\\n\\n    /**\\n     * @dev Updates the stored amount of LINK to send for the request\\n     * @param _requestFee The amount of LINK sent for the request\\n     */\\n    function updateRequestFee(uint256 _requestFee) public onlyOwner {\\n        requestFee = _requestFee;\\n    }\\n\\n    /**\\n     * @dev Triggers to request the data from Chainlink External Adaptor.\\n     * This function specify a callback function name\\n     * @param _txHash The hash that is specify the data to get\\n     */\\n    function createRequest(string memory _txHash)\\n        public\\n        returns (bytes32 requestId)\\n    {\\n        _onlySettlementEngine();\\n        require(!isRequested[_txHash], \\\"REQUEST_EXIST_ALREADY\\\");\\n        isRequested[_txHash] = true;\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfill.selector\\n        );\\n        req.add(\\\"txHash\\\", _txHash);\\n        requestId = sendChainlinkRequest(req, requestFee);\\n    }\\n\\n    /**\\n     * @dev Triggers to cancell a request if it has not been fulfilled\\n     * @param _requestId The id to specify a request\\n     * @param _callbackFunctionId The callback function specified for the request\\n     * @param _expiration The time of the expiration for the request\\n     */\\n    function cancelRequest(\\n        bytes32 _requestId,\\n        bytes4 _callbackFunctionId,\\n        uint256 _expiration\\n    ) public onlyOwner {\\n        _onlySettlementEngine();\\n        cancelChainlinkRequest(\\n            _requestId,\\n            requestFee,\\n            _callbackFunctionId,\\n            _expiration\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to receive the data from a job that is specified by `createRequestTo` function.\\n     * This function name is specified when `buildChainlinkRequest` is called\\n     * @param _requestId The id to specify a request\\n     * @param _from The from address of the data received\\n     * @param _to The to address of the data received\\n     * @param _value The value of the data received\\n     * @param _timestamp The timestamp of the data received\\n     */\\n    function fulfill(\\n        bytes32 _requestId,\\n        string calldata _from,\\n        string calldata _to,\\n        uint256 _value,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) public recordChainlinkFulfillment(_requestId) {\\n        FulfillData memory txData = FulfillData({\\n            from: _from,\\n            to: _to,\\n            value: _value,\\n            timestamp: _timestamp,\\n            txHash: _txHash\\n        });\\n\\n        settlementEngine.fullfillSettlementRequest(_requestId, txData, ccy);\\n    }\\n\\n    /**\\n     * @dev Triggers to withdraw LINK Token.\\n     * LINK token is needed to hold by this contract to use the Chainlink\\n     */\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n        require(\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\n            \\\"Unable to transfer\\\"\\n        );\\n    }\\n\\n    function _onlySettlementEngine() internal {\\n        require(\\n            msg.sender == address(settlementEngine),\\n            \\\"NOT_SETTLEMENT_ENGINE\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1e8b2334db26db27c7765f322688d443b15c75a0f5d2f201ea0f28b55a1e438a\",\"license\":\"MIT\"},\"contracts/interfaces/IExternalAdapterTxResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12 <=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IExternalAdapterTxResponse {\\n    struct FulfillData {\\n        string from;\\n        string to;\\n        uint256 value;\\n        uint256 timestamp;\\n        string txHash;\\n    }\\n}\\n\",\"keccak256\":\"0xf327a0d3768b23f1f611093375cb3cc897314baf1eb5a0368c136b87ca54e431\",\"license\":\"MIT\"},\"contracts/interfaces/ISettlementEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.3. SEE SOURCE BELOW. !!\\npragma solidity >=0.6.12 <=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IExternalAdapterTxResponse.sol\\\";\\n\\ninterface ISettlementEngine {\\n    event CrosschainSettlementRequested(\\n        address payer,\\n        address receiver,\\n        uint16 chainId,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 requestId\\n    );\\n    event CrosschainSettlementRequestFulfilled(\\n        string payer,\\n        string receiver,\\n        uint16 chainId,\\n        uint256 amount,\\n        uint256 timestamp,\\n        string txHash,\\n        bytes32 settlementId\\n    );\\n    event ExternalAdapterAdded(address indexed adapter, bytes32 ccy);\\n    event ExternalAdapterUpdated(address indexed adapter, bytes32 ccy);\\n\\n    function addExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function externalAdapters(uint16) external view returns (address);\\n\\n    function fullfillSettlementRequest(\\n        bytes32 _requestId,\\n        IExternalAdapterTxResponse.FulfillData calldata _txData,\\n        bytes32 _ccy\\n    ) external;\\n\\n    function getVersion() external view returns (uint16);\\n\\n    function owner() external view returns (address);\\n\\n    function replaceExternalAdapter(address _adapter, bytes32 _ccy) external;\\n\\n    function settlementRequests(bytes32)\\n        external\\n        view\\n        returns (\\n            address payer,\\n            address receiver,\\n            uint16 chainId,\\n            uint256 timestamp,\\n            string memory txHash\\n        );\\n\\n    function verifyPayment(\\n        address _counterparty,\\n        bytes32 _ccy,\\n        uint256 _payment,\\n        uint256 _timestamp,\\n        string calldata _txHash\\n    ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf53a0d5e0db7dd5472f688ad97addb2a0fb87c37140862834f2ae0d8da55e73d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004553480156200001657600080fd5b50604051620018d9380380620018d983398101604081905262000039916200021b565b600062000045620000fb565b600680546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506200009e86620000ff565b6008859055600a8290556009849055600b80546001600160a01b0319166001600160a01b03838116919091179091558316620000e457620000de62000121565b620000ef565b620000ef83620001b6565b50505050505062000283565b3390565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b620001b473c89bd4e1632d3a43cb03aaad5262cbe4038bc5716001600160a01b03166338cc48316040518163ffffffff1660e01b815260040160206040518083038186803b1580156200017357600080fd5b505afa15801562000188573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ae9190620001f6565b620001b6565b565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b80516001600160a01b0381168114620001f057600080fd5b92915050565b60006020828403121562000208578081fd5b620002148383620001d8565b9392505050565b60008060008060008060c0878903121562000234578182fd5b620002408888620001d8565b955060208701519450604087015193506200025f8860608901620001d8565b925060808701519150620002778860a08901620001d8565b90509295509295509295565b61164680620002936000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806393026e4111610097578063d4bd499311610066578063d4bd4993146101d9578063eb2e578b146101ec578063f0ace3ff146101f4578063f2fde38b146101fc57610100565b806393026e41146101a3578063a5f7379f146101b6578063c2939d97146101be578063ca4f2afc146101c657610100565b806370015371116100d35780637001537114610178578063715018a61461018b5780638da5cb5b146101935780638dc654a21461019b57610100565b8063103cd6c814610105578063165d35e11461011a5780631b146ecf146101385780634437f3da14610158575b600080fd5b6101186101133660046110ab565b61020f565b005b61012261025c565b60405161012f91906112ce565b60405180910390f35b61014b6101463660046111bb565b61026b565b60405161012f9190611395565b61016b6101663660046111bb565b610343565b60405161012f919061138a565b6101186101863660046110ab565b610363565b6101186103a7565b610122610430565b61011861043f565b6101186101b1366004611106565b6105a4565b61014b610765565b61014b61076b565b6101186101d43660046110c3565b610771565b6101186101e7366004611064565b6107cb565b61014b610813565b610122610819565b61011861020a366004611064565b610823565b6102176108e4565b6001600160a01b0316610228610430565b6001600160a01b0316146102575760405162461bcd60e51b815260040161024e9061155b565b60405180910390fd5b600955565b60006102666108e8565b905090565b60006102756108f7565b60078260405161028591906112b2565b9081526040519081900360200190205460ff16156102b55760405162461bcd60e51b815260040161024e90611448565b60016007836040516102c791906112b2565b908152604051908190036020019020805491151560ff199092169190911790556102ef610f9f565b60085461030490306393026e4160e01b610923565b6040805180820190915260068152650e8f090c2e6d60d31b602082015290915061033090829085610948565b61033c81600954610966565b9392505050565b805160208183018101805160078252928201919093012091525460ff1681565b61036b6108e4565b6001600160a01b031661037c610430565b6001600160a01b0316146103a25760405162461bcd60e51b815260040161024e9061155b565b600855565b6103af6108e4565b6001600160a01b03166103c0610430565b6001600160a01b0316146103e65760405162461bcd60e51b815260040161024e9061155b565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031690565b6104476108e4565b6001600160a01b0316610458610430565b6001600160a01b03161461047e5760405162461bcd60e51b815260040161024e9061155b565b60006104886108e8565b9050806001600160a01b031663a9059cbb33836001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104c691906112ce565b60206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610516919061124c565b6040518363ffffffff1660e01b81526004016105339291906112e2565b602060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061108b565b6105a15760405162461bcd60e51b815260040161024e9061152f565b50565b60008981526005602052604090205489906001600160a01b031633146105dc5760405162461bcd60e51b815260040161024e90611590565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2610627610fd4565b6040518060a001604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8c018190048102820181019092528a815291810191908b908b9081908401838280828437600092019190915250505090825250602080820189905260408083018990528051601f88018390048302810183019091528681526060909201919087908790819084018382808284376000920191909152505050915250600b54600a546040516322f6d30360e21b81529293506001600160a01b0390911691638bdb4c0c91610726918f91869160040161139e565b600060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b505050505050505050505050505050565b600a5481565b60085481565b6107796108e4565b6001600160a01b031661078a610430565b6001600160a01b0316146107b05760405162461bcd60e51b815260040161024e9061155b565b6107b86108f7565b6107c6836009548484610989565b505050565b6107d36108e4565b6001600160a01b03166107e4610430565b6001600160a01b03161461080a5760405162461bcd60e51b815260040161024e9061155b565b6105a181610a47565b60095481565b6000610266610a69565b61082b6108e4565b6001600160a01b031661083c610430565b6001600160a01b0316146108625760405162461bcd60e51b815260040161024e9061155b565b6001600160a01b0381166108885760405162461bcd60e51b815260040161024e90611477565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6002546001600160a01b031690565b600b546001600160a01b031633146109215760405162461bcd60e51b815260040161024e90611500565b565b61092b610f9f565b610933610f9f565b61093f81868686610a78565b95945050505050565b60808301516109579083610abe565b60808301516107c69082610abe565b600354600090610980906001600160a01b03168484610ad5565b90505b92915050565b60008481526005602052604080822080546001600160a01b0319811690915590516001600160a01b039091169186917fe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c59190a2604051636ee4d55360e01b81526001600160a01b03821690636ee4d55390610a0e908890889088908890600401611423565b600060405180830381600087803b158015610a2857600080fd5b505af1158015610a3c573d6000803e3d6000fd5b505050505050505050565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031690565b610a80610f9f565b610a908560800151610100610b5e565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b610acb8260038351610b98565b6107c68282610cb3565b600480546001808201909255835160408086015160808701515191516000956060946320214ca360e11b94610b14948994859430938b926024016112fb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050610b5486838684610ccd565b9695505050505050565b610b66611003565b6020820615610b7b5760208206602003820191505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610bc357610bbd8360e0600585901b168317610deb565b506107c6565b60ff8167ffffffffffffffff1611610c0157610bea836018611fe0600586901b1617610deb565b50610bbd8367ffffffffffffffff83166001610e03565b61ffff8167ffffffffffffffff1611610c4057610c29836019611fe0600586901b1617610deb565b50610bbd8367ffffffffffffffff83166002610e03565b63ffffffff8167ffffffffffffffff1611610c8157610c6a83601a611fe0600586901b1617610deb565b50610bbd8367ffffffffffffffff83166004610e03565b610c9683601b611fe0600586901b1617610deb565b50610cad8367ffffffffffffffff83166008610e03565b50505050565b610cbb611003565b61098083846000015151848551610e1c565b60003084604051602001610ce2929190611290565b60408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea090610d7d90889087908790600401611363565b602060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf919061108b565b610ab65760405162461bcd60e51b815260040161024e906114bd565b610df3611003565b6109808384600001515184610ec8565b610e0b611003565b610ab6848560000151518585610f13565b610e24611003565b8251821115610e3257600080fd5b84602001518285011115610e5c57610e5c85610e548760200151878601610f71565b600202610f88565b600080865180518760208301019350808887011115610e7b5787860182525b505050602084015b60208410610ea25780518252601f199093019260209182019101610e83565b51815160001960208690036101000a019081169019919091161790525083949350505050565b610ed0611003565b83602001518310610eec57610eec848560200151600202610f88565b835180516020858301018481535080851415610f09576001810182525b5093949350505050565b610f1b611003565b84602001518483011115610f3857610f3885858401600202610f88565b60006001836101000a039050855183868201018583198251161781525080518487011115610f665783860181525b509495945050505050565b600081831115610f82575081610983565b50919050565b8151610f948383610b5e565b50610cad8382610cb3565b6040805160a081018252600080825260208201819052918101829052606081019190915260808101610fcf611003565b905290565b6040518060a0016040528060608152602001606081526020016000815260200160008152602001606081525090565b604051806040016040528060608152602001600081525090565b60008083601f84011261102e578182fd5b50813567ffffffffffffffff811115611045578182fd5b60208301915083602082850101111561105d57600080fd5b9250929050565b600060208284031215611075578081fd5b81356001600160a01b038116811461033c578182fd5b60006020828403121561109c578081fd5b8151801515811461033c578182fd5b6000602082840312156110bc578081fd5b5035919050565b6000806000606084860312156110d7578182fd5b8335925060208401356001600160e01b0319811681146110f5578283fd5b929592945050506040919091013590565b600080600080600080600080600060c08a8c031215611123578485fd5b8935985060208a013567ffffffffffffffff80821115611141578687fd5b61114d8d838e0161101d565b909a50985060408c0135915080821115611165578687fd5b6111718d838e0161101d565b909850965060608c0135955060808c0135945060a08c0135915080821115611197578384fd5b506111a48c828d0161101d565b915080935050809150509295985092959850929598565b6000602082840312156111cc578081fd5b813567ffffffffffffffff808211156111e3578283fd5b818401915084601f8301126111f6578283fd5b813581811115611204578384fd5b604051601f8201601f191681016020018381118282101715611224578586fd5b60405281815283820160200187101561123b578485fd5b610b548260208301602087016115d8565b60006020828403121561125d578081fd5b5051919050565b6000815180845261127c8160208601602086016115e4565b601f01601f19169290920160200192915050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b600082516112c48184602087016115e4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e0820181905260009061135483820185611264565b9b9a5050505050505050505050565b600060018060a01b03851682528360208301526060604083015261093f6060830184611264565b901515815260200190565b90815260200190565b600084825260606020830152835160a060608401526113c1610100840182611264565b90506020850151605f19808584030160808601526113df8383611264565b9250604087015160a0860152606087015160c086015260808701519150808584030160e0860152506114118282611264565b92505050826040830152949350505050565b93845260208401929092526001600160e01b0319166040830152606082015260800190565b602080825260159082015274524551554553545f45584953545f414c524541445960581b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526023908201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604082015262636c6560e81b606082015260800190565b6020808252601590820152744e4f545f534554544c454d454e545f454e47494e4560581b604082015260600190565b6020808252601290820152712ab730b13632903a37903a3930b739b332b960711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604082015267081c995c5d595cdd60c21b606082015260800190565b82818337506000910152565b60005b838110156115ff5781810151838201526020016115e7565b83811115610cad575050600091015256fea2646970667358221220b78a2b3ca6e437c14cfdd42dc15f1b54289aa841723631ed91d7cc6e4c3972e064736f6c63430007000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806393026e4111610097578063d4bd499311610066578063d4bd4993146101d9578063eb2e578b146101ec578063f0ace3ff146101f4578063f2fde38b146101fc57610100565b806393026e41146101a3578063a5f7379f146101b6578063c2939d97146101be578063ca4f2afc146101c657610100565b806370015371116100d35780637001537114610178578063715018a61461018b5780638da5cb5b146101935780638dc654a21461019b57610100565b8063103cd6c814610105578063165d35e11461011a5780631b146ecf146101385780634437f3da14610158575b600080fd5b6101186101133660046110ab565b61020f565b005b61012261025c565b60405161012f91906112ce565b60405180910390f35b61014b6101463660046111bb565b61026b565b60405161012f9190611395565b61016b6101663660046111bb565b610343565b60405161012f919061138a565b6101186101863660046110ab565b610363565b6101186103a7565b610122610430565b61011861043f565b6101186101b1366004611106565b6105a4565b61014b610765565b61014b61076b565b6101186101d43660046110c3565b610771565b6101186101e7366004611064565b6107cb565b61014b610813565b610122610819565b61011861020a366004611064565b610823565b6102176108e4565b6001600160a01b0316610228610430565b6001600160a01b0316146102575760405162461bcd60e51b815260040161024e9061155b565b60405180910390fd5b600955565b60006102666108e8565b905090565b60006102756108f7565b60078260405161028591906112b2565b9081526040519081900360200190205460ff16156102b55760405162461bcd60e51b815260040161024e90611448565b60016007836040516102c791906112b2565b908152604051908190036020019020805491151560ff199092169190911790556102ef610f9f565b60085461030490306393026e4160e01b610923565b6040805180820190915260068152650e8f090c2e6d60d31b602082015290915061033090829085610948565b61033c81600954610966565b9392505050565b805160208183018101805160078252928201919093012091525460ff1681565b61036b6108e4565b6001600160a01b031661037c610430565b6001600160a01b0316146103a25760405162461bcd60e51b815260040161024e9061155b565b600855565b6103af6108e4565b6001600160a01b03166103c0610430565b6001600160a01b0316146103e65760405162461bcd60e51b815260040161024e9061155b565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031690565b6104476108e4565b6001600160a01b0316610458610430565b6001600160a01b03161461047e5760405162461bcd60e51b815260040161024e9061155b565b60006104886108e8565b9050806001600160a01b031663a9059cbb33836001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016104c691906112ce565b60206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610516919061124c565b6040518363ffffffff1660e01b81526004016105339291906112e2565b602060405180830381600087803b15801561054d57600080fd5b505af1158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061108b565b6105a15760405162461bcd60e51b815260040161024e9061152f565b50565b60008981526005602052604090205489906001600160a01b031633146105dc5760405162461bcd60e51b815260040161024e90611590565b60008181526005602052604080822080546001600160a01b03191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a2610627610fd4565b6040518060a001604052808b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8c018190048102820181019092528a815291810191908b908b9081908401838280828437600092019190915250505090825250602080820189905260408083018990528051601f88018390048302810183019091528681526060909201919087908790819084018382808284376000920191909152505050915250600b54600a546040516322f6d30360e21b81529293506001600160a01b0390911691638bdb4c0c91610726918f91869160040161139e565b600060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b505050505050505050505050505050565b600a5481565b60085481565b6107796108e4565b6001600160a01b031661078a610430565b6001600160a01b0316146107b05760405162461bcd60e51b815260040161024e9061155b565b6107b86108f7565b6107c6836009548484610989565b505050565b6107d36108e4565b6001600160a01b03166107e4610430565b6001600160a01b03161461080a5760405162461bcd60e51b815260040161024e9061155b565b6105a181610a47565b60095481565b6000610266610a69565b61082b6108e4565b6001600160a01b031661083c610430565b6001600160a01b0316146108625760405162461bcd60e51b815260040161024e9061155b565b6001600160a01b0381166108885760405162461bcd60e51b815260040161024e90611477565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6002546001600160a01b031690565b600b546001600160a01b031633146109215760405162461bcd60e51b815260040161024e90611500565b565b61092b610f9f565b610933610f9f565b61093f81868686610a78565b95945050505050565b60808301516109579083610abe565b60808301516107c69082610abe565b600354600090610980906001600160a01b03168484610ad5565b90505b92915050565b60008481526005602052604080822080546001600160a01b0319811690915590516001600160a01b039091169186917fe1fe3afa0f7f761ff0a8b89086790efd5140d2907ebd5b7ff6bfcb5e075fd4c59190a2604051636ee4d55360e01b81526001600160a01b03821690636ee4d55390610a0e908890889088908890600401611423565b600060405180830381600087803b158015610a2857600080fd5b505af1158015610a3c573d6000803e3d6000fd5b505050505050505050565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b031690565b610a80610f9f565b610a908560800151610100610b5e565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b610acb8260038351610b98565b6107c68282610cb3565b600480546001808201909255835160408086015160808701515191516000956060946320214ca360e11b94610b14948994859430938b926024016112fb565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050610b5486838684610ccd565b9695505050505050565b610b66611003565b6020820615610b7b5760208206602003820191505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610bc357610bbd8360e0600585901b168317610deb565b506107c6565b60ff8167ffffffffffffffff1611610c0157610bea836018611fe0600586901b1617610deb565b50610bbd8367ffffffffffffffff83166001610e03565b61ffff8167ffffffffffffffff1611610c4057610c29836019611fe0600586901b1617610deb565b50610bbd8367ffffffffffffffff83166002610e03565b63ffffffff8167ffffffffffffffff1611610c8157610c6a83601a611fe0600586901b1617610deb565b50610bbd8367ffffffffffffffff83166004610e03565b610c9683601b611fe0600586901b1617610deb565b50610cad8367ffffffffffffffff83166008610e03565b50505050565b610cbb611003565b61098083846000015151848551610e1c565b60003084604051602001610ce2929190611290565b60408051808303601f1901815282825280516020918201206000818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea090610d7d90889087908790600401611363565b602060405180830381600087803b158015610d9757600080fd5b505af1158015610dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcf919061108b565b610ab65760405162461bcd60e51b815260040161024e906114bd565b610df3611003565b6109808384600001515184610ec8565b610e0b611003565b610ab6848560000151518585610f13565b610e24611003565b8251821115610e3257600080fd5b84602001518285011115610e5c57610e5c85610e548760200151878601610f71565b600202610f88565b600080865180518760208301019350808887011115610e7b5787860182525b505050602084015b60208410610ea25780518252601f199093019260209182019101610e83565b51815160001960208690036101000a019081169019919091161790525083949350505050565b610ed0611003565b83602001518310610eec57610eec848560200151600202610f88565b835180516020858301018481535080851415610f09576001810182525b5093949350505050565b610f1b611003565b84602001518483011115610f3857610f3885858401600202610f88565b60006001836101000a039050855183868201018583198251161781525080518487011115610f665783860181525b509495945050505050565b600081831115610f82575081610983565b50919050565b8151610f948383610b5e565b50610cad8382610cb3565b6040805160a081018252600080825260208201819052918101829052606081019190915260808101610fcf611003565b905290565b6040518060a0016040528060608152602001606081526020016000815260200160008152602001606081525090565b604051806040016040528060608152602001600081525090565b60008083601f84011261102e578182fd5b50813567ffffffffffffffff811115611045578182fd5b60208301915083602082850101111561105d57600080fd5b9250929050565b600060208284031215611075578081fd5b81356001600160a01b038116811461033c578182fd5b60006020828403121561109c578081fd5b8151801515811461033c578182fd5b6000602082840312156110bc578081fd5b5035919050565b6000806000606084860312156110d7578182fd5b8335925060208401356001600160e01b0319811681146110f5578283fd5b929592945050506040919091013590565b600080600080600080600080600060c08a8c031215611123578485fd5b8935985060208a013567ffffffffffffffff80821115611141578687fd5b61114d8d838e0161101d565b909a50985060408c0135915080821115611165578687fd5b6111718d838e0161101d565b909850965060608c0135955060808c0135945060a08c0135915080821115611197578384fd5b506111a48c828d0161101d565b915080935050809150509295985092959850929598565b6000602082840312156111cc578081fd5b813567ffffffffffffffff808211156111e3578283fd5b818401915084601f8301126111f6578283fd5b813581811115611204578384fd5b604051601f8201601f191681016020018381118282101715611224578586fd5b60405281815283820160200187101561123b578485fd5b610b548260208301602087016115d8565b60006020828403121561125d578081fd5b5051919050565b6000815180845261127c8160208601602086016115e4565b601f01601f19169290920160200192915050565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b600082516112c48184602087016115e4565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e0820181905260009061135483820185611264565b9b9a5050505050505050505050565b600060018060a01b03851682528360208301526060604083015261093f6060830184611264565b901515815260200190565b90815260200190565b600084825260606020830152835160a060608401526113c1610100840182611264565b90506020850151605f19808584030160808601526113df8383611264565b9250604087015160a0860152606087015160c086015260808701519150808584030160e0860152506114118282611264565b92505050826040830152949350505050565b93845260208401929092526001600160e01b0319166040830152606082015260800190565b602080825260159082015274524551554553545f45584953545f414c524541445960581b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526023908201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604082015262636c6560e81b606082015260800190565b6020808252601590820152744e4f545f534554544c454d454e545f454e47494e4560581b604082015260600190565b6020808252601290820152712ab730b13632903a37903a3930b739b332b960711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604082015267081c995c5d595cdd60c21b606082015260800190565b82818337506000910152565b60005b838110156115ff5781810151838201526020016115e7565b83811115610cad575050600091015256fea2646970667358221220b78a2b3ca6e437c14cfdd42dc15f1b54289aa841723631ed91d7cc6e4c3972e064736f6c63430007000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelRequest(bytes32,bytes4,uint256)": {
        "details": "Triggers to cancell a request if it has not been fulfilled",
        "params": {
          "_callbackFunctionId": "The callback function specified for the request",
          "_expiration": "The time of the expiration for the request",
          "_requestId": "The id to specify a request"
        }
      },
      "constructor": {
        "details": "Contract constructor function.",
        "params": {
          "_jobId": "The job id on the Cahinlink node",
          "_link": "The address of the LINK token contract",
          "_oracle": "The address of the oracle contract",
          "_requestFee": "The amount of LINK sent for the request"
        }
      },
      "createRequest(string)": {
        "details": "Triggers to request the data from Chainlink External Adaptor. This function specify a callback function name",
        "params": {
          "_txHash": "The hash that is specify the data to get"
        }
      },
      "fulfill(bytes32,string,string,uint256,uint256,string)": {
        "details": "Triggers to receive the data from a job that is specified by `createRequestTo` function. This function name is specified when `buildChainlinkRequest` is called",
        "params": {
          "_from": "The from address of the data received",
          "_requestId": "The id to specify a request",
          "_timestamp": "The timestamp of the data received",
          "_to": "The to address of the data received",
          "_value": "The value of the data received"
        }
      },
      "getChainlinkOracle()": {
        "details": "Gets contract address of the oracle that is set at constructor",
        "returns": {
          "_0": "address The address of the oracle contract"
        }
      },
      "getChainlinkToken()": {
        "details": "Gets contract address of the LINK token that is set at constructor",
        "returns": {
          "_0": "address The address of the LINK token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateChainlinkOracle(address)": {
        "details": "Updates the stored oracle address",
        "params": {
          "_oracle": "The address of the oracle contract"
        }
      },
      "updateJobId(bytes32)": {
        "details": "Updates the stored job id",
        "params": {
          "_jobId": "The job id on the Cahinlink node"
        }
      },
      "updateRequestFee(uint256)": {
        "details": "Updates the stored amount of LINK to send for the request",
        "params": {
          "_requestFee": "The amount of LINK sent for the request"
        }
      },
      "withdrawLink()": {
        "details": "Triggers to withdraw LINK Token. LINK token is needed to hold by this contract to use the Chainlink"
      }
    },
    "title": "ChainlinkSettlementAdapter is managing requests to Chainlink for a settlement process.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "`_link` is provided for development usage"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 465,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)2582"
      },
      {
        "astId": 467,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 469,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)2677"
      },
      {
        "astId": 471,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)2731"
      },
      {
        "astId": 474,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4180,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 6361,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "isRequested",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 6363,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "jobId",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 6365,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "requestFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6367,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "ccy",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 6369,
        "contract": "contracts/ChainlinkSettlementAdaptor.sol:ChainlinkSettlementAdapter",
        "label": "settlementEngine",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ISettlementEngine)6782"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)2582": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ISettlementEngine)6782": {
        "encoding": "inplace",
        "label": "contract ISettlementEngine",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)2677": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)2731": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}