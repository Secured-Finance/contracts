{
  "address": "0xC616D55499aacE74cFC3005061b07d239bB22125",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "AutoLiquidationThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "CollateralUserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "CollateralUserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "CollateralVaultLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "CollateralVaultRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "crosschainAddressResolver",
          "type": "address"
        }
      ],
      "name": "CrosschainAddressResolverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "CurrencyControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidations",
          "type": "address"
        }
      ],
      "name": "LiquidationEngineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "LiquidationPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "MarginCallThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "MinCollateralRatioUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "Release",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseUnsettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "SettleCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPV0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPV1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPV0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPV1",
          "type": "uint256"
        }
      ],
      "name": "UpdatePV",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "UseCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UseUnsettledCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUTOLQLEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LQLEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGINLEVEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_COLLATERAL_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "addCollateralUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "checkRegisteredUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crosschainAddressResolver",
      "outputs": [
        {
          "internalType": "contract ICrosschainAddressResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyController",
      "outputs": [
        {
          "internalType": "contract ICurrencyController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "enterVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "enterVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "exitVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "exitVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        }
      ],
      "name": "getCcyExposures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        }
      ],
      "name": "getExposedCurrencies",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getMaxCollateralBookWidthdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getMaxCollateralWidthdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getNetAndTotalPV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        }
      ],
      "name": "getRebalanceCollateralAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getTotalUnsettledExp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUnsettledCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUsedVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        }
      ],
      "name": "getUsedVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isCollateralUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "isCollateralVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_party0PV",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_party1PV",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isSettled",
          "type": "bool"
        }
      ],
      "name": "isCovered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_unsettledExp",
          "type": "uint256"
        }
      ],
      "name": "isCoveredUnsettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "linkCollateralVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidationInETH",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "liquidationAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pv",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationEngine",
      "outputs": [
        {
          "internalType": "contract ILiquidations",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_addresses",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_chainIds",
          "type": "uint256[]"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "removeCollateralUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "removeCollateralVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setCrosschainAddressResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setCurrencyController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setLiquidationEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "settleCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "unsettledCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "updateAutoLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateLiquidationPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marginCallRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_autoLiquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidationPrice",
          "type": "uint256"
        }
      ],
      "name": "updateMainParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "updateMarginCallThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ratio",
          "type": "uint256"
        }
      ],
      "name": "updateMinCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "party1",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "prevPV0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "prevPV1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPV0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentPV1",
          "type": "uint256"
        }
      ],
      "name": "updatePV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "partyB",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSettled",
          "type": "bool"
        }
      ],
      "name": "useCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ccy",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "useUnsettledCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc44635d4cc11d30cae23f0653fe3790cf75ab671ad3d010237af0d8ba1906ffb",
  "receipt": {
    "to": null,
    "from": "0x57AB42d4fa756b6956b0cAf986a5f53bA90D9e28",
    "contractAddress": "0xC616D55499aacE74cFC3005061b07d239bB22125",
    "transactionIndex": 34,
    "gasUsed": "4023230",
    "logsBloom": "0x
    "blockHash": "0x000fab5a88b41cb5ec3779834a20a612f0d085b12452c56229f97b17a2b36b5e",
    "transactionHash": "0xc44635d4cc11d30cae23f0653fe3790cf75ab671ad3d010237af0d8ba1906ffb",
    "logs": [],
    "blockNumber": 10650602,
    "cumulativeGasUsed": "14011949",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c547b2e6a239b041ee2d79dd0b62b5b6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"AutoLiquidationThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CollateralUserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"CollateralUserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CollateralVaultLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CollateralVaultRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"crosschainAddressResolver\",\"type\":\"address\"}],\"name\":\"CrosschainAddressResolverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"CurrencyControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidations\",\"type\":\"address\"}],\"name\":\"LiquidationEngineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LiquidationPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"MarginCallThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MinCollateralRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseUnsettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"SettleCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPV0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPV1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPV0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPV1\",\"type\":\"uint256\"}],\"name\":\"UpdatePV\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"UseCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UseUnsettledCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTOLQLEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LQLEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGINLEVEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COLLATERAL_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addCollateralUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkRegisteredUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crosschainAddressResolver\",\"outputs\":[{\"internalType\":\"contract ICrosschainAddressResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyController\",\"outputs\":[{\"internalType\":\"contract ICurrencyController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"enterVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"enterVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"exitVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"exitVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"}],\"name\":\"getCcyExposures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"}],\"name\":\"getExposedCurrencies\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getMaxCollateralBookWidthdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getMaxCollateralWidthdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getNetAndTotalPV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"}],\"name\":\"getRebalanceCollateralAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalUnsettledExp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUnsettledCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUsedVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"}],\"name\":\"getUsedVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isCollateralUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isCollateralVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_party0PV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_party1PV\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isSettled\",\"type\":\"bool\"}],\"name\":\"isCovered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_unsettledExp\",\"type\":\"uint256\"}],\"name\":\"isCoveredUnsettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"linkCollateralVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationInETH\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"liquidationAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationEngine\",\"outputs\":[{\"internalType\":\"contract ILiquidations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_addresses\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_chainIds\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeCollateralUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"removeCollateralVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCrosschainAddressResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setCurrencyController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setLiquidationEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"settleCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unsettledCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"updateAutoLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateLiquidationPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginCallRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_autoLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationPrice\",\"type\":\"uint256\"}],\"name\":\"updateMainParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"updateMarginCallThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"updateMinCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"party1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"prevPV0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevPV1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPV0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPV1\",\"type\":\"uint256\"}],\"name\":\"updatePV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"partyB\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSettled\",\"type\":\"bool\"}],\"name\":\"useCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ccy\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"useUnsettledCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCollateralUser(address)\":{\"details\":\"Trigers to add contract address to collateral users address set\",\"params\":{\"_user\":\"Collateral user smart contract address\"}},\"getCoverage(address,address)\":{\"details\":\"Triggers to get bilateral position collateral coverage.\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getMaxCollateralBookWidthdraw(address)\":{\"details\":\"Triggers to get maximum amount of ETH available to widthdraw from `_user` collateral book.\",\"params\":{\"_user\":\"User's address\"}},\"getMaxCollateralWidthdraw(address,address)\":{\"details\":\"Triggers to get maximum amount of ETH available to widthdraw from bilateral position between `party0` and `_party1`.\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getNetAndTotalPV(address,address)\":{\"details\":\"Triggers to calculate netted exposures across all currencies with applied haircuts\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getRebalanceCollateralAmounts(address,address)\":{\"details\":\"Triggers to get coverage of the global collateral book against all unsettled exposure.\",\"params\":{\"_party0\":\"Counterparty A address\",\"_party1\":\"Counterparty B address\"}},\"getTotalUnsettledExp(address)\":{\"details\":\"Triggers to calculate total unsettled exposure across all currencies\",\"params\":{\"_user\":\"User's address\"}},\"getUnsettledCoverage(address)\":{\"details\":\"Triggers to get coverage of the global collateral book against all unsettled exposure.\",\"params\":{\"_user\":\"User's address\"}},\"isCollateralUser(address)\":{\"details\":\"Trigers to check if provided `addr` is a collateral user from address set\",\"params\":{\"_user\":\"Contract address to check if it's a collateral user\"}},\"isCollateralVault(address)\":{\"details\":\"Trigers to check if provided address is valid CollateralVault\",\"params\":{\"_vault\":\"Contract address to check if it's a CollateralVault\"}},\"isCovered(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to check if collateral covered more that 150%.\",\"params\":{\"_ccy\":\"Currency to calculate additional PV for\",\"_party0\":\"Counterparty A address\",\"_party0PV\":\"Counterparty A additional present value\",\"_party1\":\"Counterparty B address\",\"_party1PV\":\"Counterparty B additional present value\"}},\"isCoveredUnsettled(address,bytes32,uint256)\":{\"details\":\"Triggers to check if unsettled collateral exposure covered more that 150% from a global collateral book of `_user`.\",\"params\":{\"_ccy\":\"Currency to calculate additional PV for\",\"_unsettledExp\":\"Additional exposure to lock into unsettled exposure\",\"_user\":\"User's ethereum address\"}},\"linkCollateralVault(address)\":{\"details\":\"Trigers to link CollateralVault with aggregator\",\"params\":{\"_vault\":\"CollateralVault smart contract address\"}},\"liquidate(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to liquidate collateral between `from` and `to` parties works liquidation amount in native `ccy`\",\"params\":{\"ccy\":\"Short identifier of currency used to liquidate\",\"from\":\"Address for liquidating collateral from\",\"isSettled\":\"Identifier wether collateral obligations for release is settled\",\"liquidationAmount\":\"Liquidation amount in Ccy\",\"to\":\"Address for sending collateral to\"}},\"liquidate(address,address,uint256)\":{\"details\":\"Triggers to liquidate collateral between `from` and `to` parties works with aggregated liquidation amount in ETH\",\"params\":{\"from\":\"Address for liquidating collateral from\",\"liquidationInETH\":\"Liquidation amount in Ccy\",\"to\":\"Address for sending collateral to\"}},\"register()\":{\"details\":\"Register user and store collateral book\"},\"register(string[],uint256[])\":{\"details\":\"Register user and store collateral book\",\"params\":{\"_addresses\":\"Array of other blockchain addresses\",\"_chainIds\":\"Array of chain ids for other blockchains\"}},\"releaseCollateral(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to reduce PV for specific `ccy` in bilateral position between `partyA` and `partyB`\",\"params\":{\"amount0\":\"Amount of funds to be removed in CcyNetting for counterparty A\",\"amount1\":\"Amount of funds to be removed in CcyNetting for counterparty B\",\"ccy\":\"Specified currency of the deal\",\"partyA\":\"Counterparty A address\",\"partyB\":\"Counterparty B address\"}},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"details\":\"Triggers to reduce the amount of unsettled exposure in specific `ccy` from a global collateral book of `user`\",\"params\":{\"amount\":\"Amount of funds to be unlocked from unsettled exposure in specified ccy\",\"ccy\":\"Specified currency of the deal\",\"user\":\"User's ETH address\"}},\"removeCollateralUser(address)\":{\"details\":\"Trigers to remove collateral user from address set\",\"params\":{\"_user\":\"Collateral user smart contract address\"}},\"removeCollateralVault(address)\":{\"details\":\"Trigers to remove CollateralVault from address set\",\"params\":{\"_vault\":\"CollateralVault smart contract address\"}},\"setCrosschainAddressResolver(address)\":{\"details\":\"Trigers to set cros-chain address resolver contract address\",\"params\":{\"_addr\":\"CrosschainAddressResolver smart contract address\"}},\"setCurrencyController(address)\":{\"details\":\"Trigers to add currency controller contract address\",\"params\":{\"_addr\":\"Currency Controller smart contract address\"}},\"setLiquidationEngine(address)\":{\"details\":\"Trigers to set liquidation engine contract address\",\"params\":{\"_addr\":\"LiquidationEngine smart contract address\"}},\"settleCollateral(address,address,bytes32,uint256,uint256)\":{\"details\":\"Triggers to lock collateral using ETH rate for selected currency.\",\"params\":{\"amount0\":\"Amount of funds to be locked in Ccy for counterparty A\",\"amount1\":\"Amount of funds to be locked in Ccy for counterparty B\",\"ccy\":\"Specified currency of the deal\",\"partyA\":\"Counterparty A address\",\"partyB\":\"Counterparty B address\"}},\"updateAutoLiquidationThreshold(uint256)\":{\"details\":\"Trigers to update liquidation level ratio\",\"params\":{\"_ratio\":\"Auto Liquidation level ratio\"}},\"updateLiquidationPrice(uint256)\":{\"details\":\"Trigers to update liquidation price\",\"params\":{\"_price\":\"Liquidation price in basis point\"}},\"updateMainParameters(uint256,uint256,uint256)\":{\"details\":\"Trigers to safely update main collateral parameters this function solves the issue of frontrunning during parameters tuning\",\"params\":{\"_autoLiquidationThreshold\":\"Auto Liquidation level ratio\",\"_liquidationPrice\":\"Liquidation price in basis point\",\"_marginCallRatio\":\"Margin call ratio\"}},\"updateMarginCallThreshold(uint256)\":{\"details\":\"Trigers to update margin call level\",\"params\":{\"_ratio\":\"Margin call ratio\"}},\"updateMinCollateralRatio(uint256)\":{\"details\":\"Trigers to update minimal collateral ratio\",\"params\":{\"_ratio\":\"Minimal collateral ratio in basis points\"}},\"updatePV(address,address,bytes32,uint256,uint256,uint256,uint256)\":{\"details\":\"Triggers to update PV value in currency for bilateral position changes present value in native currency, without exchange rate conversion\",\"params\":{\"ccy\":\"Specified currency of the deal\",\"currentPV0\":\"Current present value to be added to total exposure for counterparty A\",\"currentPV1\":\"Current present value to be added to total exposure for counterparty B\",\"party0\":\"Counterparty A address\",\"party1\":\"Counterparty B address\",\"prevPV0\":\"Previous present value to be substracted from total exposure for counterparty A\",\"prevPV1\":\"Previous present value to be substracted from total exposure for counterparty B\"}},\"useCollateral(address,address,bytes32,uint256,uint256,bool)\":{\"details\":\"Triggers to lock collateral using ETH rate for selected currency.\",\"params\":{\"amount0\":\"Amount of funds to be locked in Ccy for counterparty A\",\"amount1\":\"Amount of funds to be locked in Ccy for counterparty B\",\"ccy\":\"Specified currency of the deal\",\"partyA\":\"Counterparty A address\",\"partyB\":\"Counterparty B address\"}},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"details\":\"Triggers to lock unsettled collateral on a global book for selected currency.\",\"params\":{\"amount\":\"Amount of funds to be locked in Ccy for user\",\"ccy\":\"Specified currency of the deal\",\"user\":\"User's address\"}}},\"title\":\"Collateral Aggregator contract is used to manage Secured Finance protocol collateral obligations and movements of collateral across collateral vaults. This contract handle the calculations of aggregated collateral obligations between users in a bilateral relations, calculations of required rebalancing to stabilize the bilateral position, liquidations using FX rates for all protocol currency pairs to ETH Liquidations and rebalancing operations are handled across all collateral vaults where users have deposited their funds in FIFO order. Contract linked to Product based contracts (like Loan, Swap, etc), LendingMarkets, CurrencyController contracts and Liquidation Engine.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollateralUser(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"linkCollateralVault(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"liquidate(address,address,bytes32,uint256,uint256,bool)\":{\"notice\":\"Trigers only be LiquidationEngine\"},\"liquidate(address,address,uint256)\":{\"notice\":\"Trigers only be LiquidationEngine\"},\"releaseCollateral(address,address,bytes32,uint256,uint256,bool)\":{\"notice\":\"Callable only by smart contracts allowed to use collateral\"},\"releaseUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Callable only by smart contracts allowed to use collateral\"},\"removeCollateralUser(address)\":{\"notice\":\"Trigers only be contract ownerReverts on removing non-existing collateral user\"},\"removeCollateralVault(address)\":{\"notice\":\"Trigers only be contract ownerReverts on removing non-existing collateral vault\"},\"setCrosschainAddressResolver(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"setCurrencyController(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"setLiquidationEngine(address)\":{\"notice\":\"Trigers only be contract ownerReverts on saving 0x0 address\"},\"settleCollateral(address,address,bytes32,uint256,uint256)\":{\"notice\":\"Callable only by Loan and linked LendingMarket\"},\"updateAutoLiquidationThreshold(uint256)\":{\"notice\":\"Trigers only be contract owner\"},\"updateLiquidationPrice(uint256)\":{\"notice\":\"Trigers only be contract owner\"},\"updateMainParameters(uint256,uint256,uint256)\":{\"notice\":\"Trigers only be contract owner\"},\"updateMarginCallThreshold(uint256)\":{\"notice\":\"Trigers only be contract owner\"},\"updateMinCollateralRatio(uint256)\":{\"notice\":\"Trigers only be contract owner\"},\"updatePV(address,address,bytes32,uint256,uint256,uint256,uint256)\":{\"notice\":\"Trigers only be Loan contract\"},\"useCollateral(address,address,bytes32,uint256,uint256,bool)\":{\"notice\":\"Callable only by Loan and linked LendingMarket\"},\"useUnsettledCollateral(address,bytes32,uint256)\":{\"notice\":\"Callable only by Loan and linked LendingMarket\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralAggregatorV2.sol\":\"CollateralAggregatorV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/CollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ICollateralAggregatorV2.sol\\\";\\nimport \\\"./libraries/AddressPacking.sol\\\";\\nimport \\\"./libraries/NetPV.sol\\\";\\nimport \\\"./ProtocolTypes.sol\\\";\\nimport \\\"./CollateralManagement.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Collateral Aggregator contract is used to manage Secured Finance\\n * protocol collateral obligations and movements of collateral across collateral vaults.\\n *\\n * This contract handle the calculations of aggregated collateral obligations between users\\n * in a bilateral relations, calculations of required rebalancing to stabilize\\n * the bilateral position, liquidations using FX rates for all protocol currency pairs to ETH\\n *\\n * Liquidations and rebalancing operations are handled across all collateral vaults where\\n * users have deposited their funds in FIFO order.\\n *\\n * Contract linked to Product based contracts (like Loan, Swap, etc),\\n * LendingMarkets, CurrencyController contracts and Liquidation Engine.\\n */\\ncontract CollateralAggregatorV2 is\\n    ICollateralAggregator,\\n    ProtocolTypes,\\n    CollateralManagement\\n{\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using NetPV for NetPV.CcyNetting;\\n\\n    // Mapping for total amount of collateral locked against independent collateral from all books.\\n    mapping(address => mapping(bytes32 => uint256)) public unsettledCollateral;\\n\\n    // Mapping for used currencies in unsettled exposures.\\n    mapping(address => EnumerableSet.Bytes32Set)\\n        private exposedUnsettledCurrencies;\\n\\n    // Mapping for all registered users.\\n    mapping(address => bool) private isRegistered;\\n\\n    // Mapping for used currencies set in bilateral position.\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) private exposedCurrencies;\\n\\n    // Mapping for used collateral vaults in bilateral position.\\n    mapping(bytes32 => EnumerableSet.AddressSet) private usedVaultsInPosition;\\n\\n    // Mapping for used collateral vaults per user.\\n    mapping(address => EnumerableSet.AddressSet) private usedVaults;\\n\\n    // Mapping for exposures per currency in bilateral position.\\n    mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting))\\n        private ccyNettings;\\n\\n    /**\\n     * @dev Modifier to check if user registered already\\n     */\\n    modifier registeredUser(address _user) {\\n        require(isRegistered[_user], \\\"NOT_REGISTERED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if user hasn't been registered yet\\n     */\\n    modifier nonRegisteredUser(address _user) {\\n        require(!isRegistered[_user], \\\"REGISTERED_ALREADY\\\");\\n        _;\\n    }\\n\\n    // =========== COLLATERAL BOOK SECTION ===========\\n\\n    /**\\n     * @dev Register user and store collateral book\\n     */\\n    function register() public override nonRegisteredUser(msg.sender) {\\n        string[] memory _addresses = new string[](0);\\n        uint256[] memory _chainIds = new uint256[](0);\\n\\n        _register(_addresses, _chainIds);\\n    }\\n\\n    /**\\n     * @dev Register user and store collateral book\\n     * @param _addresses Array of other blockchain addresses\\n     * @param _chainIds Array of chain ids for other blockchains\\n     */\\n    function register(string[] memory _addresses, uint256[] memory _chainIds)\\n        public\\n        override\\n        nonRegisteredUser(msg.sender)\\n    {\\n        _register(_addresses, _chainIds);\\n    }\\n\\n    // TODO: Rebalance from position to book once position coverage more than 150%\\n\\n    /**\\n     * @dev Triggers to lock unsettled collateral on a global book for selected currency.\\n     * @param user User's address\\n     * @param ccy Specified currency of the deal\\n     * @param amount Amount of funds to be locked in Ccy for user\\n     *\\n     * @notice Callable only by Loan and linked LendingMarket\\n     */\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external override acceptedContract {\\n        exposedUnsettledCurrencies[user].add(ccy);\\n        require(isCoveredUnsettled(user, ccy, amount), \\\"Not enough collateral\\\");\\n\\n        unsettledCollateral[user][ccy] = unsettledCollateral[user][ccy].add(\\n            amount\\n        );\\n\\n        emit UseUnsettledCollateral(user, ccy, amount);\\n    }\\n\\n    /**\\n     * @dev Triggers to lock collateral using ETH rate for selected currency.\\n     * @param partyA Counterparty A address\\n     * @param partyB Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param amount0 Amount of funds to be locked in Ccy for counterparty A\\n     * @param amount1 Amount of funds to be locked in Ccy for counterparty B\\n     *\\n     * @notice Callable only by Loan and linked LendingMarket\\n     */\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external override acceptedContract {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        exposedCurrencies[packedAddrs].add(ccy);\\n\\n        NetPV.use(\\n            ccyNettings,\\n            partyA,\\n            partyB,\\n            ccy,\\n            amount0,\\n            amount1,\\n            isSettled\\n        );\\n        _rebalanceIfRequired(partyA, partyB, true);\\n\\n        emit UseCollateral(partyA, partyB, ccy, amount0, amount1, isSettled);\\n    }\\n\\n    /**\\n     * @dev Triggers to lock collateral using ETH rate for selected currency.\\n     * @param partyA Counterparty A address\\n     * @param partyB Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param amount0 Amount of funds to be locked in Ccy for counterparty A\\n     * @param amount1 Amount of funds to be locked in Ccy for counterparty B\\n     *\\n     * @notice Callable only by Loan and linked LendingMarket\\n     */\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external override acceptedContract {\\n        NetPV.settle(ccyNettings, partyA, partyB, ccy, amount0, amount1);\\n        _rebalanceIfRequired(partyA, partyB, true);\\n\\n        emit SettleCollateral(partyA, partyB, ccy, amount0, amount1);\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate total unsettled exposure across all currencies\\n     * @param _user User's address\\n     */\\n    function getTotalUnsettledExp(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _netTotalUnsettledAndHypotheticalPV(_user, \\\"\\\", 0);\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate netted exposures across all currencies with applied haircuts\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return _netTotalAndHypotheticalPV(_party0, _party1, \\\"\\\", 0, 0, false);\\n    }\\n\\n    /**\\n     * @dev Triggers to check if unsettled collateral exposure covered more that 150% from a global collateral book of `_user`.\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     */\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) public view override returns (bool) {\\n        (uint256 coverage, ) = _calculateUnsettledCoverageAndTotalExposure(\\n            _user,\\n            _ccy,\\n            _unsettledExp\\n        );\\n        return coverage >= MARGINLEVEL;\\n    }\\n\\n    /**\\n     * @dev Triggers to check if collateral covered more that 150%.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _party0PV Counterparty A additional present value\\n     * @param _party1PV Counterparty B additional present value\\n     */\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) public view override returns (bool, bool) {\\n        (uint256 cover0, uint256 cover1) = _calculateCoverage(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _party0PV,\\n            _party1PV,\\n            _isSettled\\n        );\\n\\n        return (cover0 >= MARGINLEVEL, cover1 >= MARGINLEVEL);\\n    }\\n\\n    /**\\n     * @dev Triggers to get maximum amount of ETH available to widthdraw from `_user` collateral book.\\n     * @param _user User's address\\n     */\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 maxWithdraw)\\n    {\\n        (maxWithdraw, ) = _calcMaxCollateralWidthdrawFromBook(_user);\\n    }\\n\\n    /**\\n     * @dev Triggers to get maximum amount of ETH available to\\n     * widthdraw from bilateral position between `party0` and `_party1`.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 colAdjustment0;\\n        bool isWithdraw0;\\n        uint256 colAdjustment1;\\n        bool isWithdraw1;\\n\\n        (\\n            colAdjustment0,\\n            isWithdraw0,\\n            colAdjustment1,\\n            isWithdraw1\\n        ) = _calcCollateralAdjustment(_party0, _party1, \\\"\\\", 0, 0, false, true);\\n\\n        return (\\n            isWithdraw0 ? colAdjustment0 : 0,\\n            isWithdraw1 ? colAdjustment1 : 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to get coverage of the global collateral book against all unsettled exposure.\\n     * @param _user User's address\\n     */\\n    function getUnsettledCoverage(address _user)\\n        public\\n        view\\n        override\\n        returns (uint256 coverage)\\n    {\\n        (coverage, ) = _calculateUnsettledCoverageAndTotalExposure(\\n            _user,\\n            \\\"\\\",\\n            0\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to get coverage of the global collateral book against all unsettled exposure.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        uint256 colAdjustment0;\\n        bool isWithdraw0;\\n        uint256 colAdjustment1;\\n        bool isWithdraw1;\\n\\n        (\\n            colAdjustment0,\\n            isWithdraw0,\\n            colAdjustment1,\\n            isWithdraw1\\n        ) = _calcCollateralAdjustment(_party0, _party1, \\\"\\\", 0, 0, false, true);\\n\\n        return (\\n            isWithdraw0 ? 0 : colAdjustment0,\\n            isWithdraw1 ? 0 : colAdjustment1\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to get bilateral position collateral coverage.\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     */\\n    function getCoverage(address _party0, address _party1)\\n        public\\n        view\\n        override\\n        returns (uint256, uint256)\\n    {\\n        return _calculateCoverage(_party0, _party1, \\\"\\\", 0, 0, false);\\n    }\\n\\n    /**\\n     * @dev Triggers to reduce the amount of unsettled exposure in specific `ccy` from a global collateral book of `user`\\n     * @param user User's ETH address\\n     * @param ccy Specified currency of the deal\\n     * @param amount Amount of funds to be unlocked from unsettled exposure in specified ccy\\n     *\\n     * @notice Callable only by smart contracts allowed to use collateral\\n     */\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external override acceptedContract {\\n        unsettledCollateral[user][ccy] = unsettledCollateral[user][ccy].sub(\\n            amount\\n        );\\n\\n        if (unsettledCollateral[user][ccy] == 0) {\\n            exposedUnsettledCurrencies[user].remove(ccy);\\n        }\\n\\n        emit ReleaseUnsettled(user, ccy, amount);\\n    }\\n\\n    /**\\n     * @dev Triggers to reduce PV for specific `ccy` in bilateral position between `partyA` and `partyB`\\n     * @param partyA Counterparty A address\\n     * @param partyB Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param amount0 Amount of funds to be removed in CcyNetting for counterparty A\\n     * @param amount1 Amount of funds to be removed in CcyNetting for counterparty B\\n     *\\n     * @notice Callable only by smart contracts allowed to use collateral\\n     */\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external override acceptedContract {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        require(exposedCurrencies[packedAddrs].contains(ccy), \\\"non-used ccy\\\");\\n\\n        NetPV.release(\\n            ccyNettings,\\n            partyA,\\n            partyB,\\n            ccy,\\n            amount0,\\n            amount1,\\n            isSettled\\n        );\\n        _rebalanceIfRequired(partyA, partyB, true);\\n\\n        emit Release(partyA, partyB, ccy, amount0, amount1, isSettled);\\n    }\\n\\n    /**\\n     * @dev Triggers to update PV value in currency for bilateral position\\n     * changes present value in native currency, without exchange rate conversion\\n     * @param party0 Counterparty A address\\n     * @param party1 Counterparty B address\\n     * @param ccy Specified currency of the deal\\n     * @param prevPV0 Previous present value to be substracted from total exposure for counterparty A\\n     * @param prevPV1 Previous present value to be substracted from total exposure for counterparty B\\n     * @param currentPV0 Current present value to be added to total exposure for counterparty A\\n     * @param currentPV1 Current present value to be added to total exposure for counterparty B\\n     *\\n     * @notice Trigers only be Loan contract\\n     */\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external override acceptedContract {\\n        NetPV.update(\\n            ccyNettings,\\n            party0,\\n            party1,\\n            ccy,\\n            prevPV0,\\n            prevPV1,\\n            currentPV0,\\n            currentPV1\\n        );\\n\\n        _rebalanceIfRequired(party0, party1, true);\\n\\n        emit UpdatePV(\\n            party0,\\n            party1,\\n            ccy,\\n            prevPV0,\\n            prevPV1,\\n            currentPV0,\\n            currentPV1\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate collateral between `from` and `to` parties\\n     * works with aggregated liquidation amount in ETH\\n     *\\n     * @param from Address for liquidating collateral from\\n     * @param to Address for sending collateral to\\n     * @param liquidationInETH Liquidation amount in Ccy\\n     *\\n     * @notice Trigers only be LiquidationEngine\\n     */\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external override onlyLiquidationEngine {\\n        require(\\n            _liquidateCollateralAcrossVaults(from, to, liquidationInETH),\\n            \\\"INCORRECT_LIQUIDATION_ACROSS_VAULTS\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Triggers to liquidate collateral between `from` and `to` parties\\n     * works liquidation amount in native `ccy`\\n     *\\n     * @param from Address for liquidating collateral from\\n     * @param to Address for sending collateral to\\n     * @param ccy Short identifier of currency used to liquidate\\n     * @param liquidationAmount Liquidation amount in Ccy\\n     * @param isSettled Identifier wether collateral obligations for release is settled\\n     *\\n     * @notice Trigers only be LiquidationEngine\\n     */\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external override onlyLiquidationEngineOrCollateralUser {\\n        uint256 liquidationTarget = liquidationAmount.mul(LQLEVEL).div(BP);\\n        uint256 liqudationInETH = currencyController.convertToETH(\\n            ccy,\\n            liquidationTarget\\n        );\\n\\n        require(\\n            _liquidateCollateralAcrossVaults(from, to, liqudationInETH),\\n            \\\"INCORRECT_LIQUIDATION_ACROSS_VAULTS\\\"\\n        );\\n\\n        emit Liquidate(from, to, ccy, liquidationAmount);\\n\\n        NetPV.release(ccyNettings, from, to, ccy, pv, 0, isSettled);\\n\\n        emit Release(from, to, ccy, pv, 0, isSettled);\\n\\n        _rebalanceIfRequired(from, to, true);\\n    }\\n\\n    function checkRegisteredUser(address addr)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return isRegistered[addr];\\n    }\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        require(exposedCurrencies[packedAddrs].contains(ccy), \\\"non-used ccy\\\");\\n        NetPV.CcyNetting memory netting = NetPV.get(\\n            ccyNettings,\\n            partyA,\\n            partyB,\\n            ccy\\n        );\\n\\n        return (\\n            netting.unsettled0PV,\\n            netting.unsettled1PV,\\n            netting.party0PV,\\n            netting.party1PV\\n        );\\n    }\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        public\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(partyA, partyB);\\n        EnumerableSet.Bytes32Set storage expCcy = exposedCurrencies[\\n            packedAddrs\\n        ];\\n\\n        uint256 numCcy = expCcy.length();\\n        bytes32[] memory currencies = new bytes32[](numCcy);\\n\\n        for (uint256 i = 0; i < numCcy; i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            currencies[i] = ccy;\\n        }\\n\\n        return currencies;\\n    }\\n\\n    function getUsedVaults(address party0, address party1)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        EnumerableSet.AddressSet storage vaultsSet = usedVaultsInPosition[\\n            packedAddrs\\n        ];\\n\\n        uint256 numVaults = vaultsSet.length();\\n        address[] memory vaults = new address[](numVaults);\\n\\n        for (uint256 i = 0; i < numVaults; i++) {\\n            address vault = vaultsSet.at(i);\\n            vaults[i] = vault;\\n        }\\n\\n        return vaults;\\n    }\\n\\n    function getUsedVaults(address user)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        EnumerableSet.AddressSet storage vaultsSet = usedVaults[user];\\n\\n        uint256 numVaults = vaultsSet.length();\\n        address[] memory vaults = new address[](numVaults);\\n\\n        for (uint256 i = 0; i < numVaults; i++) {\\n            address vault = vaultsSet.at(i);\\n            vaults[i] = vault;\\n        }\\n\\n        return vaults;\\n    }\\n\\n    // =========== INTERNAL FUNCTIONS ===========\\n\\n    /**\\n     * @dev Triggers internaly to store new collateral book\\n     */\\n    function _register(string[] memory _addresses, uint256[] memory _chainIds)\\n        internal\\n    {\\n        isRegistered[msg.sender] = true;\\n        // perform onboarding steps here\\n\\n        crosschainAddressResolver.updateAddresses(\\n            msg.sender,\\n            _chainIds,\\n            _addresses\\n        );\\n\\n        emit Register(msg.sender);\\n    }\\n\\n    struct NetAndTotalPVLocalVars {\\n        bytes32 packedAddrs;\\n        bytes32 ccy;\\n        NetPV.CcyNetting netting;\\n        uint256 exchangeRate;\\n        uint256 totalUnsettledPV0inETH;\\n        uint256 totalUnsettledPV1inETH;\\n        uint256 totalPV0inETH;\\n        uint256 totalPV1inETH;\\n        uint256 totalCombinedPV0inETH;\\n        uint256 totalCombinedPV1inETH;\\n        uint256 totalHaircutPV0;\\n        uint256 totalHaircutPV1;\\n        uint256 haircutRatio;\\n        uint256 pvDiff0;\\n        uint256 pvDiff1;\\n        uint256 netPV0;\\n        uint256 netPV1;\\n        uint256 maxCcy;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate netted exposures across all currencies with applied haircuts.\\n     * Also used to calculate hypothetical Net PV with additional exposure in specific `_ccy`\\n     * @param _party0 Counterparty A address\\n     * @param _party1 Counterparty B address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _party0PV Counterparty A additional present value\\n     * @param _party1PV Counterparty B additional present value\\n     */\\n    function _netTotalAndHypotheticalPV(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool isSettled\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        NetAndTotalPVLocalVars memory vars;\\n        (vars.packedAddrs, ) = AddressPacking.pack(_party0, _party1);\\n        EnumerableSet.Bytes32Set storage expCcy = exposedCurrencies[\\n            vars.packedAddrs\\n        ];\\n\\n        vars.maxCcy = expCcy.length();\\n\\n        for (uint256 i = 0; i < vars.maxCcy; i++) {\\n            vars.ccy = expCcy.at(i);\\n\\n            if (_ccy == vars.ccy) {\\n                vars.netting = NetPV.get(\\n                    ccyNettings,\\n                    _party0,\\n                    _party1,\\n                    vars.ccy,\\n                    _party0PV,\\n                    _party1PV,\\n                    isSettled\\n                );\\n            } else {\\n                vars.netting = NetPV.get(\\n                    ccyNettings,\\n                    _party0,\\n                    _party1,\\n                    vars.ccy\\n                );\\n            }\\n\\n            vars.exchangeRate = uint256(\\n                currencyController.getLastETHPrice(vars.ccy)\\n            );\\n            vars.netting = _convertPositionToETH(\\n                vars.netting,\\n                vars.exchangeRate\\n            );\\n\\n            vars.totalUnsettledPV0inETH = vars.totalUnsettledPV0inETH.add(\\n                vars.netting.unsettled0PV\\n            );\\n            vars.totalUnsettledPV1inETH = vars.totalUnsettledPV1inETH.add(\\n                vars.netting.unsettled1PV\\n            );\\n\\n            vars.haircutRatio = currencyController.getHaircut(vars.ccy);\\n\\n            vars.totalPV0inETH = vars.totalPV0inETH.add(vars.netting.party0PV);\\n            vars.totalPV1inETH = vars.totalPV1inETH.add(vars.netting.party1PV);\\n            vars.totalHaircutPV0 = vars.totalHaircutPV0.add(\\n                vars.netting.party0PV.mul(vars.haircutRatio).div(BP)\\n            );\\n            vars.totalHaircutPV1 = vars.totalHaircutPV1.add(\\n                vars.netting.party1PV.mul(vars.haircutRatio).div(BP)\\n            );\\n        }\\n\\n        vars.pvDiff0 = vars.totalPV0inETH >= vars.totalHaircutPV1\\n            ? vars.totalPV0inETH.sub(vars.totalHaircutPV1)\\n            : 0;\\n        vars.pvDiff1 = vars.totalPV1inETH >= vars.totalHaircutPV0\\n            ? vars.totalPV1inETH.sub(vars.totalHaircutPV0)\\n            : 0;\\n\\n        (vars.netPV0, vars.netPV1) = vars.pvDiff0 > vars.pvDiff1\\n            ? (\\n                vars.pvDiff0.sub(vars.pvDiff1).add(vars.totalUnsettledPV0inETH),\\n                vars.totalUnsettledPV1inETH\\n            )\\n            : (\\n                vars.totalUnsettledPV0inETH,\\n                vars.pvDiff1.sub(vars.pvDiff0).add(vars.totalUnsettledPV1inETH)\\n            );\\n\\n        vars.totalCombinedPV0inETH = vars.totalUnsettledPV0inETH.add(\\n            vars.totalPV0inETH\\n        );\\n        vars.totalCombinedPV1inETH = vars.totalUnsettledPV1inETH.add(\\n            vars.totalPV1inETH\\n        );\\n\\n        return (\\n            vars.netPV0,\\n            vars.netPV1,\\n            vars.totalCombinedPV0inETH,\\n            vars.totalCombinedPV1inETH\\n        );\\n    }\\n\\n    function _convertPositionToETH(\\n        NetPV.CcyNetting memory netting,\\n        uint256 exchangeRate\\n    ) internal pure returns (NetPV.CcyNetting memory) {\\n        if (netting.unsettled0PV > 0) {\\n            netting.unsettled0PV = netting.unsettled0PV.mul(exchangeRate).div(\\n                1e18\\n            );\\n        }\\n\\n        if (netting.unsettled1PV > 0) {\\n            netting.unsettled1PV = netting.unsettled1PV.mul(exchangeRate).div(\\n                1e18\\n            );\\n        }\\n\\n        if (netting.party0PV > 0) {\\n            netting.party0PV = netting.party0PV.mul(exchangeRate).div(1e18);\\n        }\\n\\n        if (netting.party1PV > 0) {\\n            netting.party1PV = netting.party1PV.mul(exchangeRate).div(1e18);\\n        }\\n\\n        return netting;\\n    }\\n\\n    struct CollateralReqLocalVars {\\n        uint256 net0;\\n        uint256 net1;\\n        uint256 total0;\\n        uint256 total1;\\n        uint256 minMarginReq0;\\n        uint256 minMarginReq1;\\n        uint256 req0;\\n        uint256 req1;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate collateral coverage for bilateral position with/without additional PV\\n     * @param _party0 Counterparty A address\\n     * @param _party0 Counterparty B address\\n     *\\n     * @return `cover0`, `cover1` uint256 coverage percentages in basis point per counterparty\\n     */\\n    // TODO: NOW\\n    function _calculateCollateralRequirements(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) internal view returns (uint256, uint256) {\\n        CollateralReqLocalVars memory vars;\\n\\n        (\\n            vars.net0,\\n            vars.net1,\\n            vars.total0,\\n            vars.total1\\n        ) = _netTotalAndHypotheticalPV(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _party0PV,\\n            _party1PV,\\n            _isSettled\\n        );\\n\\n        vars.minMarginReq0 = vars.total0.mul(MIN_COLLATERAL_RATIO).div(BP);\\n        vars.minMarginReq1 = vars.total1.mul(MIN_COLLATERAL_RATIO).div(BP);\\n\\n        if (vars.net0 > 0) {\\n            vars.req0 = vars.minMarginReq0 >\\n                (vars.net0.mul(MARGINLEVEL)).div(BP)\\n                ? vars.minMarginReq0\\n                : vars.net0;\\n        } else {\\n            vars.req0 = vars.minMarginReq0;\\n        }\\n\\n        if (vars.net1 > 0) {\\n            vars.req1 = vars.minMarginReq1 >\\n                (vars.net1.mul(MARGINLEVEL)).div(BP)\\n                ? vars.minMarginReq1\\n                : vars.net1;\\n        } else {\\n            vars.req1 = vars.minMarginReq1;\\n        }\\n\\n        return (vars.req0, vars.req1);\\n    }\\n\\n    struct CoverageCalcLocalVars {\\n        uint256 req0;\\n        uint256 req1;\\n        uint256 cover0;\\n        uint256 cover1;\\n        uint256 lockedCollateral0;\\n        uint256 lockedCollateral1;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate collateral coverage for bilateral position with/without additional PV\\n     * @param _party0 Counterparty A address\\n     * @param _party0 Counterparty B address\\n     *\\n     * @return `cover0`, `cover1` uint256 coverage percentages in basis point per counterparty\\n     */\\n    // TODO: NOW\\n    function _calculateCoverage(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) internal view returns (uint256, uint256) {\\n        CoverageCalcLocalVars memory vars;\\n\\n        (vars.req0, vars.req1) = _calculateCollateralRequirements(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _party0PV,\\n            _party1PV,\\n            _isSettled\\n        );\\n\\n        (\\n            vars.lockedCollateral0,\\n            vars.lockedCollateral1\\n        ) = _totalLockedCollateralInPosition(_party0, _party1);\\n\\n        if (vars.req0 > 0) {\\n            vars.cover0 = (PCT.mul(vars.lockedCollateral0)).div(vars.req0);\\n        }\\n\\n        if (vars.req1 > 0) {\\n            vars.cover1 = (PCT.mul(vars.lockedCollateral1)).div(vars.req1);\\n        }\\n\\n        return (vars.cover0, vars.cover1);\\n    }\\n\\n    struct RequiredCollateralAdjustmentLocalVars {\\n        uint256 targetReq0;\\n        uint256 targetReq1;\\n        uint256 colAdjustment0;\\n        bool isWithdraw0;\\n        uint256 colAdjustment1;\\n        bool isWithdraw1;\\n        uint256 lockedCollateral0;\\n        uint256 lockedCollateral1;\\n    }\\n\\n    function _calcCollateralAdjustment(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        bool _isSettled,\\n        bool _safeRebalance\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            bool,\\n            uint256,\\n            bool\\n        )\\n    {\\n        RequiredCollateralAdjustmentLocalVars memory vars;\\n\\n        (vars.targetReq0, vars.targetReq1) = _calculateCollateralRequirements(\\n            _party0,\\n            _party1,\\n            _ccy,\\n            _amount0,\\n            _amount1,\\n            _isSettled\\n        );\\n\\n        if (_safeRebalance) {\\n            vars.targetReq0 = vars.targetReq0.mul(MARGINLEVEL).div(BP);\\n            vars.targetReq1 = vars.targetReq1.mul(MARGINLEVEL).div(BP);\\n        }\\n\\n        (\\n            vars.lockedCollateral0,\\n            vars.lockedCollateral1\\n        ) = _totalLockedCollateralInPosition(_party0, _party1);\\n\\n        (\\n            vars.colAdjustment0,\\n            vars.isWithdraw0\\n        ) = _determineCollateralAdjustment(\\n            vars.lockedCollateral0,\\n            vars.targetReq0\\n        );\\n        (\\n            vars.colAdjustment1,\\n            vars.isWithdraw1\\n        ) = _determineCollateralAdjustment(\\n            vars.lockedCollateral1,\\n            vars.targetReq1\\n        );\\n\\n        return (\\n            vars.colAdjustment0,\\n            vars.isWithdraw0,\\n            vars.colAdjustment1,\\n            vars.isWithdraw1\\n        );\\n    }\\n\\n    function _determineCollateralAdjustment(\\n        uint256 _lockedCollateral,\\n        uint256 _targetReq\\n    ) internal pure returns (uint256 amount, bool isWithdraw) {\\n        if (_lockedCollateral > 0 && _targetReq > 0) {\\n            if (_lockedCollateral > _targetReq) {\\n                amount = _lockedCollateral.sub(_targetReq);\\n                isWithdraw = true;\\n            } else {\\n                amount = _targetReq.sub(_lockedCollateral);\\n                isWithdraw = false;\\n            }\\n        } else if (_lockedCollateral > 0 && _targetReq == 0) {\\n            amount = _lockedCollateral;\\n            isWithdraw = true;\\n        } else if (_lockedCollateral == 0 && _targetReq > 0) {\\n            amount = _targetReq;\\n            isWithdraw = false;\\n        }\\n\\n        return (amount, isWithdraw);\\n    }\\n\\n    struct NetUnsettledExpLocalVars {\\n        uint256 totalExp;\\n        uint256 ccyExp;\\n        uint256 ccyExpInETH;\\n        uint256 maxCcy;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate total unsettled exposure across all currencies against all global collateral books.\\n     * Also used to calculate hypothetical Net PV with additional exposure in specific `_ccy`\\n     * @param _user User's ethereum address\\n     * @param _ccy Currency to calculate additional PV for\\n     * @param _unsettledExp Additional exposure to lock into unsettled exposure\\n     */\\n    function _netTotalUnsettledAndHypotheticalPV(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256) {\\n        EnumerableSet.Bytes32Set storage expCcy = exposedUnsettledCurrencies[\\n            _user\\n        ];\\n\\n        NetUnsettledExpLocalVars memory vars;\\n\\n        vars.maxCcy = expCcy.length();\\n\\n        for (uint256 i = 0; i < vars.maxCcy; i++) {\\n            bytes32 ccy = expCcy.at(i);\\n            vars.ccyExp = unsettledCollateral[_user][ccy];\\n\\n            if (_ccy == ccy) {\\n                vars.ccyExp = vars.ccyExp.add(_unsettledExp);\\n            }\\n\\n            vars.ccyExpInETH = currencyController.convertToETH(\\n                ccy,\\n                vars.ccyExp\\n            );\\n            vars.totalExp = vars.totalExp.add(vars.ccyExpInETH);\\n        }\\n\\n        return vars.totalExp;\\n    }\\n\\n    struct UnsettledCoverageLocalVars {\\n        uint256 totalExpInETH;\\n        uint256 coverage;\\n        uint256 independentAmount;\\n    }\\n\\n    function _calculateUnsettledCoverageAndTotalExposure(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) internal view returns (uint256, uint256) {\\n        UnsettledCoverageLocalVars memory vars;\\n\\n        vars.totalExpInETH = _netTotalUnsettledAndHypotheticalPV(\\n            _user,\\n            _ccy,\\n            _unsettledExp\\n        );\\n        vars.independentAmount = _totalIndependentCollateralInETH(_user);\\n\\n        if (vars.totalExpInETH > 0) {\\n            vars.coverage = (PCT.mul(vars.independentAmount)).div(\\n                vars.totalExpInETH\\n            );\\n        } else {\\n            return (0, vars.totalExpInETH);\\n        }\\n\\n        return (vars.coverage, vars.totalExpInETH);\\n    }\\n\\n    struct MaxCollateralBookWidthdrawLocalVars {\\n        uint256 totalExpInETH;\\n        uint256 coverage;\\n        uint256 delta;\\n        uint256 maxWidthdraw;\\n        uint256 independentAmount;\\n    }\\n\\n    /**\\n     * @dev Triggers to calculate maximum amount of ETH available to widthdraw from `_user` collateral book\\n     * @param _user User's ethereum address\\n     *\\n     * @return `maxWidthdraw` max widthdrawable amount of ETH\\n     */\\n    function _calcMaxCollateralWidthdrawFromBook(address _user)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        MaxCollateralBookWidthdrawLocalVars memory vars;\\n\\n        (\\n            vars.coverage,\\n            vars.totalExpInETH\\n        ) = _calculateUnsettledCoverageAndTotalExposure(_user, \\\"\\\", 0);\\n        vars.independentAmount = _totalIndependentCollateralInETH(_user);\\n\\n        if (vars.coverage > MARGINLEVEL) {\\n            // TODO: discuss if it makes sense to decrease to 100%\\n            vars.delta = vars.coverage.sub(MARGINLEVEL);\\n\\n            vars.maxWidthdraw = vars.independentAmount.mul(vars.delta).div(\\n                vars.coverage\\n            );\\n        } else if (vars.totalExpInETH == 0) {\\n            return (vars.independentAmount, vars.totalExpInETH);\\n        } else {\\n            return (0, vars.totalExpInETH);\\n        }\\n\\n        return (vars.maxWidthdraw, vars.totalExpInETH);\\n    }\\n\\n    struct TotalLockedCollateralLocalVars {\\n        uint256 len;\\n        uint256 lockedCollateral0;\\n        uint256 lockedCollateral1;\\n        uint256 totalCollateral0;\\n        uint256 totalCollateral1;\\n    }\\n\\n    function _totalLockedCollateralInPosition(address _party0, address _party1)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(_party0, _party1);\\n        EnumerableSet.AddressSet storage vaults = usedVaultsInPosition[\\n            packedAddrs\\n        ];\\n\\n        TotalLockedCollateralLocalVars memory vars;\\n        vars.len = vaults.length();\\n\\n        for (uint256 i = 0; i < vars.len; i++) {\\n            address vaultAddr = vaults.at(i);\\n\\n            (vars.lockedCollateral0, vars.lockedCollateral1) = ICollateralVault(\\n                vaultAddr\\n            ).getLockedCollateralInETH(_party0, _party1);\\n\\n            vars.totalCollateral0 = vars.totalCollateral0.add(\\n                vars.lockedCollateral0\\n            );\\n            vars.totalCollateral1 = vars.totalCollateral1.add(\\n                vars.lockedCollateral1\\n            );\\n        }\\n\\n        return (vars.totalCollateral0, vars.totalCollateral1);\\n    }\\n\\n    function _totalIndependentCollateralInETH(address _party)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        EnumerableSet.AddressSet storage vaults = usedVaults[_party];\\n        uint256 lockedCollateral;\\n        uint256 totalCollateral;\\n\\n        uint256 len = vaults.length();\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            address vaultAddr = vaults.at(i);\\n            lockedCollateral = ICollateralVault(vaultAddr)\\n                .getIndependentCollateralInETH(_party);\\n\\n            totalCollateral = totalCollateral.add(lockedCollateral);\\n        }\\n\\n        return totalCollateral;\\n    }\\n\\n    function _liquidateCollateralAcrossVaults(\\n        address _from,\\n        address _to,\\n        uint256 _liquidationTarget\\n    ) internal returns (bool) {\\n        EnumerableSet.AddressSet storage vaults = usedVaults[_from];\\n        uint256 len = vaults.length();\\n        uint256 i = 0;\\n\\n        while (_liquidationTarget != 0 && i < len) {\\n            address vaultAddr = vaults.at(i);\\n            _liquidationTarget = ICollateralVault(vaultAddr).liquidate(\\n                _from,\\n                _to,\\n                _liquidationTarget\\n            );\\n\\n            i += 1;\\n        }\\n\\n        if (_liquidationTarget > 0) return false;\\n\\n        return true;\\n    }\\n\\n    function _rebalanceCollateralAcrossVaults(\\n        address _party0,\\n        address _party1,\\n        uint256 _rebalanceTarget,\\n        bool isRebalanceFrom\\n    ) internal returns (bool) {\\n        EnumerableSet.AddressSet storage vaults = usedVaults[_party0];\\n        uint256 len = vaults.length();\\n        uint256 i = 0;\\n\\n        while (_rebalanceTarget != 0 && i < len) {\\n            address vaultAddr = vaults.at(i);\\n\\n            if (isRebalanceFrom) {\\n                _rebalanceTarget = ICollateralVault(vaultAddr).rebalanceFrom(\\n                    _party0,\\n                    _party1,\\n                    _rebalanceTarget\\n                );\\n            } else {\\n                _rebalanceTarget = ICollateralVault(vaultAddr).rebalanceTo(\\n                    _party0,\\n                    _party1,\\n                    _rebalanceTarget\\n                );\\n            }\\n\\n            i += 1;\\n        }\\n\\n        if (_rebalanceTarget > 0) return false;\\n\\n        return true;\\n    }\\n\\n    function _rebalanceIfRequired(\\n        address _party0,\\n        address _party1,\\n        bool _safeRebalance\\n    ) internal {\\n        (\\n            uint256 rebalance0,\\n            bool isRebalanceFrom0,\\n            uint256 rebalance1,\\n            bool isRebalanceFrom1\\n        ) = _calcCollateralAdjustment(\\n                _party0,\\n                _party1,\\n                \\\"\\\",\\n                0,\\n                0,\\n                false,\\n                _safeRebalance\\n            );\\n\\n        if (rebalance0 > 0) {\\n            require(\\n                _rebalanceCollateralAcrossVaults(\\n                    _party0,\\n                    _party1,\\n                    rebalance0,\\n                    isRebalanceFrom0\\n                ),\\n                \\\"NON_ENOUGH_FUNDS_FOR_REBALANCE\\\"\\n            );\\n        }\\n\\n        if (rebalance1 > 0) {\\n            require(\\n                _rebalanceCollateralAcrossVaults(\\n                    _party1,\\n                    _party0,\\n                    rebalance1,\\n                    isRebalanceFrom1\\n                ),\\n                \\\"NON_ENOUGH_FUNDS_FOR_REBALANCE\\\"\\n            );\\n        }\\n    }\\n\\n    function enterVault(address _user) external override onlyCollateralVault {\\n        usedVaults[_user].add(msg.sender);\\n    }\\n\\n    function exitVault(address _user) external override onlyCollateralVault {\\n        usedVaults[_user].remove(msg.sender);\\n    }\\n\\n    function enterVault(address _party0, address _party1)\\n        external\\n        override\\n        onlyCollateralVault\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(_party0, _party1);\\n        usedVaultsInPosition[packedAddrs].add(msg.sender);\\n    }\\n\\n    function exitVault(address _party0, address _party1)\\n        external\\n        override\\n        onlyCollateralVault\\n    {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(_party0, _party1);\\n        usedVaultsInPosition[packedAddrs].remove(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x093a8ed7691931ba71b88f806b71a49023fa67a4caf873dddfec02e13752bc20\",\"license\":\"MIT\"},\"contracts/CollateralManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"./interfaces/ICollateralManagement.sol\\\";\\nimport \\\"./interfaces/ICurrencyController.sol\\\";\\nimport \\\"./interfaces/ICollateralVault.sol\\\";\\nimport \\\"./interfaces/ILiquidations.sol\\\";\\nimport \\\"./interfaces/ICrosschainAddressResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @title CollateralManagement is an internal component of CollateralAggregator contract\\n *\\n * This contract allows Secured Finance manage the collateral system such as:\\n *\\n * 1. Update CurrencyController and LiquidationEngine addresses\\n * 2. Add different products implementation contracts as collateral users\\n * 3. Link deployed collateral vaults\\n * 4. Update main collateral parameters like Margin Call ratio,\\n *    Auto-Liquidation level, Liquidation price, and Minimal collateral ratio\\n *\\n */\\ncontract CollateralManagement is ICollateralManagement {\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 public override LQLEVEL; // 120% for liquidation price\\n    uint256 public override MARGINLEVEL; // 150% margin call threshold\\n    uint256 public override AUTOLQLEVEL; // 125% auto liquidation\\n    uint256 public override MIN_COLLATERAL_RATIO; // 25% minimal collateral ratio\\n\\n    address public override owner;\\n\\n    // Linked contract addresses\\n    ICurrencyController public currencyController;\\n    ILiquidations public liquidationEngine;\\n    ICrosschainAddressResolver public crosschainAddressResolver;\\n    EnumerableSet.AddressSet private collateralUsers;\\n    EnumerableSet.AddressSet private collateralVaults;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by contract owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"INVALID_ACCESS\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if msg.sender is collateral user\\n     */\\n    modifier acceptedContract() {\\n        require(collateralUsers.contains(msg.sender), \\\"NON_COLLATERAL_USER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to check if msg.sender is a CollateralVault\\n     */\\n    modifier onlyCollateralVault() {\\n        require(collateralVaults.contains(msg.sender), \\\"NON_COLLATERAL_VAULT\\\");\\n        _;\\n    }\\n\\n    modifier onlyLiquidationEngine() {\\n        require(\\n            msg.sender == address(liquidationEngine),\\n            \\\"NON_LIQUIDATION_ENGINE\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLiquidationEngineOrCollateralUser() {\\n        require(\\n            msg.sender == address(liquidationEngine) ||\\n                collateralUsers.contains(msg.sender),\\n            \\\"NOR_LIQUIDATION_ENGINE_COLLATERAL_USER\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Contract constructor function.\\n     *\\n     * @notice sets contract deployer as owner of this contract\\n     */\\n    constructor() public {\\n        owner = msg.sender;\\n\\n        LQLEVEL = 12000; // 120% for liquidation price\\n        MARGINLEVEL = 15000; // 150% margin call threshold\\n        AUTOLQLEVEL = 12500; // 125% auto liquidatio\\n        MIN_COLLATERAL_RATIO = 2500; // 25% min collateral ratio\\n    }\\n\\n    // =========== LINKED CONTRACT MANAGEMENT SECTION ===========\\n\\n    /**\\n     * @dev Trigers to add contract address to collateral users address set\\n     * @param _user Collateral user smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function addCollateralUser(address _user)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_user != address(0), \\\"Zero address\\\");\\n        require(_user.isContract(), \\\"Can't add non-contract address\\\");\\n        require(!collateralUsers.contains(_user), \\\"Can't add existing address\\\");\\n\\n        emit CollateralUserAdded(_user);\\n\\n        return collateralUsers.add(_user);\\n    }\\n\\n    /**\\n     * @dev Trigers to link CollateralVault with aggregator\\n     * @param _vault CollateralVault smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function linkCollateralVault(address _vault)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_vault != address(0), \\\"Zero address\\\");\\n        require(_vault.isContract(), \\\"Can't add non-contract address\\\");\\n        require(\\n            !collateralVaults.contains(_vault),\\n            \\\"Can't add existing address\\\"\\n        );\\n\\n        ICollateralVault vaultContract = ICollateralVault(_vault);\\n\\n        bytes32 ccy = vaultContract.ccy();\\n        address tokenAddress = vaultContract.tokenAddress();\\n\\n        emit CollateralVaultLinked(_vault, ccy, tokenAddress);\\n        return collateralVaults.add(_vault);\\n    }\\n\\n    /**\\n     * @dev Trigers to remove collateral user from address set\\n     * @param _user Collateral user smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on removing non-existing collateral user\\n     */\\n    function removeCollateralUser(address _user)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            collateralUsers.contains(_user),\\n            \\\"Can't remove non-existing user\\\"\\n        );\\n\\n        emit CollateralUserRemoved(_user);\\n        return collateralUsers.remove(_user);\\n    }\\n\\n    /**\\n     * @dev Trigers to remove CollateralVault from address set\\n     * @param _vault CollateralVault smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on removing non-existing collateral vault\\n     */\\n    function removeCollateralVault(address _vault)\\n        public\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(\\n            collateralVaults.contains(_vault),\\n            \\\"Can't remove non-existing user\\\"\\n        );\\n\\n        ICollateralVault vaultContract = ICollateralVault(_vault);\\n\\n        bytes32 ccy = vaultContract.ccy();\\n        address tokenAddress = vaultContract.tokenAddress();\\n\\n        emit CollateralVaultRemoved(_vault, ccy, tokenAddress);\\n\\n        return collateralVaults.remove(_vault);\\n    }\\n\\n    /**\\n     * @dev Trigers to check if provided `addr` is a collateral user from address set\\n     * @param _user Contract address to check if it's a collateral user\\n     */\\n    function isCollateralUser(address _user)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return collateralUsers.contains(_user);\\n    }\\n\\n    /**\\n     * @dev Trigers to check if provided address is valid CollateralVault\\n     * @param _vault Contract address to check if it's a CollateralVault\\n     */\\n    function isCollateralVault(address _vault)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return collateralVaults.contains(_vault);\\n    }\\n\\n    /**\\n     * @dev Trigers to add currency controller contract address\\n     * @param _addr Currency Controller smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function setCurrencyController(address _addr) public override onlyOwner {\\n        require(_addr != address(0), \\\"Zero address\\\");\\n        require(_addr.isContract(), \\\"Can't add non-contract address\\\");\\n\\n        currencyController = ICurrencyController(_addr);\\n\\n        emit CurrencyControllerUpdated(_addr);\\n    }\\n\\n    /**\\n     * @dev Trigers to set liquidation engine contract address\\n     * @param _addr LiquidationEngine smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function setLiquidationEngine(address _addr) public override onlyOwner {\\n        require(_addr != address(0), \\\"Zero address\\\");\\n        require(_addr.isContract(), \\\"Can't add non-contract address\\\");\\n\\n        liquidationEngine = ILiquidations(_addr);\\n\\n        emit LiquidationEngineUpdated(_addr);\\n    }\\n\\n    /**\\n     * @dev Trigers to set cros-chain address resolver contract address\\n     * @param _addr CrosschainAddressResolver smart contract address\\n     *\\n     * @notice Trigers only be contract owner\\n     * @notice Reverts on saving 0x0 address\\n     */\\n    function setCrosschainAddressResolver(address _addr)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_addr != address(0), \\\"Zero address\\\");\\n        require(_addr.isContract(), \\\"Can't add non-contract address\\\");\\n\\n        crosschainAddressResolver = ICrosschainAddressResolver(_addr);\\n\\n        emit CrosschainAddressResolverUpdated(_addr);\\n    }\\n\\n    /**\\n     * @dev Trigers to safely update main collateral parameters this function\\n     * solves the issue of frontrunning during parameters tuning\\n     *\\n     * @param _marginCallRatio Margin call ratio\\n     * @param _autoLiquidationThreshold Auto Liquidation level ratio\\n     * @param _liquidationPrice Liquidation price in basis point\\n     * @notice Trigers only be contract owner\\n     */\\n    function updateMainParameters(\\n        uint256 _marginCallRatio,\\n        uint256 _autoLiquidationThreshold,\\n        uint256 _liquidationPrice\\n    ) public override onlyOwner {\\n        if (_marginCallRatio != MARGINLEVEL) {\\n            updateMarginCallThreshold(_marginCallRatio);\\n        }\\n\\n        if (_autoLiquidationThreshold != AUTOLQLEVEL) {\\n            updateAutoLiquidationThreshold(_autoLiquidationThreshold);\\n        }\\n\\n        if (_liquidationPrice != LQLEVEL) {\\n            updateLiquidationPrice(_liquidationPrice);\\n        }\\n    }\\n\\n    /**\\n     * @dev Trigers to update liquidation level ratio\\n     * @param _ratio Auto Liquidation level ratio\\n     * @notice Trigers only be contract owner\\n     */\\n    function updateAutoLiquidationThreshold(uint256 _ratio)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_ratio > 0, \\\"INCORRECT_RATIO\\\");\\n        require(_ratio < MARGINLEVEL, \\\"AUTO_LIQUIDATION_RATIO_OVERFLOW\\\");\\n\\n        emit AutoLiquidationThresholdUpdated(AUTOLQLEVEL, _ratio);\\n        AUTOLQLEVEL = _ratio;\\n    }\\n\\n    /**\\n     * @dev Trigers to update margin call level\\n     * @param _ratio Margin call ratio\\n     * @notice Trigers only be contract owner\\n     */\\n    function updateMarginCallThreshold(uint256 _ratio)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_ratio > 0, \\\"INCORRECT_RATIO\\\");\\n\\n        emit MarginCallThresholdUpdated(MARGINLEVEL, _ratio);\\n        MARGINLEVEL = _ratio;\\n    }\\n\\n    /**\\n     * @dev Trigers to update liquidation price\\n     * @param _price Liquidation price in basis point\\n     * @notice Trigers only be contract owner\\n     */\\n    function updateLiquidationPrice(uint256 _price) public override onlyOwner {\\n        require(_price > 0, \\\"INCORRECT_PRICE\\\");\\n        require(_price < AUTOLQLEVEL, \\\"LIQUIDATION_PRICE_OVERFLOW\\\");\\n\\n        emit LiquidationPriceUpdated(LQLEVEL, _price);\\n        LQLEVEL = _price;\\n    }\\n\\n    /**\\n     * @dev Trigers to update minimal collateral ratio\\n     * @param _ratio Minimal collateral ratio in basis points\\n     * @notice Trigers only be contract owner\\n     */\\n    function updateMinCollateralRatio(uint256 _ratio)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(_ratio > 0, \\\"INCORRECT_RATIO\\\");\\n        require(_ratio < AUTOLQLEVEL, \\\"MIN_COLLATERAL_RATIO_OVERFLOW\\\");\\n\\n        emit MinCollateralRatioUpdated(MIN_COLLATERAL_RATIO, _ratio);\\n        MIN_COLLATERAL_RATIO = _ratio;\\n    }\\n}\\n\",\"keccak256\":\"0xc7ed9734b76ab9da2850f3199b419be63f21d425d2371a98e6f4f1c32f3fead8\",\"license\":\"MIT\"},\"contracts/ProtocolTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\n/**\\n * @dev ProtocolTypes is a base-level contract that holds common Secured Finance protocol types\\n * @author Secured Finance\\n */\\ncontract ProtocolTypes {\\n    // Constant values\\n    uint8 internal constant NUMCCY = 3;\\n    uint8 internal constant NUMTERM = 6;\\n    uint8 internal constant NUMDF = 7; // number of discount factors\\n    uint256 internal constant BP = 10000; // basis point\\n\\n    uint256 internal constant PCT = 10000; // percentage point in basis\\n    uint256 internal constant PENALTYLEVEL = 1000; // 10% settlement failure penalty\\n    uint256 internal constant MKTMAKELEVEL = 2000; // 20% for market making\\n\\n    // Lending market common types\\n    enum Side {\\n        LEND,\\n        BORROW\\n    }\\n    enum Ccy {\\n        ETH,\\n        FIL,\\n        USDC,\\n        BTC\\n    }\\n\\n    // Loan common types\\n    enum LoanState {\\n        REGISTERED,\\n        WORKING,\\n        DUE,\\n        PAST_DUE,\\n        CLOSED,\\n        TERMINATED\\n    }\\n    enum DFTERM {\\n        _3m,\\n        _6m,\\n        _1y,\\n        _2y,\\n        _3y,\\n        _4y,\\n        _5y\\n    }\\n\\n    // Collateral common types\\n    enum CollateralState {\\n        EMPTY,\\n        AVAILABLE,\\n        IN_USE,\\n        MARGIN_CALL,\\n        LIQUIDATION_IN_PROGRESS,\\n        LIQUIDATION\\n    }\\n\\n    // FXMarket common types\\n    enum CcyPair {\\n        FILETH,\\n        FILUSDC,\\n        ETHUSDC,\\n        BTCUSDC,\\n        BTCETH,\\n        BTCFIL\\n    }\\n    enum FXSide {\\n        BID,\\n        OFFER\\n    }\\n\\n    enum PaymentFrequency {\\n        ANNUAL,\\n        SEMI_ANNUAL,\\n        QUARTERLY,\\n        MONTHLY,\\n        FORWARD\\n    }\\n}\\n\",\"keccak256\":\"0x72de205a94aefa6e5b79074f603b8056535f99918af5112343156e79b7eadd83\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralAggregatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICollateralAggregator {\\n    event Register(address indexed addr);\\n    event Release(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event Liquidate(\\n        address indexed from,\\n        address indexed to,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n    event ReleaseUnsettled(address indexed party, bytes32 ccy, uint256 amount);\\n    event SettleCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event UpdatePV(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    );\\n    event UseCollateral(\\n        address indexed partyA,\\n        address indexed partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    );\\n    event UseUnsettledCollateral(\\n        address indexed party,\\n        bytes32 ccy,\\n        uint256 amount\\n    );\\n\\n    function checkRegisteredUser(address addr) external view returns (bool);\\n\\n    function enterVault(address _user) external;\\n\\n    function enterVault(address _party0, address _party1) external;\\n\\n    function exitVault(address _user) external;\\n\\n    function exitVault(address _party0, address _party1) external;\\n\\n    function getCcyExposures(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCoverage(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getExposedCurrencies(address partyA, address partyB)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getMaxCollateralBookWidthdraw(address _user)\\n        external\\n        view\\n        returns (uint256 maxWithdraw);\\n\\n    function getMaxCollateralWidthdraw(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getNetAndTotalPV(address _party0, address _party1)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getRebalanceCollateralAmounts(address _party0, address _party1)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getTotalUnsettledExp(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getUnsettledCoverage(address _user)\\n        external\\n        view\\n        returns (uint256 coverage);\\n\\n    function isCovered(\\n        address _party0,\\n        address _party1,\\n        bytes32 _ccy,\\n        uint256 _party0PV,\\n        uint256 _party1PV,\\n        bool _isSettled\\n    ) external view returns (bool, bool);\\n\\n    function isCoveredUnsettled(\\n        address _user,\\n        bytes32 _ccy,\\n        uint256 _unsettledExp\\n    ) external view returns (bool);\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        uint256 liquidationInETH\\n    ) external;\\n\\n    function liquidate(\\n        address from,\\n        address to,\\n        bytes32 ccy,\\n        uint256 liquidationAmount,\\n        uint256 pv,\\n        bool isSettled\\n    ) external;\\n\\n    function register() external;\\n\\n    function register(string[] memory _addresses, uint256[] memory _chainIds)\\n        external;\\n\\n    function releaseCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function releaseUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function settleCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external;\\n\\n    function updatePV(\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) external;\\n\\n    function useCollateral(\\n        address partyA,\\n        address partyB,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) external;\\n\\n    function useUnsettledCollateral(\\n        address user,\\n        bytes32 ccy,\\n        uint256 amount\\n    ) external;\\n\\n    function getUsedVaults(address user)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getUsedVaults(address party0, address party1)\\n        external\\n        view\\n        returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1e1d54ae5ea0a4d446d99ecce509f35cd2f42826c61abfccf6df109c0911cdab\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ICollateralManagement {\\n    event CollateralUserAdded(address indexed user);\\n    event CollateralUserRemoved(address indexed user);\\n\\n    event CollateralVaultLinked(\\n        address indexed vault,\\n        bytes32 ccy,\\n        address tokenAddress\\n    );\\n    event CollateralVaultRemoved(\\n        address indexed vault,\\n        bytes32 ccy,\\n        address tokenAddress\\n    );\\n\\n    event CurrencyControllerUpdated(address indexed controller);\\n    event LiquidationEngineUpdated(address indexed liquidations);\\n    event CrosschainAddressResolverUpdated(\\n        address indexed crosschainAddressResolver\\n    );\\n\\n    event LiquidationPriceUpdated(uint256 previousPrice, uint256 price);\\n    event AutoLiquidationThresholdUpdated(uint256 previousRatio, uint256 ratio);\\n    event MarginCallThresholdUpdated(uint256 previousRatio, uint256 ratio);\\n    event MinCollateralRatioUpdated(uint256 previousRatio, uint256 price);\\n\\n    function owner() external view returns (address);\\n\\n    function AUTOLQLEVEL() external view returns (uint256);\\n\\n    function LQLEVEL() external view returns (uint256);\\n\\n    function MARGINLEVEL() external view returns (uint256);\\n\\n    function MIN_COLLATERAL_RATIO() external view returns (uint256);\\n\\n    function setCurrencyController(address _addr) external;\\n\\n    function setLiquidationEngine(address _addr) external;\\n\\n    function setCrosschainAddressResolver(address _addr) external;\\n\\n    function addCollateralUser(address _user) external returns (bool);\\n\\n    function removeCollateralUser(address _user) external returns (bool);\\n\\n    function isCollateralUser(address _user) external view returns (bool);\\n\\n    function linkCollateralVault(address _vault) external returns (bool);\\n\\n    function removeCollateralVault(address _vault) external returns (bool);\\n\\n    function isCollateralVault(address _vault) external view returns (bool);\\n\\n    function updateMainParameters(\\n        uint256 _marginCallRatio,\\n        uint256 _autoLiquidationThreshold,\\n        uint256 _liquidationPrice\\n    ) external;\\n\\n    function updateLiquidationPrice(uint256 _price) external;\\n\\n    function updateAutoLiquidationThreshold(uint256 _ratio) external;\\n\\n    function updateMarginCallThreshold(uint256 _ratio) external;\\n\\n    function updateMinCollateralRatio(uint256 _ratio) external;\\n}\\n\",\"keccak256\":\"0x9385fa72dbe31a33887b237f577f16e080f4713b0acc20596c58040b841411ff\",\"license\":\"MIT\"},\"contracts/interfaces/ICollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ICollateralVault {\\n    event Deposit(address user, uint256 amount);\\n    event PositionDeposit(address user, address counterparty, uint256 amount);\\n    event RebalanceBetween(\\n        address user,\\n        address fromCounterparty,\\n        address toCounterparty,\\n        uint256 amount\\n    );\\n    event RebalanceFrom(address user, address counterparty, uint256 amount);\\n    event RebalanceTo(address user, address counterparty, uint256 amount);\\n    event Withdraw(address from, uint256 amount);\\n    event PositionWithdraw(address from, address counterparty, uint256 amount);\\n    event Liquidate(address from, address to, uint256 amount);\\n    event LiquidateIndependent(address from, address to, uint256 amount);\\n\\n    function ccy() external view returns (bytes32);\\n\\n    function tokenAddress() external view returns (address);\\n\\n    function deposit(address _counterparty, uint256 _amount) external;\\n\\n    function deposit(uint256 _amount) external payable;\\n\\n    function getIndependentCollateral(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getIndependentCollateralInETH(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getLockedCollateral(address _partyA, address _partyB)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLockedCollateral(address _user) external view returns (uint256);\\n\\n    function getLockedCollateralInETH(address _partyA, address _partyB)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function getLockedCollateralInETH(address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function liquidate(\\n        address _from,\\n        address _to,\\n        uint256 _amountETH\\n    ) external returns (uint256 liquidationLeftETH);\\n\\n    function owner() external view returns (address);\\n\\n    function rebalanceBetween(\\n        address _user,\\n        address _fromParty,\\n        address _toParty,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function rebalanceFrom(\\n        address _user,\\n        address _counterparty,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function rebalanceTo(\\n        address _user,\\n        address _counterparty,\\n        uint256 _amountETH\\n    ) external returns (uint256);\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function withdrawFrom(address _counterparty, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x8854f6fa27c201972268b3386339dcc978cdef75247b8b3662dd21290d6ca6ba\",\"license\":\"MIT\"},\"contracts/interfaces/ICrosschainAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ICrosschainAddressResolver {\\n    event UpdateAddress(address _user, uint256 _chainId, string _address);\\n\\n    /**\\n     * @dev Trigers to register multiple cross-chain addresses per chainId for user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainIds Array of chain ID number\\n     * @param _addresses Array of the target blockchain addresses\\n     *\\n     * @notice This function triggers by the Collateral Aggregator while user is registered in a system\\n     *\\n     */\\n    function updateAddresses(\\n        address _user,\\n        uint256[] memory _chainIds,\\n        string[] memory _addresses\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(uint256 _chainId, string memory _address) external;\\n\\n    /**\\n     * @dev Trigers to register cross-chain address per chainId by user\\n     * @param _user Secured Finance user ETH address\\n     * @param _chainId Chain ID number\\n     * @param _address Target blockchain address\\n     *\\n     */\\n    function updateAddress(\\n        address _user,\\n        uint256 _chainId,\\n        string memory _address\\n    ) external;\\n\\n    /**\\n     * @dev Trigers to get target blockchain address for a specific user.\\n     * @param _user Ethereum address of the Secured Finance user\\n     * @param _user Chain ID number\\n     */\\n    function getUserAddress(address _user, uint256 _chainId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x5ebf4b8928f6253eab963c52b0cc18364c7ba06491b0260399f88c8596c71825\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Currency Controller contract is responsible for managing supported\\n * currencies in Secured Finance Protocol\\n *\\n * Contract links new currencies to ETH Chainlink price feeds, without existing price feed\\n * contract owner is not able to add a new currency into the protocol\\n *\\n * Currency controller contract copies the logic of FXRatesAggregator contract, and\\n * will replace that contract in connection with Collateral Aggregator\\n */\\ninterface ICurrencyController {\\n    event CcyAdded(\\n        bytes32 indexed ccy,\\n        string name,\\n        uint16 chainId,\\n        uint256 haircut\\n    );\\n    event CcyCollateralUpdate(bytes32 indexed ccy, bool isCollateral);\\n    event CcySupportUpdate(bytes32 indexed ccy, bool isSupported);\\n    event HaircutUpdated(bytes32 indexed ccy, uint256 haircut);\\n    event MinMarginUpdated(bytes32 indexed ccy, uint256 minMargin);\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n    event PriceFeedAdded(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n    event PriceFeedRemoved(\\n        bytes32 ccy,\\n        string secondCcy,\\n        address indexed priceFeed\\n    );\\n\\n    function convertBulkToETH(bytes32 _ccy, uint256[] memory _amounts)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function convertFromETH(bytes32 _ccy, uint256 _amountETH)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function convertToETH(bytes32 _ccy, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function currencies(bytes32)\\n        external\\n        view\\n        returns (\\n            bool isSupported,\\n            string memory name,\\n            uint16 chainId\\n        );\\n\\n    function ethDecimals(bytes32) external view returns (uint8);\\n\\n    function getHaircut(bytes32 _ccy) external view returns (uint256);\\n\\n    function getHistoricalETHPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getHistoricalUSDPrice(bytes32 _ccy, uint80 _roundId)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getLastETHPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getLastUSDPrice(bytes32 _ccy) external view returns (int256);\\n\\n    function getMinMargin(bytes32 _ccy) external view returns (uint256);\\n\\n    function getChainId(bytes32 _ccy) external view returns (uint16);\\n\\n    function haircuts(bytes32) external view returns (uint256);\\n\\n    function isCollateral(bytes32) external view returns (bool);\\n\\n    function isSupportedCcy(bytes32 _ccy) external view returns (bool);\\n\\n    function last_ccy_index() external view returns (uint8);\\n\\n    function linkPriceFeed(\\n        bytes32 _ccy,\\n        address _priceFeedAddr,\\n        bool _isEthPriceFeed\\n    ) external returns (bool);\\n\\n    function minMargins(bytes32) external view returns (uint256);\\n\\n    function owner() external view returns (address);\\n\\n    function removePriceFeed(bytes32 _ccy, bool _isEthPriceFeed) external;\\n\\n    function setOwner(address _owner) external;\\n\\n    function supportCurrency(\\n        bytes32 _ccy,\\n        string memory _name,\\n        uint16 _chainId,\\n        address _ethPriceFeed,\\n        uint256 _haircut,\\n        address _tokenAddress\\n    ) external returns (bool);\\n\\n    function supportedCurrencies() external view returns (uint8);\\n\\n    function updateCcyHaircut(bytes32 _ccy, uint256 _haircut)\\n        external\\n        returns (bool);\\n\\n    function updateCollateralSupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateCurrencySupport(bytes32 _ccy, bool _isSupported)\\n        external\\n        returns (bool);\\n\\n    function updateMinMargin(bytes32 _ccy, uint256 _minMargin)\\n        external\\n        returns (bool);\\n\\n    function usdDecimals(bytes32) external view returns (uint8);\\n\\n    function tokenAddresses(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x24197e936f7701c82a04656685d419f65295bfa847a7ce34b8b270d6db8e64aa\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface ILiquidations {\\n    event DealAddedToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event DealRemovedFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    );\\n    event LinkedContract(address addr);\\n    event LiquidationAgentAdded(address indexed liquidationAgent);\\n    event LiquidationAgentRemoved(address indexed liquidationAgent);\\n    event OffsetUpdated(uint256 oldOffset, uint256 newOffset);\\n    event OwnerUpdated(address indexed oldOwner, address indexed newOwner);\\n\\n    function addDealToLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function addLiquidationAgent(address _liquidationAgent) external;\\n\\n    function linkContract(address _addr) external;\\n\\n    function liquidateDeals(\\n        address party0,\\n        address party1,\\n        bytes32[] memory dealIds\\n    ) external;\\n\\n    function liquidateDeals(address party0, address party1) external;\\n\\n    function offset() external view returns (uint256);\\n\\n    function removeDealFromLiquidationQueue(\\n        address party0,\\n        address party1,\\n        bytes32 dealId\\n    ) external;\\n\\n    function removeLiquidationAgent(address _liquidationAgent) external;\\n\\n    function updateLiquidationOffset(uint256 _offset) external;\\n}\\n\",\"keccak256\":\"0x54306b84a9dedee181de4a25a0c2dc08fb60d4f71ebf2543cdd5ec24399bbf63\",\"license\":\"MIT\"},\"contracts/libraries/AddressPacking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nlibrary AddressPacking {\\n    /**\\n     * @dev Packs two addresses into one hash to reduce the number of arguments\\n     * @param addr0 First address\\n     * @param addr1 Second address\\n     * @return Boolean to identify if addresses were flipped\\n     */\\n    function pack(address addr0, address addr1)\\n        internal\\n        pure\\n        returns (bytes32, bool)\\n    {\\n        require(addr0 != addr1, \\\"Identical addresses\\\");\\n        (address _addr0, address _addr1) = addr0 < addr1\\n            ? (addr0, addr1)\\n            : (addr1, addr0);\\n        require(_addr0 != address(0), \\\"Invalid address\\\");\\n\\n        if (_addr0 != addr0) {\\n            return (keccak256(abi.encode(_addr0, _addr1)), true);\\n        } else {\\n            return (keccak256(abi.encode(_addr0, _addr1)), false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe567a45d9e5739f3e89da206f5041692c8c7a2f9a837d23fa9e50117b81e773\",\"license\":\"MIT\"},\"contracts/libraries/NetPV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./AddressPacking.sol\\\";\\n\\nlibrary NetPV {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev CcyNetting keeps track of total amount of obligations owed\\n     * by two counterparties per currency, used to calculate the\\n     * total amount of collateral coverage in bilateral position\\n     */\\n    struct CcyNetting {\\n        uint256 unsettled0PV;\\n        uint256 unsettled1PV;\\n        uint256 party0PV;\\n        uint256 party1PV;\\n    }\\n\\n    /**\\n     * @dev Helper to return CcyNetting structure in correct order acccording\\n     * to in which order counterparty addresses are passed\\n     */\\n    function _handleFlippedCase(NetPV.CcyNetting memory netting, bool flipped)\\n        internal\\n        pure\\n        returns (NetPV.CcyNetting memory)\\n    {\\n        if (flipped) {\\n            uint256 unsettledPV = netting.unsettled0PV;\\n            uint256 partyPV = netting.party0PV;\\n\\n            netting.unsettled0PV = netting.unsettled1PV;\\n            netting.unsettled1PV = unsettledPV;\\n            netting.party0PV = netting.party1PV;\\n            netting.party1PV = partyPV;\\n        }\\n\\n        return netting;\\n    }\\n\\n    /**\\n     * @dev Returns the present value netting between 2 counterparties\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal view returns (NetPV.CcyNetting memory netting) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        netting = self[packedAddrs][ccy];\\n        netting = _handleFlippedCase(netting, flipped);\\n    }\\n\\n    /**\\n     * @dev Returns the present value netting between 2 counterparties\\n     * including hypothetical present value\\n     *\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param additionalPV0 Hypothetical PV for first party\\n     * @param additionalPV1 Hypothetical PV for second party\\n     * @param isSettled Boolean wether hypothetical PV settled or not\\n     */\\n    function get(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 additionalPV0,\\n        uint256 additionalPV1,\\n        bool isSettled\\n    ) internal view returns (NetPV.CcyNetting memory netting) {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        netting = self[packedAddrs][ccy];\\n        netting = _handleFlippedCase(netting, flipped);\\n\\n        if (isSettled) {\\n            netting.party0PV = netting.party0PV.add(additionalPV0);\\n            netting.party1PV = netting.party1PV.add(additionalPV1);\\n        } else {\\n            netting.unsettled0PV = netting.unsettled0PV.add(additionalPV0);\\n            netting.unsettled1PV = netting.unsettled1PV.add(additionalPV1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to increase the amount of obligations in PV netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param amount0 Amount of funds to be added for first counterparty\\n     * @param amount1 Amount of funds to be added for second counterparty\\n     * @param isSettled Boolean statement if obligations are settled already\\n     */\\n    function use(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (amount0 > 0) {\\n                isSettled\\n                    ? netting.party0PV = netting.party0PV.add(amount0)\\n                    : netting.unsettled0PV = netting.unsettled0PV.add(amount0);\\n            }\\n            if (amount1 > 0) {\\n                isSettled\\n                    ? netting.party1PV = netting.party1PV.add(amount1)\\n                    : netting.unsettled1PV = netting.unsettled1PV.add(amount1);\\n            }\\n        } else {\\n            if (amount0 > 0) {\\n                isSettled\\n                    ? netting.party1PV = netting.party1PV.add(amount0)\\n                    : netting.unsettled1PV = netting.unsettled1PV.add(amount0);\\n            }\\n            if (amount1 > 0) {\\n                isSettled\\n                    ? netting.party0PV = netting.party0PV.add(amount1)\\n                    : netting.unsettled0PV = netting.unsettled0PV.add(amount1);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to settle previously added obligations in PV netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param amount0 Amount of funds to be settled for first counterparty\\n     * @param amount1 Amount of funds to be settled for second counterparty\\n     */\\n    function settle(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (amount0 > 0) {\\n                netting.unsettled0PV = netting.unsettled0PV.sub(amount0);\\n                netting.party0PV = netting.party0PV.add(amount0);\\n            }\\n            if (amount1 > 0) {\\n                netting.unsettled1PV = netting.unsettled1PV.sub(amount1);\\n                netting.party1PV = netting.party1PV.add(amount1);\\n            }\\n        } else {\\n            if (amount0 > 0) {\\n                netting.unsettled1PV = netting.unsettled1PV.sub(amount0);\\n                netting.party1PV = netting.party1PV.add(amount0);\\n            }\\n            if (amount1 > 0) {\\n                netting.unsettled0PV = netting.unsettled0PV.sub(amount1);\\n                netting.party0PV = netting.party0PV.add(amount1);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to release PV obligations from netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param amount0 Amount of funds to be removed for first counterparty\\n     * @param amount1 Amount of funds to be removed for second counterparty\\n     */\\n    function release(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bool isSettled\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (amount0 > 0) {\\n                isSettled\\n                    ? netting.party0PV = netting.party0PV.sub(amount0)\\n                    : netting.unsettled0PV = netting.unsettled0PV.sub(amount0);\\n            }\\n            if (amount1 > 0) {\\n                isSettled\\n                    ? netting.party1PV = netting.party1PV.sub(amount1)\\n                    : netting.unsettled1PV = netting.unsettled1PV.sub(amount1);\\n            }\\n        } else {\\n            if (amount0 > 0) {\\n                isSettled\\n                    ? netting.party1PV = netting.party1PV.sub(amount0)\\n                    : netting.unsettled1PV = netting.unsettled1PV.sub(amount0);\\n            }\\n            if (amount1 > 0) {\\n                isSettled\\n                    ? netting.party0PV = netting.party0PV.sub(amount1)\\n                    : netting.unsettled0PV = netting.unsettled0PV.sub(amount1);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers to update PV in bilateral netting during mark-to-market\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     * @param prevPV0 Previous present value to be substracted from total exposure for counterparty A\\n     * @param prevPV1 Previous present value to be substracted from total exposure for counterparty B\\n     * @param currentPV0 Current present value to be added to total exposure for counterparty A\\n     * @param currentPV1 Current present value to be added to total exposure for counterparty B\\n     */\\n    function update(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy,\\n        uint256 prevPV0,\\n        uint256 prevPV1,\\n        uint256 currentPV0,\\n        uint256 currentPV1\\n    ) internal {\\n        (bytes32 packedAddrs, bool flipped) = AddressPacking.pack(\\n            party0,\\n            party1\\n        );\\n        NetPV.CcyNetting storage netting = self[packedAddrs][ccy];\\n\\n        if (!flipped) {\\n            if (currentPV0 > 0) {\\n                netting.party0PV = netting.party0PV.sub(prevPV0).add(\\n                    currentPV0\\n                );\\n            }\\n            if (currentPV1 > 0) {\\n                netting.party1PV = netting.party1PV.sub(prevPV1).add(\\n                    currentPV1\\n                );\\n            }\\n        } else {\\n            if (currentPV0 > 0) {\\n                netting.party1PV = netting.party1PV.sub(prevPV0).add(\\n                    currentPV0\\n                );\\n            }\\n            if (currentPV1 > 0) {\\n                netting.party0PV = netting.party0PV.sub(prevPV1).add(\\n                    currentPV1\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Clears the state of PV netting\\n     * @param self The mapping with all present value nettings per currency\\n     * @param party0 First counterparty address\\n     * @param party1 Second counterparty address\\n     * @param ccy Present value currency\\n     */\\n    function clear(\\n        mapping(bytes32 => mapping(bytes32 => NetPV.CcyNetting)) storage self,\\n        address party0,\\n        address party1,\\n        bytes32 ccy\\n    ) internal {\\n        (bytes32 packedAddrs, ) = AddressPacking.pack(party0, party1);\\n        delete self[packedAddrs][ccy];\\n    }\\n}\\n\",\"keccak256\":\"0x6106d635dd625a0813be5c2c273b23b9dba57f07aeeac608673a0dd384d95912\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600480546001600160a01b03191633179055612ee0600055613a986001556130d46002556109c46003556145cc8061004a6000396000f3fe608060405234801561001057600080fd5b50600436106102f05760003560e01c806388dc6a041161019d578063b418ea7a116100e9578063d60df57a116100a2578063dc766b871161007c578063dc766b8714610684578063e5a1481314610697578063ef75abb61461069f578063f30ce771146106c0576102f0565b8063d60df57a1461064b578063d63661b41461065e578063d810703b14610671576102f0565b8063b418ea7a146105e4578063b922ef00146105f7578063bd1a000a1461060a578063cdd9423414610612578063d04cad0214610625578063d3381a2014610638576102f0565b80639fcaebfa11610156578063adad5fd111610130578063adad5fd114610598578063b0779eb9146105ab578063b2c14a7a146105be578063b3fb2e4b146105d1576102f0565b80639fcaebfa1461055f578063a52aa37b14610572578063a64bb9b814610585576102f0565b806388dc6a04146104eb5780638cbf5e78146104fe5780638da5cb5b146105115780638fa1b2521461051957806391fac99614610539578063921f523a1461054c576102f0565b80632f29959a1161025c57806344c201f4116102155780637a07d8bb116101ef5780637a07d8bb146104aa5780637a9fffb7146104bd5780637aa49084146104c55780637d1f2ded146104d8576102f0565b806344c201f4146104715780634d298abd1461048457806376a4024614610497576102f0565b80632f29959a14610415578063337327d8146104285780633c4cf9c21461043b57806341468b0a1461044e57806343ca6e801461045657806344bf3c7214610469576102f0565b80631b5f7a6f116102ae5780631b5f7a6f146103915780631ec6475e146103a4578063221c053f146103b957806323234058146103cc57806326c01303146103ef578063273fad0e14610402576102f0565b8062fdf390146102f55780630738e9fc1461031e578063079086d01461033357806309fb35921461035357806312a86ffb146103685780631aa3a00814610389575b600080fd5b610308610303366004613a49565b6106d3565b6040516103159190613ee3565b60405180910390f35b61033161032c366004613a11565b61078b565b005b610346610341366004613a11565b6107e1565b6040516103159190613f1b565b61035b6107ee565b6040516103159190613f38565b61037b610376366004613a49565b6107f4565b604051610315929190613f58565b610331610813565b61033161039f366004613d18565b610892565b6103ac61091c565b6040516103159190613d7e565b6103466103c7366004613a11565b61092b565b6103df6103da366004613a49565b610949565b60405161031594939291906144f0565b6103316103fd366004613bdc565b61096f565b610331610410366004613d18565b6109c0565b610346610423366004613a11565b610a6b565b610331610436366004613a11565b610c05565b61035b610449366004613a11565b610c4e565b61035b610c63565b610346610464366004613a11565b610c69565b6103ac610c76565b61033161047f366004613a49565b610c85565b610331610492366004613a11565b610cda565b6103316104a5366004613d53565b610da2565b6103316104b8366004613d18565b610dfe565b61035b610ea9565b6103316104d3366004613b11565b610eaf565b6103316104e6366004613ac1565b610f90565b6103466104f9366004613a11565b611028565b61033161050c366004613c1b565b6110bb565b6103ac6111a6565b61052c610527366004613a11565b6111b5565b6040516103159190613e96565b61035b610547366004613bf0565b611271565b61035b61055a366004613a11565b61128e565b61033161056d366004613c1b565b61129c565b610331610580366004613d18565b611395565b6103df610593366004613a81565b611440565b6103316105a6366004613b7b565b6114c4565b6103466105b9366004613a11565b611553565b6103316105cc366004613a11565b61163b565b6103316105df366004613a49565b611703565b61037b6105f2366004613a49565b611752565b61037b610605366004613a49565b6117a2565b61035b6117ef565b610346610620366004613c1b565b6117f5565b610331610633366004613a11565b611814565b610346610646366004613a11565b6118dc565b61035b610659366004613a11565b611ac2565b61052c61066c366004613a49565b611acd565b61033161067f366004613b11565b611b85565b610331610692366004613b11565b611c3a565b6103ac611e0f565b6106b26106ad366004613b11565b611e1e565b604051610315929190613f26565b6103316106ce366004613c4f565b611e4c565b606060006106e18484611e86565b506000818152600f602052604081209192506106fc82611f91565b905060608167ffffffffffffffff8111801561071757600080fd5b50604051908082528060200260200182016040528015610741578160200160208202803683370190505b50905060005b8281101561077e57600061075b8583611f9c565b90508083838151811061076a57fe5b602090810291909101015250600101610747565b5093505050505b92915050565b610796600a33611fa8565b6107bb5760405162461bcd60e51b81526004016107b2906143a7565b60405180910390fd5b6001600160a01b03811660009081526011602052604090206107dd9033611fbd565b5050565b6000610785600a83611fa8565b60015481565b6000806108078484600080600080611fd2565b915091505b9250929050565b336000818152600e602052604090205460ff16156108435760405162461bcd60e51b81526004016107b2906140ce565b60408051600080825260208201909252606091610870565b606081526020019060019003908161085b5790505b5060408051600081526020810190915290915061088d8282612077565b505050565b6004546001600160a01b031633146108bc5760405162461bcd60e51b81526004016107b2906143d5565b600081116108dc5760405162461bcd60e51b81526004016107b290614229565b7fe135f14e1ac2d9c1c5e2859613f7d45a1d0bcf13eb54f0cc1865c2e4d9a02eba6001548260405161090f929190613f58565b60405180910390a1600155565b6007546001600160a01b031681565b6001600160a01b03166000908152600e602052604090205460ff1690565b60008060008061095f8686600080600080612127565b9299919850965090945092505050565b6006546001600160a01b031633146109995760405162461bcd60e51b81526004016107b290614463565b6109a48383836124fb565b61088d5760405162461bcd60e51b81526004016107b290613fbc565b6004546001600160a01b031633146109ea5760405162461bcd60e51b81526004016107b2906143d5565b60008111610a0a5760405162461bcd60e51b81526004016107b290614229565b6002548110610a2b5760405162461bcd60e51b81526004016107b2906140fa565b7f948ba262e91565b9caa2284557ddf9a7fb36ee3f00681b4fd1bfaae941e9188f60035482604051610a5e929190613f58565b60405180910390a1600355565b6004546000906001600160a01b03163314610a985760405162461bcd60e51b81526004016107b2906143d5565b610aa3600a83611fa8565b610abf5760405162461bcd60e51b81526004016107b290614289565b60008290506000816001600160a01b031663a5f7379f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aff57600080fd5b505afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b379190613d00565b90506000826001600160a01b0316639d76ea586040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7457600080fd5b505afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac9190613a2d565b9050846001600160a01b03167fb2625a768c47f82a2a5ab9fb7e2633fd82d48f0e38f890d3a02585d74e270d028383604051610be9929190613f41565b60405180910390a2610bfc600a86611fbd565b95945050505050565b610c10600a33611fa8565b610c2c5760405162461bcd60e51b81526004016107b2906143a7565b6001600160a01b03811660009081526011602052604090206107dd90336125f0565b6000610c5c82600080612605565b5092915050565b60005481565b6000610785600883611fa8565b6006546001600160a01b031681565b610c90600a33611fa8565b610cac5760405162461bcd60e51b81526004016107b2906143a7565b6000610cb88383611e86565b506000818152601060205260409020909150610cd49033611fbd565b50505050565b6004546001600160a01b03163314610d045760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b038116610d2a5760405162461bcd60e51b81526004016107b2906141cc565b610d3c816001600160a01b0316612676565b610d585760405162461bcd60e51b81526004016107b290614252565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f46f5f516f6e3226c27d878e2a87f74ebdc95e752f7d5de0f102a231a8d28f74590600090a250565b6004546001600160a01b03163314610dcc5760405162461bcd60e51b81526004016107b2906143d5565b6001548314610dde57610dde83610892565b6002548214610df057610df082611395565b600054811461088d5761088d815b6004546001600160a01b03163314610e285760405162461bcd60e51b81526004016107b2906143d5565b60008111610e485760405162461bcd60e51b81526004016107b2906142c0565b6002548110610e695760405162461bcd60e51b81526004016107b290614131565b7f4bf48f4a07b20309fa7bd58d04c1aa538e17a29099bebb19872d1a54e8e1c4ea60005482604051610e9c929190613f58565b60405180910390a1600055565b60035481565b610eba600833611fa8565b610ed65760405162461bcd60e51b81526004016107b290614168565b6000610ee28787611e86565b506000818152600f60205260409020909150610efe908661267c565b610f1a5760405162461bcd60e51b81526004016107b2906144ca565b610f2a6012888888888888612688565b610f36878760016127b5565b856001600160a01b0316876001600160a01b03167f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f2687878787604051610f7f9493929190613f66565b60405180910390a350505050505050565b610f9b600833611fa8565b610fb75760405162461bcd60e51b81526004016107b290614168565b610fc66012868686868661283c565b610fd2858560016127b5565b836001600160a01b0316856001600160a01b03167fff9f0c6cfb29ffc1a20f3a25b0cb947e89cb363e39e3db0df827dcec79f126b685858560405161101993929190613f83565b60405180910390a35050505050565b6004546000906001600160a01b031633146110555760405162461bcd60e51b81526004016107b2906143d5565b611060600883611fa8565b61107c5760405162461bcd60e51b81526004016107b290614289565b6040516001600160a01b038316907f484fb579b9a8ea6000e970f2490ecb56612c86295b1467a5063ec9a2220b2e4b90600090a2610785600883611fbd565b6110c6600833611fa8565b6110e25760405162461bcd60e51b81526004016107b290614168565b6001600160a01b0383166000908152600c60209081526040808320858452909152902054611110908261292a565b6001600160a01b0384166000908152600c60209081526040808320868452909152902081905561115e576001600160a01b0383166000908152600d6020526040902061115c9083612952565b505b826001600160a01b03167fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a768383604051611199929190613f58565b60405180910390a2505050565b6004546001600160a01b031681565b6001600160a01b03811660009081526011602052604081206060916111d982611f91565b905060608167ffffffffffffffff811180156111f457600080fd5b5060405190808252806020026020018201604052801561121e578160200160208202803683370190505b50905060005b828110156112685760006112388583611f9c565b90508083838151811061124757fe5b6001600160a01b039092166020928302919091019091015250600101611224565b50949350505050565b600c60209081526000928352604080842090915290825290205481565b60006107858260008061295e565b6112a7600833611fa8565b6112c35760405162461bcd60e51b81526004016107b290614168565b6001600160a01b0383166000908152600d602052604090206112e59083612a9c565b506112f18383836117f5565b61130d5760405162461bcd60e51b81526004016107b290614434565b6001600160a01b0383166000908152600c6020908152604080832085845290915290205461133b9082612aa8565b6001600160a01b0384166000818152600c60209081526040808320878452909152908190209290925590517f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b8043906111999085908590613f58565b6004546001600160a01b031633146113bf5760405162461bcd60e51b81526004016107b2906143d5565b600081116113df5760405162461bcd60e51b81526004016107b290614229565b60015481106114005760405162461bcd60e51b81526004016107b2906142e9565b7fa4445a1c25ee07dc5cbb362ccd32feb0c96f53b9c05588e53d7a05ea1975813a60025482604051611433929190613f58565b60405180910390a1600255565b60008060008060006114528888611e86565b506000818152600f6020526040902090915061146e908761267c565b61148a5760405162461bcd60e51b81526004016107b2906144ca565b61149261376f565b61149f60128a8a8a612acd565b805160208201516040830151606090930151919c909b50919950975095505050505050565b6114cf600833611fa8565b6114eb5760405162461bcd60e51b81526004016107b290614168565b6114fc601288888888888888612b45565b611508878760016127b5565b856001600160a01b0316876001600160a01b03167f93e5ba92322cd89358ce3fbbe2b25b694ef010aee4a1e46ac849c392887bd5088787878787604051610f7f959493929190613f99565b6004546000906001600160a01b031633146115805760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b0382166115a65760405162461bcd60e51b81526004016107b2906141cc565b6115b8826001600160a01b0316612676565b6115d45760405162461bcd60e51b81526004016107b290614252565b6115df600883611fa8565b156115fc5760405162461bcd60e51b81526004016107b2906143fd565b6040516001600160a01b038316907f6426e73541c82494e19ac1646c231acf4b36f248c5146ed03a248e35dde1fac090600090a26107856008836125f0565b6004546001600160a01b031633146116655760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b03811661168b5760405162461bcd60e51b81526004016107b2906141cc565b61169d816001600160a01b0316612676565b6116b95760405162461bcd60e51b81526004016107b290614252565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f989a6b1f040653a79dfe5f704cecdd21dab3e67fc917106ce621d6711bc3332f90600090a250565b61170e600a33611fa8565b61172a5760405162461bcd60e51b81526004016107b2906143a7565b60006117368383611e86565b506000818152601060205260409020909150610cd490336125f0565b60008060008060008061176d88886000806000806001612c20565b9296509094509250905082611783576000611785565b835b81611791576000611793565b825b95509550505050509250929050565b6000806000806000806117bd88886000806000806001612c20565b92965090945092509050826117d257836117d5565b60005b816117e05782611793565b98600098509650505050505050565b60025481565b600080611803858585612605565b5060015411159150505b9392505050565b6004546001600160a01b0316331461183e5760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b0381166118645760405162461bcd60e51b81526004016107b2906141cc565b611876816001600160a01b0316612676565b6118925760405162461bcd60e51b81526004016107b290614252565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f432f91f15e19a8fa78cf858ff971e246d92cdd2d6049f4ad52566b3fae85d2f490600090a250565b6004546000906001600160a01b031633146119095760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b03821661192f5760405162461bcd60e51b81526004016107b2906141cc565b611941826001600160a01b0316612676565b61195d5760405162461bcd60e51b81526004016107b290614252565b611968600a83611fa8565b156119855760405162461bcd60e51b81526004016107b2906143fd565b60008290506000816001600160a01b031663a5f7379f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119c557600080fd5b505afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190613d00565b90506000826001600160a01b0316639d76ea586040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a729190613a2d565b9050846001600160a01b03167ff5c161467306371e9a1f3ee7ac7573078c4e85ed24a127cf6523c0e2e298ad158383604051611aaf929190613f41565b60405180910390a2610bfc600a866125f0565b6000610c5c82612cf2565b60606000611adb8484611e86565b506000818152601060205260408120919250611af682611f91565b905060608167ffffffffffffffff81118015611b1157600080fd5b50604051908082528060200260200182016040528015611b3b578160200160208202803683370190505b50905060005b8281101561077e576000611b558583611f9c565b905080838381518110611b6457fe5b6001600160a01b039092166020928302919091019091015250600101611b41565b611b90600833611fa8565b611bac5760405162461bcd60e51b81526004016107b290614168565b6000611bb88787611e86565b506000818152600f60205260409020909150611bd49086612a9c565b50611be56012888888888888612d9b565b611bf1878760016127b5565b856001600160a01b0316876001600160a01b03167fb98a18b045c69b240b38573658669b475c5431a85b85c92eb84473a2c3ff09a587878787604051610f7f9493929190613f66565b6006546001600160a01b0316331480611c595750611c59600833611fa8565b611c755760405162461bcd60e51b81526004016107b290614361565b6000611c98612710611c9260005487612e8f90919063ffffffff16565b90612ec9565b6005546040516344a6ecdd60e01b81529192506000916001600160a01b03909116906344a6ecdd90611cd09089908690600401613f58565b60206040518083038186803b158015611ce857600080fd5b505afa158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d209190613d00565b9050611d2d8888836124fb565b611d495760405162461bcd60e51b81526004016107b290613fbc565b866001600160a01b0316886001600160a01b03167fed433eb165bd381b6fa417686c541023235ba1cc52f6075a29f79d4d28d328bc8888604051611d8e929190613f58565b60405180910390a3611da7601289898988600089612688565b866001600160a01b0316886001600160a01b03167f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f268887600088604051611df19493929190613f66565b60405180910390a3611e05888860016127b5565b5050505050505050565b6005546001600160a01b031681565b600080600080611e328a8a8a8a8a8a611fd2565b600154918211159550101592505050965096945050505050565b336000818152600e602052604090205460ff1615611e7c5760405162461bcd60e51b81526004016107b2906140ce565b61088d8383612077565b600080826001600160a01b0316846001600160a01b03161415611ebb5760405162461bcd60e51b81526004016107b290614041565b600080846001600160a01b0316866001600160a01b031610611ede578486611ee1565b85855b90925090506001600160a01b038216611f0c5760405162461bcd60e51b81526004016107b29061406e565b856001600160a01b0316826001600160a01b031614611f5b578181604051602001611f38929190613e58565b60405160208183030381529060405280519060200120600193509350505061080c565b8181604051602001611f6e929190613e58565b60405160208183030381529060405280519060200120600093509350505061080c565b600061078582612efb565b600061180d8383612eff565b600061180d836001600160a01b038416612f44565b600061180d836001600160a01b038416612f5c565b600080611fdd613797565b611feb898989898989613022565b60208301528152611ffc8989613145565b60a0830152608082015280511561202c57805160808201516120269190611c929061271090612e8f565b60408201525b60208101511561205d576120578160200151611c928360a00151612710612e8f90919063ffffffff16565b60608201525b806040015181606001519250925050965096945050505050565b336000818152600e602052604090819020805460ff19166001179055600754905163e9ac42cb60e01b81526001600160a01b03919091169163e9ac42cb916120c6919085908790600401613d92565b600060405180830381600087803b1580156120e057600080fd5b505af11580156120f4573d6000803e3d6000fd5b50506040513392507feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9150600090a25050565b6000806000806121356137cd565b61213f8b8b611e86565b508082526000908152600f6020526040902061215a81611f91565b61022083015260005b8261022001518110156123c15761217a8282611f9c565b602084018190528b14156121a65761219c60128e8e86602001518e8e8e61326a565b60408401526121bd565b6121b760128e8e8660200151612acd565b60408401525b6005546020840151604051630ba1ffe760e11b81526001600160a01b0390921691631743ffce916121f091600401613f38565b60206040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190613d00565b6060840181905260408401516122559161333c565b6040840181905251608084015161226b91612aa8565b608084015260408301516020015160a084015161228791612aa8565b60a08401526005546020840151604051634d5ed9c560e11b81526001600160a01b0390921691639abdb38a916122bf91600401613f38565b60206040518083038186803b1580156122d757600080fd5b505afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f9190613d00565b610180840152604080840151015160c084015161232b91612aa8565b60c084015260408301516060015160e084015161234791612aa8565b60e0840152610180830151604080850151015161237c916123709161271091611c929190612e8f565b61014085015190612aa8565b6101408401526101808301516040840151606001516123b3916123a79161271091611c929190612e8f565b61016085015190612aa8565b610160840152600101612163565b508161016001518260c0015110156123da5760006123ee565b61016082015160c08301516123ee9161292a565b6101a083015261014082015160e0830151101561240c576000612420565b61014082015160e08301516124209161292a565b6101c083018190526101a0830151116124685781608001516124638360a0015161245d856101a00151866101c0015161292a90919063ffffffff16565b90612aa8565b612493565b61248d826080015161245d846101c00151856101a0015161292a90919063ffffffff16565b8260a001515b6102008401526101e083015260c082015160808301516124b291612aa8565b61010083015260e082015160a08301516124cb91612aa8565b61012083018190526101e083015161020084015161010090940151909e939d509b50995090975050505050505050565b6001600160a01b03831660009081526011602052604081208161251d82611f91565b905060005b841580159061253057508181105b156125d15760006125418483611f9c565b6040516326c0130360e01b81529091506001600160a01b038216906326c0130390612574908b908b908b90600401613e72565b602060405180830381600087803b15801561258e57600080fd5b505af11580156125a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c69190613d00565b955050600101612522565b84156125e3576000935050505061180d565b5060019695505050505050565b600061180d836001600160a01b038416613408565b60008061261061385c565b61261b86868661295e565b815261262686613452565b6040820152805115612655578051604082015161264b9190611c929061271090612e8f565b6020820152612661565b5160009250905061266e565b6020810151905190925090505b935093915050565b3b151590565b600061180d8383612f44565b6000806126958888611e86565b600082815260208c815260408083208b845290915290209193509150816127325785156126ee57836126d55780546126cd908761292a565b8082556126ec565b60028101546126e4908761292a565b816002018190555b505b841561272d5783612714576001810154612708908661292a565b8160010181905561272b565b6003810154612723908661292a565b816003018190555b505b6127a9565b8515612771578361275857600181015461274c908761292a565b8160010181905561276f565b6003810154612767908761292a565b816003018190555b505b84156127a95783612790578054612788908661292a565b8082556127a7565b600281015461279f908661292a565b816002018190555b505b50505050505050505050565b6000806000806127cc87876000806000808b612c20565b93509350935093506000841115612805576127e987878686613530565b6128055760405162461bcd60e51b81526004016107b290614493565b81156128335761281786888484613530565b6128335760405162461bcd60e51b81526004016107b290614493565b50505050505050565b6000806128498787611e86565b600082815260208b815260408083208a845290915290209193509150816128c757841561289357805461287c908661292a565b8155600281015461288d9086612aa8565b60028201555b83156128c25760018101546128a8908561292a565b600182015560038101546128bc9085612aa8565b60038201555b61291f565b84156128f65760018101546128dc908661292a565b600182015560038101546128f09086612aa8565b60038201555b831561291f578054612908908561292a565b815560028101546129199085612aa8565b60028201555b505050505050505050565b60008282111561294c5760405162461bcd60e51b81526004016107b290614195565b50900390565b600061180d8383612f5c565b6001600160a01b0383166000908152600d6020526040812061297e61376f565b61298782611f91565b606082015260005b8160600151811015612a915760006129a78483611f9c565b6001600160a01b0389166000908152600c60209081526040808320848452825290912054908501529050868114156129ee5760208301516129e89087612aa8565b60208401525b60055460208401516040516344a6ecdd60e01b81526001600160a01b03909216916344a6ecdd91612a2491859190600401613f58565b60206040518083038186803b158015612a3c57600080fd5b505afa158015612a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a749190613d00565b604084018190528351612a8691612aa8565b83525060010161298f565b505195945050505050565b600061180d8383613408565b60008282018381101561180d5760405162461bcd60e51b81526004016107b290614097565b612ad561376f565b600080612ae28686611e86565b600082815260208a81526040808320898452825291829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015294509092509050612b3a83826136b7565b979650505050505050565b600080612b528989611e86565b600082815260208d815260408083208c84529091529020919350915081612bc6578415612b9a57612b948561245d89846002015461292a90919063ffffffff16565b60028201555b8315612bc157612bbb8461245d88846003015461292a90919063ffffffff16565b60038201555b6127a7565b8415612bed57612be78561245d89846003015461292a90919063ffffffff16565b60038201555b83156127a757612c0e8461245d88846002015461292a90919063ffffffff16565b60028201555050505050505050505050565b600080600080612c2e61387d565b612c3c8c8c8c8c8c8c613022565b602083015281528515612c80576001548151612c5f9161271091611c9291612e8f565b81526001546020820151612c7a9161271091611c9291612e8f565b60208201525b612c8a8c8c613145565b60e083015260c082018190528151612ca291906136e8565b15156060830152604082015260e08101516020820151612cc291906136e8565b151560a08301819052608083018290526040830151606090930151929e929d50909b509950975050505050505050565b600080612cfd6138c6565b612d0984600080612605565b82526020820152612d1984613452565b608082015260015460208201511115612d66576001546020820151612d3d9161292a565b6040820181905260208201516080830151612d5c92611c929190612e8f565b6060820152612d89565b8051612d7d57608081015190519092509050612d96565b51600092509050612d96565b6060810151905190925090505b915091565b600080612da88888611e86565b600082815260208c815260408083208b84529091529020919350915081612e2a578515612e015783612de8578054612de09087612aa8565b808255612dff565b6002810154612df79087612aa8565b816002018190555b505b841561272d5783612e1b5760018101546127089086612aa8565b60038101546127239086612aa8565b8515612e695783612e50576001810154612e449087612aa8565b81600101819055612e67565b6003810154612e5f9087612aa8565b816003018190555b505b84156127a95783612e805780546127889086612aa8565b600281015461279f9086612aa8565b600082612e9e57506000610785565b82820282848281612eab57fe5b041461180d5760405162461bcd60e51b81526004016107b290614320565b6000808211612eea5760405162461bcd60e51b81526004016107b2906141f2565b818381612ef357fe5b049392505050565b5490565b81546000908210612f225760405162461bcd60e51b81526004016107b290613fff565b826000018281548110612f3157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156130185783546000198083019190810190600090879083908110612f8f57fe5b9060005260206000200154905080876000018481548110612fac57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612fdc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610785565b6000915050610785565b60008061302d6138f5565b61303b898989898989612127565b60608501526040840181905260208401919091529082526003546130679161271091611c929190612e8f565b608082015260035460608201516130859161271091611c9291612e8f565b60a08201528051156130c85760015481516130a79161271091611c9291612e8f565b8160800151116130b85780516130be565b80608001515b60c08201526130d3565b608081015160c08201525b602081015115613120576130fc612710611c926001548460200151612e8f90919063ffffffff16565b8160a0015111613110578060200151613116565b8060a001515b60e082015261312b565b60a081015160e08201525b8060c001518160e001519250925050965096945050505050565b60008060006131548585611e86565b50600081815260106020526040902090915061316e6138c6565b61317782611f91565b815260005b81518110156132515760006131918483611f9c565b604051631232c4f560e21b81529091506001600160a01b038216906348cb13d4906131c2908c908c90600401613e58565b604080518083038186803b1580156131d957600080fd5b505afa1580156131ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132119190613d30565b604085015260208401819052606084015161322b91612aa8565b60608401526040830151608084015161324391612aa8565b60808401525060010161317c565b5080606001518160800151945094505050509250929050565b61327261376f565b60008061327f8989611e86565b600082815260208d815260408083208c84528252918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546060820152945090925090506132d783826136b7565b9250831561330c5760408301516132ee9087612aa8565b604084015260608301516133029086612aa8565b606084015261332f565b82516133189087612aa8565b835260208301516133299086612aa8565b60208401525b5050979650505050505050565b61334461376f565b82511561336857825161336590670de0b6b3a764000090611c929085612e8f565b83525b60208301511561339b57613395670de0b6b3a7640000611c92848660200151612e8f90919063ffffffff16565b60208401525b6040830151156133ce576133c8670de0b6b3a7640000611c92848660400151612e8f90919063ffffffff16565b60408401525b606083015115613401576133fb670de0b6b3a7640000611c92848660600151612e8f90919063ffffffff16565b60608401525b5090919050565b60006134148383612f44565b61344a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610785565b506000610785565b6001600160a01b038116600090815260116020526040812081808061347684611f91565b905060005b8181101561352557600061348f8683611f9c565b60405163d98e918560e01b81529091506001600160a01b0382169063d98e9185906134be908b90600401613d7e565b60206040518083038186803b1580156134d657600080fd5b505afa1580156134ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350e9190613d00565b945061351a8486612aa8565b93505060010161347b565b509095945050505050565b6001600160a01b03841660009081526011602052604081208161355282611f91565b905060005b851580159061356557508181105b156136955760006135768483611f9c565b9050851561360757604051634c64f21d60e11b81526001600160a01b038216906398c9e43a906135ae908c908c908c90600401613e72565b602060405180830381600087803b1580156135c857600080fd5b505af11580156135dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136009190613d00565b965061368c565b6040516358846d5360e11b81526001600160a01b0382169063b108daa690613637908c908c908c90600401613e72565b602060405180830381600087803b15801561365157600080fd5b505af1158015613665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136899190613d00565b96505b50600101613557565b85156136a757600093505050506136af565b600193505050505b949350505050565b6136bf61376f565b811561340157505080516040820180516020840180518552929092526060830180519091525290565b6000806000841180156136fb5750600083115b15613733578284111561371d57613712848461292a565b91506001905061372e565b613727838561292a565b9150600090505b61080c565b600084118015613741575082155b156137515750829050600161080c565b8315801561375f5750600083115b1561080c57509092600092509050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161024081018252600080825260208201529081016137ed61376f565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518061010001604052806000815260200160008152602001600081526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082601f83011261394a578081fd5b813561395d61395882614532565b61450b565b81815291506020808301908481018184028601820187101561397e57600080fd5b60005b8481101561399d57813584529282019290820190600101613981565b505050505092915050565b600082601f8301126139b8578081fd5b813567ffffffffffffffff8111156139ce578182fd5b6139e1601f8201601f191660200161450b565b91508082528360208285010111156139f857600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613a22578081fd5b813561180d8161457e565b600060208284031215613a3e578081fd5b815161180d8161457e565b60008060408385031215613a5b578081fd5b8235613a668161457e565b91506020830135613a768161457e565b809150509250929050565b600080600060608486031215613a95578081fd5b8335613aa08161457e565b92506020840135613ab08161457e565b929592945050506040919091013590565b600080600080600060a08688031215613ad8578081fd5b8535613ae38161457e565b94506020860135613af38161457e565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c08789031215613b29578081fd5b8635613b348161457e565b95506020870135613b448161457e565b945060408701359350606087013592506080870135915060a08701358015158114613b6d578182fd5b809150509295509295509295565b600080600080600080600060e0888a031215613b95578081fd5b8735613ba08161457e565b96506020880135613bb08161457e565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600080600060608486031215613a95578283fd5b60008060408385031215613c02578182fd5b8235613c0d8161457e565b946020939093013593505050565b600080600060608486031215613c2f578081fd5b8335613c3a8161457e565b95602085013595506040909401359392505050565b60008060408385031215613c61578182fd5b823567ffffffffffffffff80821115613c78578384fd5b818501915085601f830112613c8b578384fd5b8135613c9961395882614532565b81815260208082019190858101885b85811015613cd157613cbf8c8484358b01016139a8565b85529382019390820190600101613ca8565b50919750880135945050505080821115613ce9578283fd5b50613cf68582860161393a565b9150509250929050565b600060208284031215613d11578081fd5b5051919050565b600060208284031215613d29578081fd5b5035919050565b60008060408385031215613d42578182fd5b505080516020909101519092909150565b600080600060608486031215613d67578081fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260606020808301829052845191830182905260009185820191906080850190845b81811015613ddb57845183529383019391830191600101613dbf565b505084810360408601528551808252828201935082810282018301838801865b83811015613e4857601f198086850301885282518051613e1b8187613f38565b613e2882828c8601614552565b99890199601f919091019092169190910193505090850190600101613dfb565b50909a9950505050505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b81811015613ed75783516001600160a01b031683529284019291840191600101613eb2565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613ed757835183529284019291840191600101613eff565b901515815260200190565b91151582521515602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b938452602084019290925260408301521515606082015260800190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526023908201527f494e434f52524543545f4c49515549444154494f4e5f4143524f53535f5641556040820152624c545360e81b606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252601390820152724964656e746963616c2061646472657373657360681b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260129082015271524547495354455245445f414c524541445960701b604082015260600190565b6020808252601d908201527f4d494e5f434f4c4c41544552414c5f524154494f5f4f564552464c4f57000000604082015260600190565b6020808252601a908201527f4c49515549444154494f4e5f50524943455f4f564552464c4f57000000000000604082015260600190565b6020808252601390820152722727a72fa1a7a62620aa22a920a62faaa9a2a960691b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600f908201526e494e434f52524543545f524154494f60881b604082015260600190565b6020808252601e908201527f43616e277420616464206e6f6e2d636f6e747261637420616464726573730000604082015260600190565b6020808252601e908201527f43616e27742072656d6f7665206e6f6e2d6578697374696e6720757365720000604082015260600190565b6020808252600f908201526e494e434f52524543545f505249434560881b604082015260600190565b6020808252601f908201527f4155544f5f4c49515549444154494f4e5f524154494f5f4f564552464c4f5700604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526026908201527f4e4f525f4c49515549444154494f4e5f454e47494e455f434f4c4c4154455241604082015265262faaa9a2a960d11b606082015260800190565b6020808252601490820152731393d397d0d3d31310551154905317d59055531560621b604082015260600190565b6020808252600e908201526d494e56414c49445f41434345535360901b604082015260600190565b6020808252601a908201527f43616e277420616464206578697374696e672061646472657373000000000000604082015260600190565b602080825260159082015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604082015260600190565b6020808252601690820152754e4f4e5f4c49515549444154494f4e5f454e47494e4560501b604082015260600190565b6020808252601e908201527f4e4f4e5f454e4f5547485f46554e44535f464f525f524542414c414e43450000604082015260600190565b6020808252600c908201526b6e6f6e2d757365642063637960a01b604082015260600190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff8111828210171561452a57600080fd5b604052919050565b600067ffffffffffffffff821115614548578081fd5b5060209081020190565b60005b8381101561456d578181015183820152602001614555565b83811115610cd45750506000910152565b6001600160a01b038116811461459357600080fd5b5056fea2646970667358221220e919899c5e78e8efdbd7c61f7cbf89263ce7b1df6daa425aa185c68ed616b51964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f05760003560e01c806388dc6a041161019d578063b418ea7a116100e9578063d60df57a116100a2578063dc766b871161007c578063dc766b8714610684578063e5a1481314610697578063ef75abb61461069f578063f30ce771146106c0576102f0565b8063d60df57a1461064b578063d63661b41461065e578063d810703b14610671576102f0565b8063b418ea7a146105e4578063b922ef00146105f7578063bd1a000a1461060a578063cdd9423414610612578063d04cad0214610625578063d3381a2014610638576102f0565b80639fcaebfa11610156578063adad5fd111610130578063adad5fd114610598578063b0779eb9146105ab578063b2c14a7a146105be578063b3fb2e4b146105d1576102f0565b80639fcaebfa1461055f578063a52aa37b14610572578063a64bb9b814610585576102f0565b806388dc6a04146104eb5780638cbf5e78146104fe5780638da5cb5b146105115780638fa1b2521461051957806391fac99614610539578063921f523a1461054c576102f0565b80632f29959a1161025c57806344c201f4116102155780637a07d8bb116101ef5780637a07d8bb146104aa5780637a9fffb7146104bd5780637aa49084146104c55780637d1f2ded146104d8576102f0565b806344c201f4146104715780634d298abd1461048457806376a4024614610497576102f0565b80632f29959a14610415578063337327d8146104285780633c4cf9c21461043b57806341468b0a1461044e57806343ca6e801461045657806344bf3c7214610469576102f0565b80631b5f7a6f116102ae5780631b5f7a6f146103915780631ec6475e146103a4578063221c053f146103b957806323234058146103cc57806326c01303146103ef578063273fad0e14610402576102f0565b8062fdf390146102f55780630738e9fc1461031e578063079086d01461033357806309fb35921461035357806312a86ffb146103685780631aa3a00814610389575b600080fd5b610308610303366004613a49565b6106d3565b6040516103159190613ee3565b60405180910390f35b61033161032c366004613a11565b61078b565b005b610346610341366004613a11565b6107e1565b6040516103159190613f1b565b61035b6107ee565b6040516103159190613f38565b61037b610376366004613a49565b6107f4565b604051610315929190613f58565b610331610813565b61033161039f366004613d18565b610892565b6103ac61091c565b6040516103159190613d7e565b6103466103c7366004613a11565b61092b565b6103df6103da366004613a49565b610949565b60405161031594939291906144f0565b6103316103fd366004613bdc565b61096f565b610331610410366004613d18565b6109c0565b610346610423366004613a11565b610a6b565b610331610436366004613a11565b610c05565b61035b610449366004613a11565b610c4e565b61035b610c63565b610346610464366004613a11565b610c69565b6103ac610c76565b61033161047f366004613a49565b610c85565b610331610492366004613a11565b610cda565b6103316104a5366004613d53565b610da2565b6103316104b8366004613d18565b610dfe565b61035b610ea9565b6103316104d3366004613b11565b610eaf565b6103316104e6366004613ac1565b610f90565b6103466104f9366004613a11565b611028565b61033161050c366004613c1b565b6110bb565b6103ac6111a6565b61052c610527366004613a11565b6111b5565b6040516103159190613e96565b61035b610547366004613bf0565b611271565b61035b61055a366004613a11565b61128e565b61033161056d366004613c1b565b61129c565b610331610580366004613d18565b611395565b6103df610593366004613a81565b611440565b6103316105a6366004613b7b565b6114c4565b6103466105b9366004613a11565b611553565b6103316105cc366004613a11565b61163b565b6103316105df366004613a49565b611703565b61037b6105f2366004613a49565b611752565b61037b610605366004613a49565b6117a2565b61035b6117ef565b610346610620366004613c1b565b6117f5565b610331610633366004613a11565b611814565b610346610646366004613a11565b6118dc565b61035b610659366004613a11565b611ac2565b61052c61066c366004613a49565b611acd565b61033161067f366004613b11565b611b85565b610331610692366004613b11565b611c3a565b6103ac611e0f565b6106b26106ad366004613b11565b611e1e565b604051610315929190613f26565b6103316106ce366004613c4f565b611e4c565b606060006106e18484611e86565b506000818152600f602052604081209192506106fc82611f91565b905060608167ffffffffffffffff8111801561071757600080fd5b50604051908082528060200260200182016040528015610741578160200160208202803683370190505b50905060005b8281101561077e57600061075b8583611f9c565b90508083838151811061076a57fe5b602090810291909101015250600101610747565b5093505050505b92915050565b610796600a33611fa8565b6107bb5760405162461bcd60e51b81526004016107b2906143a7565b60405180910390fd5b6001600160a01b03811660009081526011602052604090206107dd9033611fbd565b5050565b6000610785600a83611fa8565b60015481565b6000806108078484600080600080611fd2565b915091505b9250929050565b336000818152600e602052604090205460ff16156108435760405162461bcd60e51b81526004016107b2906140ce565b60408051600080825260208201909252606091610870565b606081526020019060019003908161085b5790505b5060408051600081526020810190915290915061088d8282612077565b505050565b6004546001600160a01b031633146108bc5760405162461bcd60e51b81526004016107b2906143d5565b600081116108dc5760405162461bcd60e51b81526004016107b290614229565b7fe135f14e1ac2d9c1c5e2859613f7d45a1d0bcf13eb54f0cc1865c2e4d9a02eba6001548260405161090f929190613f58565b60405180910390a1600155565b6007546001600160a01b031681565b6001600160a01b03166000908152600e602052604090205460ff1690565b60008060008061095f8686600080600080612127565b9299919850965090945092505050565b6006546001600160a01b031633146109995760405162461bcd60e51b81526004016107b290614463565b6109a48383836124fb565b61088d5760405162461bcd60e51b81526004016107b290613fbc565b6004546001600160a01b031633146109ea5760405162461bcd60e51b81526004016107b2906143d5565b60008111610a0a5760405162461bcd60e51b81526004016107b290614229565b6002548110610a2b5760405162461bcd60e51b81526004016107b2906140fa565b7f948ba262e91565b9caa2284557ddf9a7fb36ee3f00681b4fd1bfaae941e9188f60035482604051610a5e929190613f58565b60405180910390a1600355565b6004546000906001600160a01b03163314610a985760405162461bcd60e51b81526004016107b2906143d5565b610aa3600a83611fa8565b610abf5760405162461bcd60e51b81526004016107b290614289565b60008290506000816001600160a01b031663a5f7379f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610aff57600080fd5b505afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b379190613d00565b90506000826001600160a01b0316639d76ea586040518163ffffffff1660e01b815260040160206040518083038186803b158015610b7457600080fd5b505afa158015610b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bac9190613a2d565b9050846001600160a01b03167fb2625a768c47f82a2a5ab9fb7e2633fd82d48f0e38f890d3a02585d74e270d028383604051610be9929190613f41565b60405180910390a2610bfc600a86611fbd565b95945050505050565b610c10600a33611fa8565b610c2c5760405162461bcd60e51b81526004016107b2906143a7565b6001600160a01b03811660009081526011602052604090206107dd90336125f0565b6000610c5c82600080612605565b5092915050565b60005481565b6000610785600883611fa8565b6006546001600160a01b031681565b610c90600a33611fa8565b610cac5760405162461bcd60e51b81526004016107b2906143a7565b6000610cb88383611e86565b506000818152601060205260409020909150610cd49033611fbd565b50505050565b6004546001600160a01b03163314610d045760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b038116610d2a5760405162461bcd60e51b81526004016107b2906141cc565b610d3c816001600160a01b0316612676565b610d585760405162461bcd60e51b81526004016107b290614252565b600680546001600160a01b0319166001600160a01b0383169081179091556040517f46f5f516f6e3226c27d878e2a87f74ebdc95e752f7d5de0f102a231a8d28f74590600090a250565b6004546001600160a01b03163314610dcc5760405162461bcd60e51b81526004016107b2906143d5565b6001548314610dde57610dde83610892565b6002548214610df057610df082611395565b600054811461088d5761088d815b6004546001600160a01b03163314610e285760405162461bcd60e51b81526004016107b2906143d5565b60008111610e485760405162461bcd60e51b81526004016107b2906142c0565b6002548110610e695760405162461bcd60e51b81526004016107b290614131565b7f4bf48f4a07b20309fa7bd58d04c1aa538e17a29099bebb19872d1a54e8e1c4ea60005482604051610e9c929190613f58565b60405180910390a1600055565b60035481565b610eba600833611fa8565b610ed65760405162461bcd60e51b81526004016107b290614168565b6000610ee28787611e86565b506000818152600f60205260409020909150610efe908661267c565b610f1a5760405162461bcd60e51b81526004016107b2906144ca565b610f2a6012888888888888612688565b610f36878760016127b5565b856001600160a01b0316876001600160a01b03167f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f2687878787604051610f7f9493929190613f66565b60405180910390a350505050505050565b610f9b600833611fa8565b610fb75760405162461bcd60e51b81526004016107b290614168565b610fc66012868686868661283c565b610fd2858560016127b5565b836001600160a01b0316856001600160a01b03167fff9f0c6cfb29ffc1a20f3a25b0cb947e89cb363e39e3db0df827dcec79f126b685858560405161101993929190613f83565b60405180910390a35050505050565b6004546000906001600160a01b031633146110555760405162461bcd60e51b81526004016107b2906143d5565b611060600883611fa8565b61107c5760405162461bcd60e51b81526004016107b290614289565b6040516001600160a01b038316907f484fb579b9a8ea6000e970f2490ecb56612c86295b1467a5063ec9a2220b2e4b90600090a2610785600883611fbd565b6110c6600833611fa8565b6110e25760405162461bcd60e51b81526004016107b290614168565b6001600160a01b0383166000908152600c60209081526040808320858452909152902054611110908261292a565b6001600160a01b0384166000908152600c60209081526040808320868452909152902081905561115e576001600160a01b0383166000908152600d6020526040902061115c9083612952565b505b826001600160a01b03167fb4c40c9409d6c2c7dfd2fb0d7e0f26582b9dd0dee72dc0ff6ff09af501ba7a768383604051611199929190613f58565b60405180910390a2505050565b6004546001600160a01b031681565b6001600160a01b03811660009081526011602052604081206060916111d982611f91565b905060608167ffffffffffffffff811180156111f457600080fd5b5060405190808252806020026020018201604052801561121e578160200160208202803683370190505b50905060005b828110156112685760006112388583611f9c565b90508083838151811061124757fe5b6001600160a01b039092166020928302919091019091015250600101611224565b50949350505050565b600c60209081526000928352604080842090915290825290205481565b60006107858260008061295e565b6112a7600833611fa8565b6112c35760405162461bcd60e51b81526004016107b290614168565b6001600160a01b0383166000908152600d602052604090206112e59083612a9c565b506112f18383836117f5565b61130d5760405162461bcd60e51b81526004016107b290614434565b6001600160a01b0383166000908152600c6020908152604080832085845290915290205461133b9082612aa8565b6001600160a01b0384166000818152600c60209081526040808320878452909152908190209290925590517f430a1193f254f9e15dc397d101a1ecf0a3383c95007062135900cc7c2a6b8043906111999085908590613f58565b6004546001600160a01b031633146113bf5760405162461bcd60e51b81526004016107b2906143d5565b600081116113df5760405162461bcd60e51b81526004016107b290614229565b60015481106114005760405162461bcd60e51b81526004016107b2906142e9565b7fa4445a1c25ee07dc5cbb362ccd32feb0c96f53b9c05588e53d7a05ea1975813a60025482604051611433929190613f58565b60405180910390a1600255565b60008060008060006114528888611e86565b506000818152600f6020526040902090915061146e908761267c565b61148a5760405162461bcd60e51b81526004016107b2906144ca565b61149261376f565b61149f60128a8a8a612acd565b805160208201516040830151606090930151919c909b50919950975095505050505050565b6114cf600833611fa8565b6114eb5760405162461bcd60e51b81526004016107b290614168565b6114fc601288888888888888612b45565b611508878760016127b5565b856001600160a01b0316876001600160a01b03167f93e5ba92322cd89358ce3fbbe2b25b694ef010aee4a1e46ac849c392887bd5088787878787604051610f7f959493929190613f99565b6004546000906001600160a01b031633146115805760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b0382166115a65760405162461bcd60e51b81526004016107b2906141cc565b6115b8826001600160a01b0316612676565b6115d45760405162461bcd60e51b81526004016107b290614252565b6115df600883611fa8565b156115fc5760405162461bcd60e51b81526004016107b2906143fd565b6040516001600160a01b038316907f6426e73541c82494e19ac1646c231acf4b36f248c5146ed03a248e35dde1fac090600090a26107856008836125f0565b6004546001600160a01b031633146116655760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b03811661168b5760405162461bcd60e51b81526004016107b2906141cc565b61169d816001600160a01b0316612676565b6116b95760405162461bcd60e51b81526004016107b290614252565b600780546001600160a01b0319166001600160a01b0383169081179091556040517f989a6b1f040653a79dfe5f704cecdd21dab3e67fc917106ce621d6711bc3332f90600090a250565b61170e600a33611fa8565b61172a5760405162461bcd60e51b81526004016107b2906143a7565b60006117368383611e86565b506000818152601060205260409020909150610cd490336125f0565b60008060008060008061176d88886000806000806001612c20565b9296509094509250905082611783576000611785565b835b81611791576000611793565b825b95509550505050509250929050565b6000806000806000806117bd88886000806000806001612c20565b92965090945092509050826117d257836117d5565b60005b816117e05782611793565b98600098509650505050505050565b60025481565b600080611803858585612605565b5060015411159150505b9392505050565b6004546001600160a01b0316331461183e5760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b0381166118645760405162461bcd60e51b81526004016107b2906141cc565b611876816001600160a01b0316612676565b6118925760405162461bcd60e51b81526004016107b290614252565b600580546001600160a01b0319166001600160a01b0383169081179091556040517f432f91f15e19a8fa78cf858ff971e246d92cdd2d6049f4ad52566b3fae85d2f490600090a250565b6004546000906001600160a01b031633146119095760405162461bcd60e51b81526004016107b2906143d5565b6001600160a01b03821661192f5760405162461bcd60e51b81526004016107b2906141cc565b611941826001600160a01b0316612676565b61195d5760405162461bcd60e51b81526004016107b290614252565b611968600a83611fa8565b156119855760405162461bcd60e51b81526004016107b2906143fd565b60008290506000816001600160a01b031663a5f7379f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119c557600080fd5b505afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd9190613d00565b90506000826001600160a01b0316639d76ea586040518163ffffffff1660e01b815260040160206040518083038186803b158015611a3a57600080fd5b505afa158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a729190613a2d565b9050846001600160a01b03167ff5c161467306371e9a1f3ee7ac7573078c4e85ed24a127cf6523c0e2e298ad158383604051611aaf929190613f41565b60405180910390a2610bfc600a866125f0565b6000610c5c82612cf2565b60606000611adb8484611e86565b506000818152601060205260408120919250611af682611f91565b905060608167ffffffffffffffff81118015611b1157600080fd5b50604051908082528060200260200182016040528015611b3b578160200160208202803683370190505b50905060005b8281101561077e576000611b558583611f9c565b905080838381518110611b6457fe5b6001600160a01b039092166020928302919091019091015250600101611b41565b611b90600833611fa8565b611bac5760405162461bcd60e51b81526004016107b290614168565b6000611bb88787611e86565b506000818152600f60205260409020909150611bd49086612a9c565b50611be56012888888888888612d9b565b611bf1878760016127b5565b856001600160a01b0316876001600160a01b03167fb98a18b045c69b240b38573658669b475c5431a85b85c92eb84473a2c3ff09a587878787604051610f7f9493929190613f66565b6006546001600160a01b0316331480611c595750611c59600833611fa8565b611c755760405162461bcd60e51b81526004016107b290614361565b6000611c98612710611c9260005487612e8f90919063ffffffff16565b90612ec9565b6005546040516344a6ecdd60e01b81529192506000916001600160a01b03909116906344a6ecdd90611cd09089908690600401613f58565b60206040518083038186803b158015611ce857600080fd5b505afa158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d209190613d00565b9050611d2d8888836124fb565b611d495760405162461bcd60e51b81526004016107b290613fbc565b866001600160a01b0316886001600160a01b03167fed433eb165bd381b6fa417686c541023235ba1cc52f6075a29f79d4d28d328bc8888604051611d8e929190613f58565b60405180910390a3611da7601289898988600089612688565b866001600160a01b0316886001600160a01b03167f68138c591862f56cecd08a2037bc5b644ec9511c6e90845a64e12fd295a99f268887600088604051611df19493929190613f66565b60405180910390a3611e05888860016127b5565b5050505050505050565b6005546001600160a01b031681565b600080600080611e328a8a8a8a8a8a611fd2565b600154918211159550101592505050965096945050505050565b336000818152600e602052604090205460ff1615611e7c5760405162461bcd60e51b81526004016107b2906140ce565b61088d8383612077565b600080826001600160a01b0316846001600160a01b03161415611ebb5760405162461bcd60e51b81526004016107b290614041565b600080846001600160a01b0316866001600160a01b031610611ede578486611ee1565b85855b90925090506001600160a01b038216611f0c5760405162461bcd60e51b81526004016107b29061406e565b856001600160a01b0316826001600160a01b031614611f5b578181604051602001611f38929190613e58565b60405160208183030381529060405280519060200120600193509350505061080c565b8181604051602001611f6e929190613e58565b60405160208183030381529060405280519060200120600093509350505061080c565b600061078582612efb565b600061180d8383612eff565b600061180d836001600160a01b038416612f44565b600061180d836001600160a01b038416612f5c565b600080611fdd613797565b611feb898989898989613022565b60208301528152611ffc8989613145565b60a0830152608082015280511561202c57805160808201516120269190611c929061271090612e8f565b60408201525b60208101511561205d576120578160200151611c928360a00151612710612e8f90919063ffffffff16565b60608201525b806040015181606001519250925050965096945050505050565b336000818152600e602052604090819020805460ff19166001179055600754905163e9ac42cb60e01b81526001600160a01b03919091169163e9ac42cb916120c6919085908790600401613d92565b600060405180830381600087803b1580156120e057600080fd5b505af11580156120f4573d6000803e3d6000fd5b50506040513392507feeda149c76076b34d4b9d8896c2f7efc0d33d1c7b53ea3c5db490d64613f603a9150600090a25050565b6000806000806121356137cd565b61213f8b8b611e86565b508082526000908152600f6020526040902061215a81611f91565b61022083015260005b8261022001518110156123c15761217a8282611f9c565b602084018190528b14156121a65761219c60128e8e86602001518e8e8e61326a565b60408401526121bd565b6121b760128e8e8660200151612acd565b60408401525b6005546020840151604051630ba1ffe760e11b81526001600160a01b0390921691631743ffce916121f091600401613f38565b60206040518083038186803b15801561220857600080fd5b505afa15801561221c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122409190613d00565b6060840181905260408401516122559161333c565b6040840181905251608084015161226b91612aa8565b608084015260408301516020015160a084015161228791612aa8565b60a08401526005546020840151604051634d5ed9c560e11b81526001600160a01b0390921691639abdb38a916122bf91600401613f38565b60206040518083038186803b1580156122d757600080fd5b505afa1580156122eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230f9190613d00565b610180840152604080840151015160c084015161232b91612aa8565b60c084015260408301516060015160e084015161234791612aa8565b60e0840152610180830151604080850151015161237c916123709161271091611c929190612e8f565b61014085015190612aa8565b6101408401526101808301516040840151606001516123b3916123a79161271091611c929190612e8f565b61016085015190612aa8565b610160840152600101612163565b508161016001518260c0015110156123da5760006123ee565b61016082015160c08301516123ee9161292a565b6101a083015261014082015160e0830151101561240c576000612420565b61014082015160e08301516124209161292a565b6101c083018190526101a0830151116124685781608001516124638360a0015161245d856101a00151866101c0015161292a90919063ffffffff16565b90612aa8565b612493565b61248d826080015161245d846101c00151856101a0015161292a90919063ffffffff16565b8260a001515b6102008401526101e083015260c082015160808301516124b291612aa8565b61010083015260e082015160a08301516124cb91612aa8565b61012083018190526101e083015161020084015161010090940151909e939d509b50995090975050505050505050565b6001600160a01b03831660009081526011602052604081208161251d82611f91565b905060005b841580159061253057508181105b156125d15760006125418483611f9c565b6040516326c0130360e01b81529091506001600160a01b038216906326c0130390612574908b908b908b90600401613e72565b602060405180830381600087803b15801561258e57600080fd5b505af11580156125a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c69190613d00565b955050600101612522565b84156125e3576000935050505061180d565b5060019695505050505050565b600061180d836001600160a01b038416613408565b60008061261061385c565b61261b86868661295e565b815261262686613452565b6040820152805115612655578051604082015161264b9190611c929061271090612e8f565b6020820152612661565b5160009250905061266e565b6020810151905190925090505b935093915050565b3b151590565b600061180d8383612f44565b6000806126958888611e86565b600082815260208c815260408083208b845290915290209193509150816127325785156126ee57836126d55780546126cd908761292a565b8082556126ec565b60028101546126e4908761292a565b816002018190555b505b841561272d5783612714576001810154612708908661292a565b8160010181905561272b565b6003810154612723908661292a565b816003018190555b505b6127a9565b8515612771578361275857600181015461274c908761292a565b8160010181905561276f565b6003810154612767908761292a565b816003018190555b505b84156127a95783612790578054612788908661292a565b8082556127a7565b600281015461279f908661292a565b816002018190555b505b50505050505050505050565b6000806000806127cc87876000806000808b612c20565b93509350935093506000841115612805576127e987878686613530565b6128055760405162461bcd60e51b81526004016107b290614493565b81156128335761281786888484613530565b6128335760405162461bcd60e51b81526004016107b290614493565b50505050505050565b6000806128498787611e86565b600082815260208b815260408083208a845290915290209193509150816128c757841561289357805461287c908661292a565b8155600281015461288d9086612aa8565b60028201555b83156128c25760018101546128a8908561292a565b600182015560038101546128bc9085612aa8565b60038201555b61291f565b84156128f65760018101546128dc908661292a565b600182015560038101546128f09086612aa8565b60038201555b831561291f578054612908908561292a565b815560028101546129199085612aa8565b60028201555b505050505050505050565b60008282111561294c5760405162461bcd60e51b81526004016107b290614195565b50900390565b600061180d8383612f5c565b6001600160a01b0383166000908152600d6020526040812061297e61376f565b61298782611f91565b606082015260005b8160600151811015612a915760006129a78483611f9c565b6001600160a01b0389166000908152600c60209081526040808320848452825290912054908501529050868114156129ee5760208301516129e89087612aa8565b60208401525b60055460208401516040516344a6ecdd60e01b81526001600160a01b03909216916344a6ecdd91612a2491859190600401613f58565b60206040518083038186803b158015612a3c57600080fd5b505afa158015612a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a749190613d00565b604084018190528351612a8691612aa8565b83525060010161298f565b505195945050505050565b600061180d8383613408565b60008282018381101561180d5760405162461bcd60e51b81526004016107b290614097565b612ad561376f565b600080612ae28686611e86565b600082815260208a81526040808320898452825291829020825160808101845281548152600182015492810192909252600281015492820192909252600390910154606082015294509092509050612b3a83826136b7565b979650505050505050565b600080612b528989611e86565b600082815260208d815260408083208c84529091529020919350915081612bc6578415612b9a57612b948561245d89846002015461292a90919063ffffffff16565b60028201555b8315612bc157612bbb8461245d88846003015461292a90919063ffffffff16565b60038201555b6127a7565b8415612bed57612be78561245d89846003015461292a90919063ffffffff16565b60038201555b83156127a757612c0e8461245d88846002015461292a90919063ffffffff16565b60028201555050505050505050505050565b600080600080612c2e61387d565b612c3c8c8c8c8c8c8c613022565b602083015281528515612c80576001548151612c5f9161271091611c9291612e8f565b81526001546020820151612c7a9161271091611c9291612e8f565b60208201525b612c8a8c8c613145565b60e083015260c082018190528151612ca291906136e8565b15156060830152604082015260e08101516020820151612cc291906136e8565b151560a08301819052608083018290526040830151606090930151929e929d50909b509950975050505050505050565b600080612cfd6138c6565b612d0984600080612605565b82526020820152612d1984613452565b608082015260015460208201511115612d66576001546020820151612d3d9161292a565b6040820181905260208201516080830151612d5c92611c929190612e8f565b6060820152612d89565b8051612d7d57608081015190519092509050612d96565b51600092509050612d96565b6060810151905190925090505b915091565b600080612da88888611e86565b600082815260208c815260408083208b84529091529020919350915081612e2a578515612e015783612de8578054612de09087612aa8565b808255612dff565b6002810154612df79087612aa8565b816002018190555b505b841561272d5783612e1b5760018101546127089086612aa8565b60038101546127239086612aa8565b8515612e695783612e50576001810154612e449087612aa8565b81600101819055612e67565b6003810154612e5f9087612aa8565b816003018190555b505b84156127a95783612e805780546127889086612aa8565b600281015461279f9086612aa8565b600082612e9e57506000610785565b82820282848281612eab57fe5b041461180d5760405162461bcd60e51b81526004016107b290614320565b6000808211612eea5760405162461bcd60e51b81526004016107b2906141f2565b818381612ef357fe5b049392505050565b5490565b81546000908210612f225760405162461bcd60e51b81526004016107b290613fff565b826000018281548110612f3157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b600081815260018301602052604081205480156130185783546000198083019190810190600090879083908110612f8f57fe5b9060005260206000200154905080876000018481548110612fac57fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612fdc57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610785565b6000915050610785565b60008061302d6138f5565b61303b898989898989612127565b60608501526040840181905260208401919091529082526003546130679161271091611c929190612e8f565b608082015260035460608201516130859161271091611c9291612e8f565b60a08201528051156130c85760015481516130a79161271091611c9291612e8f565b8160800151116130b85780516130be565b80608001515b60c08201526130d3565b608081015160c08201525b602081015115613120576130fc612710611c926001548460200151612e8f90919063ffffffff16565b8160a0015111613110578060200151613116565b8060a001515b60e082015261312b565b60a081015160e08201525b8060c001518160e001519250925050965096945050505050565b60008060006131548585611e86565b50600081815260106020526040902090915061316e6138c6565b61317782611f91565b815260005b81518110156132515760006131918483611f9c565b604051631232c4f560e21b81529091506001600160a01b038216906348cb13d4906131c2908c908c90600401613e58565b604080518083038186803b1580156131d957600080fd5b505afa1580156131ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132119190613d30565b604085015260208401819052606084015161322b91612aa8565b60608401526040830151608084015161324391612aa8565b60808401525060010161317c565b5080606001518160800151945094505050509250929050565b61327261376f565b60008061327f8989611e86565b600082815260208d815260408083208c84528252918290208251608081018452815481526001820154928101929092526002810154928201929092526003909101546060820152945090925090506132d783826136b7565b9250831561330c5760408301516132ee9087612aa8565b604084015260608301516133029086612aa8565b606084015261332f565b82516133189087612aa8565b835260208301516133299086612aa8565b60208401525b5050979650505050505050565b61334461376f565b82511561336857825161336590670de0b6b3a764000090611c929085612e8f565b83525b60208301511561339b57613395670de0b6b3a7640000611c92848660200151612e8f90919063ffffffff16565b60208401525b6040830151156133ce576133c8670de0b6b3a7640000611c92848660400151612e8f90919063ffffffff16565b60408401525b606083015115613401576133fb670de0b6b3a7640000611c92848660600151612e8f90919063ffffffff16565b60608401525b5090919050565b60006134148383612f44565b61344a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610785565b506000610785565b6001600160a01b038116600090815260116020526040812081808061347684611f91565b905060005b8181101561352557600061348f8683611f9c565b60405163d98e918560e01b81529091506001600160a01b0382169063d98e9185906134be908b90600401613d7e565b60206040518083038186803b1580156134d657600080fd5b505afa1580156134ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061350e9190613d00565b945061351a8486612aa8565b93505060010161347b565b509095945050505050565b6001600160a01b03841660009081526011602052604081208161355282611f91565b905060005b851580159061356557508181105b156136955760006135768483611f9c565b9050851561360757604051634c64f21d60e11b81526001600160a01b038216906398c9e43a906135ae908c908c908c90600401613e72565b602060405180830381600087803b1580156135c857600080fd5b505af11580156135dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136009190613d00565b965061368c565b6040516358846d5360e11b81526001600160a01b0382169063b108daa690613637908c908c908c90600401613e72565b602060405180830381600087803b15801561365157600080fd5b505af1158015613665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136899190613d00565b96505b50600101613557565b85156136a757600093505050506136af565b600193505050505b949350505050565b6136bf61376f565b811561340157505080516040820180516020840180518552929092526060830180519091525290565b6000806000841180156136fb5750600083115b15613733578284111561371d57613712848461292a565b91506001905061372e565b613727838561292a565b9150600090505b61080c565b600084118015613741575082155b156137515750829050600161080c565b8315801561375f5750600083115b1561080c57509092600092509050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805161024081018252600080825260208201529081016137ed61376f565b81526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806000815260200160008152602001600081525090565b6040518061010001604052806000815260200160008152602001600081526020016000151581526020016000815260200160001515815260200160008152602001600081525090565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600082601f83011261394a578081fd5b813561395d61395882614532565b61450b565b81815291506020808301908481018184028601820187101561397e57600080fd5b60005b8481101561399d57813584529282019290820190600101613981565b505050505092915050565b600082601f8301126139b8578081fd5b813567ffffffffffffffff8111156139ce578182fd5b6139e1601f8201601f191660200161450b565b91508082528360208285010111156139f857600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215613a22578081fd5b813561180d8161457e565b600060208284031215613a3e578081fd5b815161180d8161457e565b60008060408385031215613a5b578081fd5b8235613a668161457e565b91506020830135613a768161457e565b809150509250929050565b600080600060608486031215613a95578081fd5b8335613aa08161457e565b92506020840135613ab08161457e565b929592945050506040919091013590565b600080600080600060a08688031215613ad8578081fd5b8535613ae38161457e565b94506020860135613af38161457e565b94979496505050506040830135926060810135926080909101359150565b60008060008060008060c08789031215613b29578081fd5b8635613b348161457e565b95506020870135613b448161457e565b945060408701359350606087013592506080870135915060a08701358015158114613b6d578182fd5b809150509295509295509295565b600080600080600080600060e0888a031215613b95578081fd5b8735613ba08161457e565b96506020880135613bb08161457e565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600080600060608486031215613a95578283fd5b60008060408385031215613c02578182fd5b8235613c0d8161457e565b946020939093013593505050565b600080600060608486031215613c2f578081fd5b8335613c3a8161457e565b95602085013595506040909401359392505050565b60008060408385031215613c61578182fd5b823567ffffffffffffffff80821115613c78578384fd5b818501915085601f830112613c8b578384fd5b8135613c9961395882614532565b81815260208082019190858101885b85811015613cd157613cbf8c8484358b01016139a8565b85529382019390820190600101613ca8565b50919750880135945050505080821115613ce9578283fd5b50613cf68582860161393a565b9150509250929050565b600060208284031215613d11578081fd5b5051919050565b600060208284031215613d29578081fd5b5035919050565b60008060408385031215613d42578182fd5b505080516020909101519092909150565b600080600060608486031215613d67578081fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b6001600160a01b038416815260606020808301829052845191830182905260009185820191906080850190845b81811015613ddb57845183529383019391830191600101613dbf565b505084810360408601528551808252828201935082810282018301838801865b83811015613e4857601f198086850301885282518051613e1b8187613f38565b613e2882828c8601614552565b99890199601f919091019092169190910193505090850190600101613dfb565b50909a9950505050505050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252825182820181905260009190848201906040850190845b81811015613ed75783516001600160a01b031683529284019291840191600101613eb2565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015613ed757835183529284019291840191600101613eff565b901515815260200190565b91151582521515602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b938452602084019290925260408301521515606082015260800190565b9283526020830191909152604082015260600190565b948552602085019390935260408401919091526060830152608082015260a00190565b60208082526023908201527f494e434f52524543545f4c49515549444154494f4e5f4143524f53535f5641556040820152624c545360e81b606082015260800190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252601390820152724964656e746963616c2061646472657373657360681b604082015260600190565b6020808252600f908201526e496e76616c6964206164647265737360881b604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b602080825260129082015271524547495354455245445f414c524541445960701b604082015260600190565b6020808252601d908201527f4d494e5f434f4c4c41544552414c5f524154494f5f4f564552464c4f57000000604082015260600190565b6020808252601a908201527f4c49515549444154494f4e5f50524943455f4f564552464c4f57000000000000604082015260600190565b6020808252601390820152722727a72fa1a7a62620aa22a920a62faaa9a2a960691b604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252600c908201526b5a65726f206164647265737360a01b604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b6020808252600f908201526e494e434f52524543545f524154494f60881b604082015260600190565b6020808252601e908201527f43616e277420616464206e6f6e2d636f6e747261637420616464726573730000604082015260600190565b6020808252601e908201527f43616e27742072656d6f7665206e6f6e2d6578697374696e6720757365720000604082015260600190565b6020808252600f908201526e494e434f52524543545f505249434560881b604082015260600190565b6020808252601f908201527f4155544f5f4c49515549444154494f4e5f524154494f5f4f564552464c4f5700604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526026908201527f4e4f525f4c49515549444154494f4e5f454e47494e455f434f4c4c4154455241604082015265262faaa9a2a960d11b606082015260800190565b6020808252601490820152731393d397d0d3d31310551154905317d59055531560621b604082015260600190565b6020808252600e908201526d494e56414c49445f41434345535360901b604082015260600190565b6020808252601a908201527f43616e277420616464206578697374696e672061646472657373000000000000604082015260600190565b602080825260159082015274139bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604082015260600190565b6020808252601690820152754e4f4e5f4c49515549444154494f4e5f454e47494e4560501b604082015260600190565b6020808252601e908201527f4e4f4e5f454e4f5547485f46554e44535f464f525f524542414c414e43450000604082015260600190565b6020808252600c908201526b6e6f6e2d757365642063637960a01b604082015260600190565b93845260208401929092526040830152606082015260800190565b60405181810167ffffffffffffffff8111828210171561452a57600080fd5b604052919050565b600067ffffffffffffffff821115614548578081fd5b5060209081020190565b60005b8381101561456d578181015183820152602001614555565b83811115610cd45750506000910152565b6001600160a01b038116811461459357600080fd5b5056fea2646970667358221220e919899c5e78e8efdbd7c61f7cbf89263ce7b1df6daa425aa185c68ed616b51964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCollateralUser(address)": {
        "details": "Trigers to add contract address to collateral users address set",
        "params": {
          "_user": "Collateral user smart contract address"
        }
      },
      "getCoverage(address,address)": {
        "details": "Triggers to get bilateral position collateral coverage.",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getMaxCollateralBookWidthdraw(address)": {
        "details": "Triggers to get maximum amount of ETH available to widthdraw from `_user` collateral book.",
        "params": {
          "_user": "User's address"
        }
      },
      "getMaxCollateralWidthdraw(address,address)": {
        "details": "Triggers to get maximum amount of ETH available to widthdraw from bilateral position between `party0` and `_party1`.",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getNetAndTotalPV(address,address)": {
        "details": "Triggers to calculate netted exposures across all currencies with applied haircuts",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getRebalanceCollateralAmounts(address,address)": {
        "details": "Triggers to get coverage of the global collateral book against all unsettled exposure.",
        "params": {
          "_party0": "Counterparty A address",
          "_party1": "Counterparty B address"
        }
      },
      "getTotalUnsettledExp(address)": {
        "details": "Triggers to calculate total unsettled exposure across all currencies",
        "params": {
          "_user": "User's address"
        }
      },
      "getUnsettledCoverage(address)": {
        "details": "Triggers to get coverage of the global collateral book against all unsettled exposure.",
        "params": {
          "_user": "User's address"
        }
      },
      "isCollateralUser(address)": {
        "details": "Trigers to check if provided `addr` is a collateral user from address set",
        "params": {
          "_user": "Contract address to check if it's a collateral user"
        }
      },
      "isCollateralVault(address)": {
        "details": "Trigers to check if provided address is valid CollateralVault",
        "params": {
          "_vault": "Contract address to check if it's a CollateralVault"
        }
      },
      "isCovered(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to check if collateral covered more that 150%.",
        "params": {
          "_ccy": "Currency to calculate additional PV for",
          "_party0": "Counterparty A address",
          "_party0PV": "Counterparty A additional present value",
          "_party1": "Counterparty B address",
          "_party1PV": "Counterparty B additional present value"
        }
      },
      "isCoveredUnsettled(address,bytes32,uint256)": {
        "details": "Triggers to check if unsettled collateral exposure covered more that 150% from a global collateral book of `_user`.",
        "params": {
          "_ccy": "Currency to calculate additional PV for",
          "_unsettledExp": "Additional exposure to lock into unsettled exposure",
          "_user": "User's ethereum address"
        }
      },
      "linkCollateralVault(address)": {
        "details": "Trigers to link CollateralVault with aggregator",
        "params": {
          "_vault": "CollateralVault smart contract address"
        }
      },
      "liquidate(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to liquidate collateral between `from` and `to` parties works liquidation amount in native `ccy`",
        "params": {
          "ccy": "Short identifier of currency used to liquidate",
          "from": "Address for liquidating collateral from",
          "isSettled": "Identifier wether collateral obligations for release is settled",
          "liquidationAmount": "Liquidation amount in Ccy",
          "to": "Address for sending collateral to"
        }
      },
      "liquidate(address,address,uint256)": {
        "details": "Triggers to liquidate collateral between `from` and `to` parties works with aggregated liquidation amount in ETH",
        "params": {
          "from": "Address for liquidating collateral from",
          "liquidationInETH": "Liquidation amount in Ccy",
          "to": "Address for sending collateral to"
        }
      },
      "register()": {
        "details": "Register user and store collateral book"
      },
      "register(string[],uint256[])": {
        "details": "Register user and store collateral book",
        "params": {
          "_addresses": "Array of other blockchain addresses",
          "_chainIds": "Array of chain ids for other blockchains"
        }
      },
      "releaseCollateral(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to reduce PV for specific `ccy` in bilateral position between `partyA` and `partyB`",
        "params": {
          "amount0": "Amount of funds to be removed in CcyNetting for counterparty A",
          "amount1": "Amount of funds to be removed in CcyNetting for counterparty B",
          "ccy": "Specified currency of the deal",
          "partyA": "Counterparty A address",
          "partyB": "Counterparty B address"
        }
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "details": "Triggers to reduce the amount of unsettled exposure in specific `ccy` from a global collateral book of `user`",
        "params": {
          "amount": "Amount of funds to be unlocked from unsettled exposure in specified ccy",
          "ccy": "Specified currency of the deal",
          "user": "User's ETH address"
        }
      },
      "removeCollateralUser(address)": {
        "details": "Trigers to remove collateral user from address set",
        "params": {
          "_user": "Collateral user smart contract address"
        }
      },
      "removeCollateralVault(address)": {
        "details": "Trigers to remove CollateralVault from address set",
        "params": {
          "_vault": "CollateralVault smart contract address"
        }
      },
      "setCrosschainAddressResolver(address)": {
        "details": "Trigers to set cros-chain address resolver contract address",
        "params": {
          "_addr": "CrosschainAddressResolver smart contract address"
        }
      },
      "setCurrencyController(address)": {
        "details": "Trigers to add currency controller contract address",
        "params": {
          "_addr": "Currency Controller smart contract address"
        }
      },
      "setLiquidationEngine(address)": {
        "details": "Trigers to set liquidation engine contract address",
        "params": {
          "_addr": "LiquidationEngine smart contract address"
        }
      },
      "settleCollateral(address,address,bytes32,uint256,uint256)": {
        "details": "Triggers to lock collateral using ETH rate for selected currency.",
        "params": {
          "amount0": "Amount of funds to be locked in Ccy for counterparty A",
          "amount1": "Amount of funds to be locked in Ccy for counterparty B",
          "ccy": "Specified currency of the deal",
          "partyA": "Counterparty A address",
          "partyB": "Counterparty B address"
        }
      },
      "updateAutoLiquidationThreshold(uint256)": {
        "details": "Trigers to update liquidation level ratio",
        "params": {
          "_ratio": "Auto Liquidation level ratio"
        }
      },
      "updateLiquidationPrice(uint256)": {
        "details": "Trigers to update liquidation price",
        "params": {
          "_price": "Liquidation price in basis point"
        }
      },
      "updateMainParameters(uint256,uint256,uint256)": {
        "details": "Trigers to safely update main collateral parameters this function solves the issue of frontrunning during parameters tuning",
        "params": {
          "_autoLiquidationThreshold": "Auto Liquidation level ratio",
          "_liquidationPrice": "Liquidation price in basis point",
          "_marginCallRatio": "Margin call ratio"
        }
      },
      "updateMarginCallThreshold(uint256)": {
        "details": "Trigers to update margin call level",
        "params": {
          "_ratio": "Margin call ratio"
        }
      },
      "updateMinCollateralRatio(uint256)": {
        "details": "Trigers to update minimal collateral ratio",
        "params": {
          "_ratio": "Minimal collateral ratio in basis points"
        }
      },
      "updatePV(address,address,bytes32,uint256,uint256,uint256,uint256)": {
        "details": "Triggers to update PV value in currency for bilateral position changes present value in native currency, without exchange rate conversion",
        "params": {
          "ccy": "Specified currency of the deal",
          "currentPV0": "Current present value to be added to total exposure for counterparty A",
          "currentPV1": "Current present value to be added to total exposure for counterparty B",
          "party0": "Counterparty A address",
          "party1": "Counterparty B address",
          "prevPV0": "Previous present value to be substracted from total exposure for counterparty A",
          "prevPV1": "Previous present value to be substracted from total exposure for counterparty B"
        }
      },
      "useCollateral(address,address,bytes32,uint256,uint256,bool)": {
        "details": "Triggers to lock collateral using ETH rate for selected currency.",
        "params": {
          "amount0": "Amount of funds to be locked in Ccy for counterparty A",
          "amount1": "Amount of funds to be locked in Ccy for counterparty B",
          "ccy": "Specified currency of the deal",
          "partyA": "Counterparty A address",
          "partyB": "Counterparty B address"
        }
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "details": "Triggers to lock unsettled collateral on a global book for selected currency.",
        "params": {
          "amount": "Amount of funds to be locked in Ccy for user",
          "ccy": "Specified currency of the deal",
          "user": "User's address"
        }
      }
    },
    "title": "Collateral Aggregator contract is used to manage Secured Finance protocol collateral obligations and movements of collateral across collateral vaults. This contract handle the calculations of aggregated collateral obligations between users in a bilateral relations, calculations of required rebalancing to stabilize the bilateral position, liquidations using FX rates for all protocol currency pairs to ETH Liquidations and rebalancing operations are handled across all collateral vaults where users have deposited their funds in FIFO order. Contract linked to Product based contracts (like Loan, Swap, etc), LendingMarkets, CurrencyController contracts and Liquidation Engine.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCollateralUser(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "linkCollateralVault(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "liquidate(address,address,bytes32,uint256,uint256,bool)": {
        "notice": "Trigers only be LiquidationEngine"
      },
      "liquidate(address,address,uint256)": {
        "notice": "Trigers only be LiquidationEngine"
      },
      "releaseCollateral(address,address,bytes32,uint256,uint256,bool)": {
        "notice": "Callable only by smart contracts allowed to use collateral"
      },
      "releaseUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Callable only by smart contracts allowed to use collateral"
      },
      "removeCollateralUser(address)": {
        "notice": "Trigers only be contract ownerReverts on removing non-existing collateral user"
      },
      "removeCollateralVault(address)": {
        "notice": "Trigers only be contract ownerReverts on removing non-existing collateral vault"
      },
      "setCrosschainAddressResolver(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "setCurrencyController(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "setLiquidationEngine(address)": {
        "notice": "Trigers only be contract ownerReverts on saving 0x0 address"
      },
      "settleCollateral(address,address,bytes32,uint256,uint256)": {
        "notice": "Callable only by Loan and linked LendingMarket"
      },
      "updateAutoLiquidationThreshold(uint256)": {
        "notice": "Trigers only be contract owner"
      },
      "updateLiquidationPrice(uint256)": {
        "notice": "Trigers only be contract owner"
      },
      "updateMainParameters(uint256,uint256,uint256)": {
        "notice": "Trigers only be contract owner"
      },
      "updateMarginCallThreshold(uint256)": {
        "notice": "Trigers only be contract owner"
      },
      "updateMinCollateralRatio(uint256)": {
        "notice": "Trigers only be contract owner"
      },
      "updatePV(address,address,bytes32,uint256,uint256,uint256,uint256)": {
        "notice": "Trigers only be Loan contract"
      },
      "useCollateral(address,address,bytes32,uint256,uint256,bool)": {
        "notice": "Callable only by Loan and linked LendingMarket"
      },
      "useUnsettledCollateral(address,bytes32,uint256)": {
        "notice": "Callable only by Loan and linked LendingMarket"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9782,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "LQLEVEL",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9785,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "MARGINLEVEL",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9788,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "AUTOLQLEVEL",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9791,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "MIN_COLLATERAL_RATIO",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9794,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9796,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "currencyController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ICurrencyController)22155"
      },
      {
        "astId": 9798,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "liquidationEngine",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ILiquidations)22625"
      },
      {
        "astId": 9800,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "crosschainAddressResolver",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ICrosschainAddressResolver)21861"
      },
      {
        "astId": 9802,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "collateralUsers",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)1812_storage"
      },
      {
        "astId": 9804,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "collateralVaults",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(AddressSet)1812_storage"
      },
      {
        "astId": 6896,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "unsettledCollateral",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 6900,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "exposedUnsettledCurrencies",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Bytes32Set)1727_storage)"
      },
      {
        "astId": 6904,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "isRegistered",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6908,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "exposedCurrencies",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)"
      },
      {
        "astId": 6912,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "usedVaultsInPosition",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1812_storage)"
      },
      {
        "astId": 6916,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "usedVaults",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_struct(AddressSet)1812_storage)"
      },
      {
        "astId": 6922,
        "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
        "label": "ccyNettings",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(CcyNetting)30709_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICrosschainAddressResolver)21861": {
        "encoding": "inplace",
        "label": "contract ICrosschainAddressResolver",
        "numberOfBytes": "20"
      },
      "t_contract(ICurrencyController)22155": {
        "encoding": "inplace",
        "label": "contract ICurrencyController",
        "numberOfBytes": "20"
      },
      "t_contract(ILiquidations)22625": {
        "encoding": "inplace",
        "label": "contract ILiquidations",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_struct(AddressSet)1812_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1812_storage"
      },
      "t_mapping(t_address,t_struct(Bytes32Set)1727_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1727_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_bytes32,t_struct(CcyNetting)30709_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(bytes32 => struct NetPV.CcyNetting))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(CcyNetting)30709_storage)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1812_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1812_storage"
      },
      "t_mapping(t_bytes32,t_struct(Bytes32Set)1727_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.Bytes32Set)",
        "numberOfBytes": "32",
        "value": "t_struct(Bytes32Set)1727_storage"
      },
      "t_mapping(t_bytes32,t_struct(CcyNetting)30709_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NetPV.CcyNetting)",
        "numberOfBytes": "32",
        "value": "t_struct(CcyNetting)30709_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1812_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1811,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)1727_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1726,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1547_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CcyNetting)30709_storage": {
        "encoding": "inplace",
        "label": "struct NetPV.CcyNetting",
        "members": [
          {
            "astId": 30702,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "unsettled0PV",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 30704,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "unsettled1PV",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 30706,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "party0PV",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 30708,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "party1PV",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Set)1547_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1542,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1546,
            "contract": "contracts/CollateralAggregatorV2.sol:CollateralAggregatorV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}