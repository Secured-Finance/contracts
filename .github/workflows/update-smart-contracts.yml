name: Update smart contracts

on:
  workflow_dispatch:
    inputs:
      network:
        description: 'Network'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - development-arb
          - development-ava
          - staging
          - staging-arb
          - staging-ava
          - sepolia
          - mainnet
          - arbitrum-sepolia
          - arbitrum-one
          - avalanche-mainnet
          - polygon-zkevm-mainnet

jobs:
  test:
    name: Test on a Fork
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.network }}
    if: ${{ vars.SKIP_TEST_ON_FORK != 'true' }}
    outputs:
      diff: ${{ steps.diff.outputs.count }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ (contains(github.event.inputs.network, 'development') && 'develop') || 'main' }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: Set environment variables
        run: |
          echo "INITIAL_CURRENCIES=${{ vars.INITIAL_CURRENCIES }}" >> $GITHUB_ENV
          echo "INITIAL_COMPOUND_FACTOR=${{ vars.INITIAL_COMPOUND_FACTOR }}" >> $GITHUB_ENV
          echo "INITIAL_MARKET_OPENING_DATE=${{ vars.INITIAL_MARKET_OPENING_DATE }}" >> $GITHUB_ENV
          echo "INITIAL_MARKET_PRE_OPENING_DATE=${{ vars.INITIAL_MARKET_PRE_OPENING_DATE }}" >> $GITHUB_ENV
          echo "INITIAL_MARKET_COUNT=${{ vars.INITIAL_MARKET_COUNT }}" >> $GITHUB_ENV
          echo "TOTAL_MARKET_COUNT=${{ vars.TOTAL_MARKET_COUNT }}" >> $GITHUB_ENV
          echo "OPENING_DATE_INTERVAL=${{ vars.OPENING_DATE_INTERVAL }}" >> $GITHUB_ENV
          echo "MARKET_BASE_PERIOD=${{ vars.MARKET_BASE_PERIOD }}" >> $GITHUB_ENV
          echo "ENABLE_AUTO_UPDATE=${{ vars.ENABLE_AUTO_UPDATE }}" >> $GITHUB_ENV
          echo "NATIVE_CURRENCY_SYMBOL=${{ vars.NATIVE_CURRENCY_SYMBOL }}" >> $GITHUB_ENV
          echo "NATIVE_TOKEN_ADDRESS=${{ vars.NATIVE_TOKEN_ADDRESS }}" >> $GITHUB_ENV
          echo "NATIVE_TOKEN_SYMBOL=${{ vars.NATIVE_TOKEN_SYMBOL }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_USDC=${{ vars.TOKEN_SYMBOL_USDC }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_WBTC=${{ vars.TOKEN_SYMBOL_WBTC }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_WETH=${{ vars.TOKEN_SYMBOL_WETH }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_WFIL=${{ vars.TOKEN_SYMBOL_WFIL }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_WFIL=${{ vars.TOKEN_ADDRESS_WFIL }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_USDC=${{ vars.TOKEN_ADDRESS_USDC }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_WBTC=${{ vars.TOKEN_ADDRESS_WBTC }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_WETH=${{ vars.TOKEN_ADDRESS_WETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_WFIL=${{ vars.PRICE_FEED_ADDRESSES_WFIL }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_USDC=${{ vars.PRICE_FEED_ADDRESSES_USDC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_WBTC=${{ vars.PRICE_FEED_ADDRESSES_WBTC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_WETH=${{ vars.PRICE_FEED_ADDRESSES_WETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_WFIL=${{ vars.PRICE_FEED_HEARTBEATS_WFIL }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_USDC=${{ vars.PRICE_FEED_HEARTBEATS_USDC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_WBTC=${{ vars.PRICE_FEED_HEARTBEATS_WBTC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_WETH=${{ vars.PRICE_FEED_HEARTBEATS_WETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_WFIL_TO_ETH=${{ vars.PRICE_FEED_MOCK_RATE_WFIL_TO_ETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_USDC_TO_USD=${{ vars.PRICE_FEED_MOCK_RATE_USDC_TO_USD }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_WBTC_TO_BTC=${{ vars.PRICE_FEED_MOCK_RATE_WBTC_TO_BTC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_BTC_TO_USD=${{ vars.PRICE_FEED_MOCK_RATE_BTC_TO_USD }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_ETH_TO_USD=${{ vars.PRICE_FEED_MOCK_RATE_ETH_TO_USD }}" >> $GITHUB_ENV
          echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}" >> $GITHUB_ENV
          echo "INFURA_API_KEY=${{ secrets.INFURA_API_KEY }}" >> $GITHUB_ENV
          echo "ENABLE_FAUCET=${{ vars.ENABLE_FAUCET }}" >> $GITHUB_ENV
          echo "TENDERLY_USER=${{ vars.TENDERLY_USER }}" >> $GITHUB_ENV
          echo "TENDERLY_PROJECT=${{ vars.TENDERLY_PROJECT }}" >> $GITHUB_ENV
          echo "TENDERLY_ACCESS_KEY=${{ secrets.TENDERLY_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "SAFE_WALLET_ADDRESS=${{ vars.SAFE_WALLET_ADDRESS }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: npm ci
      - name: Build Smart Contracts
        run: npm run compile
      - name: Create a fork environment
        run: |
          FORK_ID=$(npm run fork ${{ github.event.inputs.network }} | tail -n 1)
          echo "fork id is $FORK_ID"
          echo "FORK_ID=$FORK_ID" >> $GITHUB_ENV
      - name: Deploy for fork environment
        run: npm run deploy ${{ github.event.inputs.network }}
        env:
          FORK_RPC_ENDPOINT: https://rpc.tenderly.co/fork/${{ env.FORK_ID }}
      - name: Check diff
        shell: bash
        id: diff
        run: |
          echo "count=$(git diff --name-only . | wc -l)" >> $GITHUB_OUTPUT
      - name: Run a Loan Test on fork environment
        if: ${{ steps.diff.outputs.count > 0 }}
        env:
          USE_DEFAULT_ACCOUNTS: true
          FORK_RPC_ENDPOINT: https://rpc.tenderly.co/fork/${{ env.FORK_ID }}
        run: npx hardhat --network ${{ github.event.inputs.network }} test "scripts/zc-e2e.ts" --bail
      - name: Delete the fork environment
        run: npm run unfork --forkid $FORK_ID
  deploy:
    name: Deploy Smart Contracts
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'canceled') }}
    environment: ${{ github.event.inputs.network }}
    needs: [test]
    outputs:
      deploymentDiff: ${{ steps.deploymentDiff.outputs.count }}
      docgenDiff: ${{ steps.docgenDiff.outputs.count }}
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.MACHINE_USER_APP_ID }}
          private_key: ${{ secrets.MACHINE_USER_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ (contains(github.event.inputs.network, 'development') && 'develop') || 'main' }}
          token: ${{ steps.generate_token.outputs.token }}
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: 'Setup for git'
        run: |
          git config user.name "SF Machine User[bot]"
          git config user.email "${{ secrets.MACHINE_USER_APP_ID }}+sf-machine-user[bot]@users.noreply.github.com"
      - name: Install Dependencies
        run: npm ci
      - name: Build Smart Contracts
        run: npm run compile
      - name: Set environment variables
        run: |
          echo "INITIAL_CURRENCIES=${{ vars.INITIAL_CURRENCIES }}" >> $GITHUB_ENV
          echo "INITIAL_COMPOUND_FACTOR=${{ vars.INITIAL_COMPOUND_FACTOR }}" >> $GITHUB_ENV
          echo "INITIAL_MARKET_OPENING_DATE=${{ vars.INITIAL_MARKET_OPENING_DATE }}" >> $GITHUB_ENV
          echo "INITIAL_MARKET_PRE_OPENING_DATE=${{ vars.INITIAL_MARKET_PRE_OPENING_DATE }}" >> $GITHUB_ENV
          echo "MARKET_BASE_PERIOD=${{ vars.MARKET_BASE_PERIOD }}" >> $GITHUB_ENV
          echo "ENABLE_AUTO_UPDATE=${{ vars.ENABLE_AUTO_UPDATE }}" >> $GITHUB_ENV
          echo "NATIVE_CURRENCY_SYMBOL=${{ vars.NATIVE_CURRENCY_SYMBOL }}" >> $GITHUB_ENV
          echo "NATIVE_TOKEN_ADDRESS=${{ vars.NATIVE_TOKEN_ADDRESS }}" >> $GITHUB_ENV
          echo "NATIVE_TOKEN_SYMBOL=${{ vars.NATIVE_TOKEN_SYMBOL }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_USDC=${{ vars.TOKEN_SYMBOL_USDC }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_WBTC=${{ vars.TOKEN_SYMBOL_WBTC }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_WETH=${{ vars.TOKEN_SYMBOL_WETH }}" >> $GITHUB_ENV
          echo "TOKEN_SYMBOL_WFIL=${{ vars.TOKEN_SYMBOL_WFIL }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_WFIL=${{ vars.TOKEN_ADDRESS_WFIL }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_USDC=${{ vars.TOKEN_ADDRESS_USDC }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_WBTC=${{ vars.TOKEN_ADDRESS_WBTC }}" >> $GITHUB_ENV
          echo "TOKEN_ADDRESS_WETH=${{ vars.TOKEN_ADDRESS_WETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_WFIL=${{ vars.PRICE_FEED_ADDRESSES_WFIL }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_USDC=${{ vars.PRICE_FEED_ADDRESSES_USDC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_WBTC=${{ vars.PRICE_FEED_ADDRESSES_WBTC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_ADDRESSES_WETH=${{ vars.PRICE_FEED_ADDRESSES_WETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_WFIL=${{ vars.PRICE_FEED_HEARTBEATS_WFIL }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_USDC=${{ vars.PRICE_FEED_HEARTBEATS_USDC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_WBTC=${{ vars.PRICE_FEED_HEARTBEATS_WBTC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_HEARTBEATS_WETH=${{ vars.PRICE_FEED_HEARTBEATS_WETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_WFIL_TO_ETH=${{ vars.PRICE_FEED_MOCK_RATE_WFIL_TO_ETH }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_USDC_TO_USD=${{ vars.PRICE_FEED_MOCK_RATE_USDC_TO_USD }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_WBTC_TO_BTC=${{ vars.PRICE_FEED_MOCK_RATE_WBTC_TO_BTC }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_BTC_TO_USD=${{ vars.PRICE_FEED_MOCK_RATE_BTC_TO_USD }}" >> $GITHUB_ENV
          echo "PRICE_FEED_MOCK_RATE_ETH_TO_USD=${{ vars.PRICE_FEED_MOCK_RATE_ETH_TO_USD }}" >> $GITHUB_ENV
          echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> $GITHUB_ENV
          echo "ALCHEMY_API_KEY=${{ secrets.ALCHEMY_API_KEY }}" >> $GITHUB_ENV
          echo "INFURA_API_KEY=${{ secrets.INFURA_API_KEY }}" >> $GITHUB_ENV
          echo "ENABLE_FAUCET=${{ vars.ENABLE_FAUCET }}" >> $GITHUB_ENV
          echo "SAFE_WALLET_ADDRESS=${{ vars.SAFE_WALLET_ADDRESS }}" >> $GITHUB_ENV
          echo "SAFE_API_URL=${{ vars.SAFE_API_URL }}" >> $GITHUB_ENV
          echo "RELAYER_API_KEY=${{ vars.RELAYER_API_KEY }}" >> $GITHUB_ENV
          echo "RELAYER_API_SECRET=${{ secrets.RELAYER_API_SECRET }}" >> $GITHUB_ENV
      - name: Deploy smart contracts
        run: |
          npm run deploy ${{ github.event.inputs.network }}
          git add .
      - name: Check diff
        shell: bash
        id: deploymentDiff
        run: |
          echo "count=$(git diff --staged --name-only . | wc -l)" >> $GITHUB_OUTPUT
      - name: Commit and push
        shell: bash
        if: ${{ steps.deploymentDiff.outputs.count > 0 }}
        run: |
          git commit -m "chore: update smart contracts" --no-verify
          git push
      - name: Update documents
        if: ${{ github.event.inputs.network == 'development' }}
        run: |
          npm run docgen
          git add .
      - name: Check diff
        shell: bash
        id: docgenDiff
        run: |
          echo "count=$(git diff --staged --name-only . | wc -l)" >> $GITHUB_OUTPUT
      - name: Commit and push
        shell: bash
        if: ${{ steps.docgenDiff.outputs.count > 0 }}
        run: |
          git commit -m "chore: update docs" --no-verify
          git push
      - name: Merge main into develop
        shell: bash
        if: ${{ !contains(github.event.inputs.network, 'development') }}
        run: |
          git switch develop
          git merge main --no-verify
          git push
